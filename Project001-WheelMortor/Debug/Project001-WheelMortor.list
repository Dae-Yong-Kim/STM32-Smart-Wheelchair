
Project001-WheelMortor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08008e88  08008e88  00018e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009330  08009330  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009330  08009330  00019330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009338  08009338  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800933c  0800933c  0001933c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d8  08009514  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08009514  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d462  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e48  00000000  00000000  0002d6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  0002f4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f1  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001724f  00000000  00000000  00030ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e3ef  00000000  00000000  00047df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009016f  00000000  00000000  000561e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b88  00000000  00000000  000e6358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000eaee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008e70 	.word	0x08008e70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008e70 	.word	0x08008e70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int mode = 0, pre_mode = 0;
double dist = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001010:	d017      	beq.n	8001042 <HAL_GPIO_EXTI_Callback+0x42>
 8001012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001016:	d141      	bne.n	800109c <HAL_GPIO_EXTI_Callback+0x9c>
  case B1_Pin:
	  if(mode != 5)	{
 8001018:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b05      	cmp	r3, #5
 800101e:	d03c      	beq.n	800109a <HAL_GPIO_EXTI_Callback+0x9a>
		  mode++;	// 1: Front, 2: Rear, 3: Left, 4: Right, 0: Stop, 5: Stop (Too Close)
 8001020:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001028:	6013      	str	r3, [r2, #0]
		  if(mode == 5)	mode = 0;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d102      	bne.n	8001038 <HAL_GPIO_EXTI_Callback+0x38>
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
		  pre_mode = mode;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <HAL_GPIO_EXTI_Callback+0xb0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <HAL_GPIO_EXTI_Callback+0xb4>)
 800103e:	6013      	str	r3, [r2, #0]
	  }
	  break;
 8001040:	e02b      	b.n	800109a <HAL_GPIO_EXTI_Callback+0x9a>
  case Echo_Pin:
	  if(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin)) {
 8001042:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001046:	481c      	ldr	r0, [pc, #112]	; (80010b8 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001048:	f001 f9d0 	bl	80023ec <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d004      	beq.n	800105c <HAL_GPIO_EXTI_Callback+0x5c>
		  htim2.Instance->CNT = 0;
 8001052:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_GPIO_EXTI_Callback+0xbc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
		  }
		  else {
			  dist = htim2.Instance->CNT * 0.17;
		  }
	  }
	  break;
 800105a:	e01f      	b.n	800109c <HAL_GPIO_EXTI_Callback+0x9c>
		  if(htim2.Instance->CNT > 60000) {
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_GPIO_EXTI_Callback+0xbc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001066:	4293      	cmp	r3, r2
 8001068:	d906      	bls.n	8001078 <HAL_GPIO_EXTI_Callback+0x78>
			  dist = -1;
 800106a:	4915      	ldr	r1, [pc, #84]	; (80010c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001072:	e9c1 2300 	strd	r2, r3, [r1]
	  break;
 8001076:	e011      	b.n	800109c <HAL_GPIO_EXTI_Callback+0x9c>
			  dist = htim2.Instance->CNT * 0.17;
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_GPIO_EXTI_Callback+0xbc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa48 	bl	8000514 <__aeabi_ui2d>
 8001084:	a308      	add	r3, pc, #32	; (adr r3, 80010a8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fabd 	bl	8000608 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	490b      	ldr	r1, [pc, #44]	; (80010c0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001094:	e9c1 2300 	strd	r2, r3, [r1]
	  break;
 8001098:	e000      	b.n	800109c <HAL_GPIO_EXTI_Callback+0x9c>
	  break;
 800109a:	bf00      	nop
  }
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	f3af 8000 	nop.w
 80010a8:	5c28f5c3 	.word	0x5c28f5c3
 80010ac:	3fc5c28f 	.word	0x3fc5c28f
 80010b0:	20000314 	.word	0x20000314
 80010b4:	20000318 	.word	0x20000318
 80010b8:	40020000 	.word	0x40020000
 80010bc:	2000023c 	.word	0x2000023c
 80010c0:	20000320 	.word	0x20000320
 80010c4:	bff00000 	.word	0xbff00000

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f000 fe86 	bl	8001ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f90c 	bl	80012ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f000 faf2 	bl	80016bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d8:	f000 fac6 	bl	8001668 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80010dc:	f000 fa1e 	bl	800151c <MX_TIM2_Init>
  MX_TIM3_Init();
 80010e0:	f000 fa68 	bl	80015b4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80010e4:	f000 f96c 	bl	80013c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("Mortor test!");
 80010e8:	4875      	ldr	r0, [pc, #468]	; (80012c0 <main+0x1f8>)
 80010ea:	f000 fbc1 	bl	8001870 <ProgramStart>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010ee:	2100      	movs	r1, #0
 80010f0:	4874      	ldr	r0, [pc, #464]	; (80012c4 <main+0x1fc>)
 80010f2:	f001 ff57 	bl	8002fa4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80010f6:	2108      	movs	r1, #8
 80010f8:	4872      	ldr	r0, [pc, #456]	; (80012c4 <main+0x1fc>)
 80010fa:	f001 ff53 	bl	8002fa4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 80010fe:	4872      	ldr	r0, [pc, #456]	; (80012c8 <main+0x200>)
 8001100:	f001 fea6 	bl	8002e50 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001104:	2104      	movs	r1, #4
 8001106:	4871      	ldr	r0, [pc, #452]	; (80012cc <main+0x204>)
 8001108:	f001 ff4c 	bl	8002fa4 <HAL_TIM_PWM_Start>
  htim1.Instance->CCR1 = htim1.Instance->ARR / 3;
 800110c:	4b6d      	ldr	r3, [pc, #436]	; (80012c4 <main+0x1fc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001112:	4b6c      	ldr	r3, [pc, #432]	; (80012c4 <main+0x1fc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	496e      	ldr	r1, [pc, #440]	; (80012d0 <main+0x208>)
 8001118:	fba1 1202 	umull	r1, r2, r1, r2
 800111c:	0852      	lsrs	r2, r2, #1
 800111e:	635a      	str	r2, [r3, #52]	; 0x34
  htim1.Instance->CCR3 = htim1.Instance->ARR / 3;
 8001120:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <main+0x1fc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001126:	4b67      	ldr	r3, [pc, #412]	; (80012c4 <main+0x1fc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4969      	ldr	r1, [pc, #420]	; (80012d0 <main+0x208>)
 800112c:	fba1 1202 	umull	r1, r2, r1, r2
 8001130:	0852      	lsrs	r2, r2, #1
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c
  htim3.Instance->CCR2 = 10;
 8001134:	4b65      	ldr	r3, [pc, #404]	; (80012cc <main+0x204>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	220a      	movs	r2, #10
 800113a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("%f\r\n", dist);
 800113c:	4b65      	ldr	r3, [pc, #404]	; (80012d4 <main+0x20c>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	4865      	ldr	r0, [pc, #404]	; (80012d8 <main+0x210>)
 8001144:	f004 f8da 	bl	80052fc <iprintf>
	  if(dist == -1) {}
 8001148:	4b62      	ldr	r3, [pc, #392]	; (80012d4 <main+0x20c>)
 800114a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	4b62      	ldr	r3, [pc, #392]	; (80012dc <main+0x214>)
 8001154:	f7ff fcc0 	bl	8000ad8 <__aeabi_dcmpeq>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d112      	bne.n	8001184 <main+0xbc>
	  else if(dist < 150) {
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <main+0x20c>)
 8001160:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001164:	a354      	add	r3, pc, #336	; (adr r3, 80012b8 <main+0x1f0>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fcbf 	bl	8000aec <__aeabi_dcmplt>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <main+0xb4>
		  mode = 5;
 8001174:	4b5a      	ldr	r3, [pc, #360]	; (80012e0 <main+0x218>)
 8001176:	2205      	movs	r2, #5
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e003      	b.n	8001184 <main+0xbc>
	  }
	  else {
		  mode = pre_mode;
 800117c:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <main+0x21c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a57      	ldr	r2, [pc, #348]	; (80012e0 <main+0x218>)
 8001182:	6013      	str	r3, [r2, #0]
	  }

	  switch(mode) {
 8001184:	4b56      	ldr	r3, [pc, #344]	; (80012e0 <main+0x218>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b05      	cmp	r3, #5
 800118a:	d8d7      	bhi.n	800113c <main+0x74>
 800118c:	a201      	add	r2, pc, #4	; (adr r2, 8001194 <main+0xcc>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011ad 	.word	0x080011ad
 8001198:	080011d9 	.word	0x080011d9
 800119c:	08001205 	.word	0x08001205
 80011a0:	08001231 	.word	0x08001231
 80011a4:	0800125d 	.word	0x0800125d
 80011a8:	08001289 	.word	0x08001289
	  case 0:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b2:	484d      	ldr	r0, [pc, #308]	; (80012e8 <main+0x220>)
 80011b4:	f001 f932 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 80011b8:	2201      	movs	r2, #1
 80011ba:	2110      	movs	r1, #16
 80011bc:	484a      	ldr	r0, [pc, #296]	; (80012e8 <main+0x220>)
 80011be:	f001 f92d 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 80011c2:	2201      	movs	r2, #1
 80011c4:	2120      	movs	r1, #32
 80011c6:	4848      	ldr	r0, [pc, #288]	; (80012e8 <main+0x220>)
 80011c8:	f001 f928 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2108      	movs	r1, #8
 80011d0:	4845      	ldr	r0, [pc, #276]	; (80012e8 <main+0x220>)
 80011d2:	f001 f923 	bl	800241c <HAL_GPIO_WritePin>
		  break;
 80011d6:	e06e      	b.n	80012b6 <main+0x1ee>
	  case 1:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011de:	4842      	ldr	r0, [pc, #264]	; (80012e8 <main+0x220>)
 80011e0:	f001 f91c 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2110      	movs	r1, #16
 80011e8:	483f      	ldr	r0, [pc, #252]	; (80012e8 <main+0x220>)
 80011ea:	f001 f917 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2120      	movs	r1, #32
 80011f2:	483d      	ldr	r0, [pc, #244]	; (80012e8 <main+0x220>)
 80011f4:	f001 f912 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2108      	movs	r1, #8
 80011fc:	483a      	ldr	r0, [pc, #232]	; (80012e8 <main+0x220>)
 80011fe:	f001 f90d 	bl	800241c <HAL_GPIO_WritePin>
		  break;
 8001202:	e058      	b.n	80012b6 <main+0x1ee>
	  case 2:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800120a:	4837      	ldr	r0, [pc, #220]	; (80012e8 <main+0x220>)
 800120c:	f001 f906 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	2110      	movs	r1, #16
 8001214:	4834      	ldr	r0, [pc, #208]	; (80012e8 <main+0x220>)
 8001216:	f001 f901 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2120      	movs	r1, #32
 800121e:	4832      	ldr	r0, [pc, #200]	; (80012e8 <main+0x220>)
 8001220:	f001 f8fc 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8001224:	2201      	movs	r2, #1
 8001226:	2108      	movs	r1, #8
 8001228:	482f      	ldr	r0, [pc, #188]	; (80012e8 <main+0x220>)
 800122a:	f001 f8f7 	bl	800241c <HAL_GPIO_WritePin>
		  break;
 800122e:	e042      	b.n	80012b6 <main+0x1ee>
	  case 3:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001236:	482c      	ldr	r0, [pc, #176]	; (80012e8 <main+0x220>)
 8001238:	f001 f8f0 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	2110      	movs	r1, #16
 8001240:	4829      	ldr	r0, [pc, #164]	; (80012e8 <main+0x220>)
 8001242:	f001 f8eb 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 8001246:	2201      	movs	r2, #1
 8001248:	2120      	movs	r1, #32
 800124a:	4827      	ldr	r0, [pc, #156]	; (80012e8 <main+0x220>)
 800124c:	f001 f8e6 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2108      	movs	r1, #8
 8001254:	4824      	ldr	r0, [pc, #144]	; (80012e8 <main+0x220>)
 8001256:	f001 f8e1 	bl	800241c <HAL_GPIO_WritePin>
		  break;
 800125a:	e02c      	b.n	80012b6 <main+0x1ee>
	  case 4:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001262:	4821      	ldr	r0, [pc, #132]	; (80012e8 <main+0x220>)
 8001264:	f001 f8da 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2110      	movs	r1, #16
 800126c:	481e      	ldr	r0, [pc, #120]	; (80012e8 <main+0x220>)
 800126e:	f001 f8d5 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2120      	movs	r1, #32
 8001276:	481c      	ldr	r0, [pc, #112]	; (80012e8 <main+0x220>)
 8001278:	f001 f8d0 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 800127c:	2201      	movs	r2, #1
 800127e:	2108      	movs	r1, #8
 8001280:	4819      	ldr	r0, [pc, #100]	; (80012e8 <main+0x220>)
 8001282:	f001 f8cb 	bl	800241c <HAL_GPIO_WritePin>
		  break;
 8001286:	e016      	b.n	80012b6 <main+0x1ee>
	  case 5:
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);
 8001288:	2201      	movs	r2, #1
 800128a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128e:	4816      	ldr	r0, [pc, #88]	; (80012e8 <main+0x220>)
 8001290:	f001 f8c4 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8001294:	2201      	movs	r2, #1
 8001296:	2110      	movs	r1, #16
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <main+0x220>)
 800129a:	f001 f8bf 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);
 800129e:	2201      	movs	r2, #1
 80012a0:	2120      	movs	r1, #32
 80012a2:	4811      	ldr	r0, [pc, #68]	; (80012e8 <main+0x220>)
 80012a4:	f001 f8ba 	bl	800241c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2108      	movs	r1, #8
 80012ac:	480e      	ldr	r0, [pc, #56]	; (80012e8 <main+0x220>)
 80012ae:	f001 f8b5 	bl	800241c <HAL_GPIO_WritePin>
		  break;
 80012b2:	bf00      	nop
 80012b4:	e742      	b.n	800113c <main+0x74>
  {
 80012b6:	e741      	b.n	800113c <main+0x74>
 80012b8:	00000000 	.word	0x00000000
 80012bc:	4062c000 	.word	0x4062c000
 80012c0:	08008e88 	.word	0x08008e88
 80012c4:	200001f4 	.word	0x200001f4
 80012c8:	2000023c 	.word	0x2000023c
 80012cc:	20000284 	.word	0x20000284
 80012d0:	aaaaaaab 	.word	0xaaaaaaab
 80012d4:	20000320 	.word	0x20000320
 80012d8:	08008e98 	.word	0x08008e98
 80012dc:	bff00000 	.word	0xbff00000
 80012e0:	20000314 	.word	0x20000314
 80012e4:	20000318 	.word	0x20000318
 80012e8:	40020400 	.word	0x40020400

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b094      	sub	sp, #80	; 0x50
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	2230      	movs	r2, #48	; 0x30
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 fa12 	bl	8005724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <SystemClock_Config+0xcc>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <SystemClock_Config+0xcc>)
 800131a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <SystemClock_Config+0xcc>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	4b22      	ldr	r3, [pc, #136]	; (80013bc <SystemClock_Config+0xd0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a21      	ldr	r2, [pc, #132]	; (80013bc <SystemClock_Config+0xd0>)
 8001336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <SystemClock_Config+0xd0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001350:	2310      	movs	r3, #16
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001354:	2302      	movs	r3, #2
 8001356:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001358:	2300      	movs	r3, #0
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800135c:	2310      	movs	r3, #16
 800135e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001360:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001364:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001366:	2304      	movs	r3, #4
 8001368:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800136a:	2304      	movs	r3, #4
 800136c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	4618      	mov	r0, r3
 8001374:	f001 f884 	bl	8002480 <HAL_RCC_OscConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800137e:	f000 fa39 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001382:	230f      	movs	r3, #15
 8001384:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001386:	2302      	movs	r3, #2
 8001388:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2102      	movs	r1, #2
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 fae6 	bl	8002970 <HAL_RCC_ClockConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013aa:	f000 fa23 	bl	80017f4 <Error_Handler>
  }
}
 80013ae:	bf00      	nop
 80013b0:	3750      	adds	r7, #80	; 0x50
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40007000 	.word	0x40007000

080013c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b096      	sub	sp, #88	; 0x58
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
 80013ee:	615a      	str	r2, [r3, #20]
 80013f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2220      	movs	r2, #32
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 f993 	bl	8005724 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013fe:	4b45      	ldr	r3, [pc, #276]	; (8001514 <MX_TIM1_Init+0x154>)
 8001400:	4a45      	ldr	r2, [pc, #276]	; (8001518 <MX_TIM1_Init+0x158>)
 8001402:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001404:	4b43      	ldr	r3, [pc, #268]	; (8001514 <MX_TIM1_Init+0x154>)
 8001406:	2253      	movs	r2, #83	; 0x53
 8001408:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b42      	ldr	r3, [pc, #264]	; (8001514 <MX_TIM1_Init+0x154>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001410:	4b40      	ldr	r3, [pc, #256]	; (8001514 <MX_TIM1_Init+0x154>)
 8001412:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001416:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <MX_TIM1_Init+0x154>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800141e:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <MX_TIM1_Init+0x154>)
 8001420:	2200      	movs	r2, #0
 8001422:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <MX_TIM1_Init+0x154>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800142a:	483a      	ldr	r0, [pc, #232]	; (8001514 <MX_TIM1_Init+0x154>)
 800142c:	f001 fcc0 	bl	8002db0 <HAL_TIM_Base_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001436:	f000 f9dd 	bl	80017f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001440:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001444:	4619      	mov	r1, r3
 8001446:	4833      	ldr	r0, [pc, #204]	; (8001514 <MX_TIM1_Init+0x154>)
 8001448:	f001 ff1e 	bl	8003288 <HAL_TIM_ConfigClockSource>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001452:	f000 f9cf 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001456:	482f      	ldr	r0, [pc, #188]	; (8001514 <MX_TIM1_Init+0x154>)
 8001458:	f001 fd54 	bl	8002f04 <HAL_TIM_PWM_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001462:	f000 f9c7 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800146e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001472:	4619      	mov	r1, r3
 8001474:	4827      	ldr	r0, [pc, #156]	; (8001514 <MX_TIM1_Init+0x154>)
 8001476:	f002 faa7 	bl	80039c8 <HAL_TIMEx_MasterConfigSynchronization>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001480:	f000 f9b8 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001484:	2360      	movs	r3, #96	; 0x60
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 333;
 8001488:	f240 134d 	movw	r3, #333	; 0x14d
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	2200      	movs	r2, #0
 80014a8:	4619      	mov	r1, r3
 80014aa:	481a      	ldr	r0, [pc, #104]	; (8001514 <MX_TIM1_Init+0x154>)
 80014ac:	f001 fe2a 	bl	8003104 <HAL_TIM_PWM_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80014b6:	f000 f99d 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	2208      	movs	r2, #8
 80014c0:	4619      	mov	r1, r3
 80014c2:	4814      	ldr	r0, [pc, #80]	; (8001514 <MX_TIM1_Init+0x154>)
 80014c4:	f001 fe1e 	bl	8003104 <HAL_TIM_PWM_ConfigChannel>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80014ce:	f000 f991 	bl	80017f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4807      	ldr	r0, [pc, #28]	; (8001514 <MX_TIM1_Init+0x154>)
 80014f6:	f002 fad5 	bl	8003aa4 <HAL_TIMEx_ConfigBreakDeadTime>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001500:	f000 f978 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001504:	4803      	ldr	r0, [pc, #12]	; (8001514 <MX_TIM1_Init+0x154>)
 8001506:	f000 fa8b 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 800150a:	bf00      	nop
 800150c:	3758      	adds	r7, #88	; 0x58
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200001f4 	.word	0x200001f4
 8001518:	40010000 	.word	0x40010000

0800151c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <MX_TIM2_Init+0x94>)
 800153a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001542:	2253      	movs	r2, #83	; 0x53
 8001544:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_TIM2_Init+0x94>)
 800154e:	f04f 32ff 	mov.w	r2, #4294967295
 8001552:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_TIM2_Init+0x94>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001560:	4813      	ldr	r0, [pc, #76]	; (80015b0 <MX_TIM2_Init+0x94>)
 8001562:	f001 fc25 	bl	8002db0 <HAL_TIM_Base_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800156c:	f000 f942 	bl	80017f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001574:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_TIM2_Init+0x94>)
 800157e:	f001 fe83 	bl	8003288 <HAL_TIM_ConfigClockSource>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001588:	f000 f934 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_TIM2_Init+0x94>)
 800159a:	f002 fa15 	bl	80039c8 <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015a4:	f000 f926 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000023c 	.word	0x2000023c

080015b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ba:	f107 0320 	add.w	r3, r7, #32
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015d6:	4b22      	ldr	r3, [pc, #136]	; (8001660 <MX_TIM3_Init+0xac>)
 80015d8:	4a22      	ldr	r2, [pc, #136]	; (8001664 <MX_TIM3_Init+0xb0>)
 80015da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_TIM3_Init+0xac>)
 80015de:	2253      	movs	r2, #83	; 0x53
 80015e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_TIM3_Init+0xac>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_TIM3_Init+0xac>)
 80015ea:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80015ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_TIM3_Init+0xac>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_TIM3_Init+0xac>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015fc:	4818      	ldr	r0, [pc, #96]	; (8001660 <MX_TIM3_Init+0xac>)
 80015fe:	f001 fc81 	bl	8002f04 <HAL_TIM_PWM_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001608:	f000 f8f4 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001614:	f107 0320 	add.w	r3, r7, #32
 8001618:	4619      	mov	r1, r3
 800161a:	4811      	ldr	r0, [pc, #68]	; (8001660 <MX_TIM3_Init+0xac>)
 800161c:	f002 f9d4 	bl	80039c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001626:	f000 f8e5 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162a:	2360      	movs	r3, #96	; 0x60
 800162c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800162e:	230a      	movs	r3, #10
 8001630:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2204      	movs	r2, #4
 800163e:	4619      	mov	r1, r3
 8001640:	4807      	ldr	r0, [pc, #28]	; (8001660 <MX_TIM3_Init+0xac>)
 8001642:	f001 fd5f 	bl	8003104 <HAL_TIM_PWM_ConfigChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800164c:	f000 f8d2 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <MX_TIM3_Init+0xac>)
 8001652:	f000 f9e5 	bl	8001a20 <HAL_TIM_MspPostInit>

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000284 	.word	0x20000284
 8001664:	40000400 	.word	0x40000400

08001668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <MX_USART2_UART_Init+0x50>)
 8001670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_USART2_UART_Init+0x4c>)
 80016a0:	f002 fa52 	bl	8003b48 <HAL_UART_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016aa:	f000 f8a3 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200002cc 	.word	0x200002cc
 80016b8:	40004400 	.word	0x40004400

080016bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <MX_GPIO_Init+0x128>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a42      	ldr	r2, [pc, #264]	; (80017e4 <MX_GPIO_Init+0x128>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <MX_GPIO_Init+0x128>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <MX_GPIO_Init+0x128>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a3b      	ldr	r2, [pc, #236]	; (80017e4 <MX_GPIO_Init+0x128>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <MX_GPIO_Init+0x128>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <MX_GPIO_Init+0x128>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a34      	ldr	r2, [pc, #208]	; (80017e4 <MX_GPIO_Init+0x128>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <MX_GPIO_Init+0x128>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <MX_GPIO_Init+0x128>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <MX_GPIO_Init+0x128>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <MX_GPIO_Init+0x128>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2120      	movs	r1, #32
 8001746:	4828      	ldr	r0, [pc, #160]	; (80017e8 <MX_GPIO_Init+0x12c>)
 8001748:	f000 fe68 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN4_Pin|IN2_Pin|IN3_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8001752:	4826      	ldr	r0, [pc, #152]	; (80017ec <MX_GPIO_Init+0x130>)
 8001754:	f000 fe62 	bl	800241c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800175e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4820      	ldr	r0, [pc, #128]	; (80017f0 <MX_GPIO_Init+0x134>)
 8001770:	f000 fcb8 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001774:	2320      	movs	r3, #32
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4817      	ldr	r0, [pc, #92]	; (80017e8 <MX_GPIO_Init+0x12c>)
 800178c:	f000 fcaa 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN4_Pin IN2_Pin IN3_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN4_Pin|IN2_Pin|IN3_Pin;
 8001790:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4810      	ldr	r0, [pc, #64]	; (80017ec <MX_GPIO_Init+0x130>)
 80017aa:	f000 fc9b 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 80017ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017b4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80017b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4808      	ldr	r0, [pc, #32]	; (80017e8 <MX_GPIO_Init+0x12c>)
 80017c6:	f000 fc8d 	bl	80020e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2017      	movs	r0, #23
 80017d0:	f000 fc51 	bl	8002076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017d4:	2017      	movs	r0, #23
 80017d6:	f000 fc6a 	bl	80020ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017da:	bf00      	nop
 80017dc:	3728      	adds	r7, #40	; 0x28
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020800 	.word	0x40020800

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	e7fe      	b.n	80017fc <Error_Handler+0x8>
	...

08001800 <__io_getchar>:
//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\inc\stm32f4xx_hal_i2c.h"
extern UART_HandleTypeDef huart2;


int __io_getchar(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
   char ch;
   //데이터를 받을 때까지 기다려야 하므로 while을 사용해야 함
   while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8001806:	bf00      	nop
 8001808:	1df9      	adds	r1, r7, #7
 800180a:	230a      	movs	r3, #10
 800180c:	2201      	movs	r2, #1
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <__io_getchar+0x44>)
 8001810:	f002 fa75 	bl	8003cfe <HAL_UART_Receive>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f6      	bne.n	8001808 <__io_getchar+0x8>
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // echo: Serial 통신에서 받은 데이터를 그대로 돌려주는 것
 800181a:	1df9      	adds	r1, r7, #7
 800181c:	230a      	movs	r3, #10
 800181e:	2201      	movs	r2, #1
 8001820:	4808      	ldr	r0, [pc, #32]	; (8001844 <__io_getchar+0x44>)
 8001822:	f002 f9e1 	bl	8003be8 <HAL_UART_Transmit>
   if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b0d      	cmp	r3, #13
 800182a:	d105      	bne.n	8001838 <__io_getchar+0x38>
 800182c:	230a      	movs	r3, #10
 800182e:	2201      	movs	r2, #1
 8001830:	4905      	ldr	r1, [pc, #20]	; (8001848 <__io_getchar+0x48>)
 8001832:	4804      	ldr	r0, [pc, #16]	; (8001844 <__io_getchar+0x44>)
 8001834:	f002 f9d8 	bl	8003be8 <HAL_UART_Transmit>
   return ch;
 8001838:	79fb      	ldrb	r3, [r7, #7]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200002cc 	.word	0x200002cc
 8001848:	08008ea0 	.word	0x08008ea0

0800184c <__io_putchar>:
int __io_putchar(int ch) // Lowest output Function
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // timeout: 10ms
 8001854:	1d39      	adds	r1, r7, #4
 8001856:	230a      	movs	r3, #10
 8001858:	2201      	movs	r2, #1
 800185a:	4804      	ldr	r0, [pc, #16]	; (800186c <__io_putchar+0x20>)
 800185c:	f002 f9c4 	bl	8003be8 <HAL_UART_Transmit>
   return ch;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200002cc 	.word	0x200002cc

08001870 <ProgramStart>:
void ProgramStart(char *str)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
   //printf("\033[2J\033[0;0H"); // printf("\033[2J"); : 화면 Clear
   cls();
 8001878:	f000 f830 	bl	80018dc <cls>
   Cursor(0,0);
 800187c:	2100      	movs	r1, #0
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f836 	bl	80018f0 <Cursor>
   printf("Program Name - %s\r\n", str);
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	480a      	ldr	r0, [pc, #40]	; (80018b0 <ProgramStart+0x40>)
 8001888:	f003 fd38 	bl	80052fc <iprintf>
   printf("Press Blue-button(B1) to Start ...\r\n");
 800188c:	4809      	ldr	r0, [pc, #36]	; (80018b4 <ProgramStart+0x44>)
 800188e:	f003 fd9b 	bl	80053c8 <puts>
   StandBy();
 8001892:	f000 f813 	bl	80018bc <StandBy>
   setvbuf(stdin, NULL, _IONBF, 0);
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <ProgramStart+0x48>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6858      	ldr	r0, [r3, #4]
 800189c:	2300      	movs	r3, #0
 800189e:	2202      	movs	r2, #2
 80018a0:	2100      	movs	r1, #0
 80018a2:	f003 fd99 	bl	80053d8 <setvbuf>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	08008ea4 	.word	0x08008ea4
 80018b4:	08008eb8 	.word	0x08008eb8
 80018b8:	20000064 	.word	0x20000064

080018bc <StandBy>:

void StandBy()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 80018c0:	bf00      	nop
 80018c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c6:	4804      	ldr	r0, [pc, #16]	; (80018d8 <StandBy+0x1c>)
 80018c8:	f000 fd90 	bl	80023ec <HAL_GPIO_ReadPin>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f7      	bne.n	80018c2 <StandBy+0x6>
}
 80018d2:	bf00      	nop
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40020800 	.word	0x40020800

080018dc <cls>:

void cls() // 화면 clear
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
   printf("\033[2J");
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <cls+0x10>)
 80018e2:	f003 fd0b 	bl	80052fc <iprintf>
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	08008edc 	.word	0x08008edc

080018f0 <Cursor>:

void Cursor(int x, int y)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
   char buf[20];
   sprintf(buf, "\033[%d;%dH", y,x);
 80018fa:	f107 000c 	add.w	r0, r7, #12
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	4906      	ldr	r1, [pc, #24]	; (800191c <Cursor+0x2c>)
 8001904:	f003 fe16 	bl	8005534 <siprintf>
   puts(buf);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4618      	mov	r0, r3
 800190e:	f003 fd5b 	bl	80053c8 <puts>
}
 8001912:	bf00      	nop
 8001914:	3720      	adds	r7, #32
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	08008ee4 	.word	0x08008ee4

08001920 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a0f      	ldr	r2, [pc, #60]	; (800196c <HAL_MspInit+0x4c>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_MspInit+0x4c>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_MspInit+0x4c>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_MspInit+0x4c>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800195e:	2007      	movs	r0, #7
 8001960:	f000 fb7e 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <HAL_TIM_Base_MspInit+0x64>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10e      	bne.n	80019a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800199e:	e012      	b.n	80019c6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a8:	d10d      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_TIM_Base_MspInit+0x68>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40010000 	.word	0x40010000
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0b      	ldr	r2, [pc, #44]	; (8001a18 <HAL_TIM_PWM_MspInit+0x3c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10d      	bne.n	8001a0a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_TIM_PWM_MspInit+0x40>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <HAL_TIM_PWM_MspInit+0x40>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_TIM_PWM_MspInit+0x40>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40000400 	.word	0x40000400
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <HAL_TIM_MspPostInit+0xb0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d11f      	bne.n	8001a82 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b23      	ldr	r3, [pc, #140]	; (8001ad4 <HAL_TIM_MspPostInit+0xb4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <HAL_TIM_MspPostInit+0xb4>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_TIM_MspPostInit+0xb4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = ENA_Pin|ENB_Pin;
 8001a5e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4817      	ldr	r0, [pc, #92]	; (8001ad8 <HAL_TIM_MspPostInit+0xb8>)
 8001a7c:	f000 fb32 	bl	80020e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a80:	e022      	b.n	8001ac8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_TIM_MspPostInit+0xbc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d11d      	bne.n	8001ac8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_TIM_MspPostInit+0xb4>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <HAL_TIM_MspPostInit+0xb4>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_TIM_MspPostInit+0xb4>)
 8001a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Trig_Pin;
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <HAL_TIM_MspPostInit+0xc0>)
 8001ac4:	f000 fb0e 	bl	80020e4 <HAL_GPIO_Init>
}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40020800 	.word	0x40020800

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_UART_MspInit+0x84>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12b      	bne.n	8001b5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_UART_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b3e:	230c      	movs	r3, #12
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4e:	2307      	movs	r3, #7
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <HAL_UART_MspInit+0x8c>)
 8001b5a:	f000 fac3 	bl	80020e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40004400 	.word	0x40004400
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc0:	f000 f95e 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Echo_Pin);
 8001bcc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bd0:	f000 fc3e 	bl	8002450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return 1;
 8001bdc:	2301      	movs	r3, #1
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_kill>:

int _kill(int pid, int sig)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bf2:	f003 fde9 	bl	80057c8 <__errno>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2216      	movs	r2, #22
 8001bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_exit>:

void _exit (int status)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ffe7 	bl	8001be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c1a:	e7fe      	b.n	8001c1a <_exit+0x12>

08001c1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e00a      	b.n	8001c44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c2e:	f7ff fde7 	bl	8001800 <__io_getchar>
 8001c32:	4601      	mov	r1, r0
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	60ba      	str	r2, [r7, #8]
 8001c3a:	b2ca      	uxtb	r2, r1
 8001c3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dbf0      	blt.n	8001c2e <_read+0x12>
  }

  return len;
 8001c4c:	687b      	ldr	r3, [r7, #4]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e009      	b.n	8001c7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fdeb 	bl	800184c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dbf1      	blt.n	8001c68 <_write+0x12>
  }
  return len;
 8001c84:	687b      	ldr	r3, [r7, #4]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_close>:

int _close(int file)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_isatty>:

int _isatty(int file)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f003 fd4e 	bl	80057c8 <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20020000 	.word	0x20020000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	20000328 	.word	0x20000328
 8001d60:	20000480 	.word	0x20000480

08001d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <SystemInit+0x20>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <SystemInit+0x20>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d8c:	f7ff ffea 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d90:	480c      	ldr	r0, [pc, #48]	; (8001dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d92:	490d      	ldr	r1, [pc, #52]	; (8001dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d94:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001da8:	4c0a      	ldr	r4, [pc, #40]	; (8001dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001db6:	f003 fd0d 	bl	80057d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dba:	f7ff f985 	bl	80010c8 <main>
  bx  lr    
 8001dbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001dcc:	08009340 	.word	0x08009340
  ldr r2, =_sbss
 8001dd0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001dd4:	2000047c 	.word	0x2000047c

08001dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd8:	e7fe      	b.n	8001dd8 <ADC_IRQHandler>
	...

08001ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <HAL_Init+0x40>)
 8001de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_Init+0x40>)
 8001df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <HAL_Init+0x40>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e04:	2003      	movs	r0, #3
 8001e06:	f000 f92b 	bl	8002060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f000 f808 	bl	8001e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e10:	f7ff fd86 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <HAL_InitTick+0x54>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_InitTick+0x58>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 f943 	bl	80020ca <HAL_SYSTICK_Config>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e00e      	b.n	8001e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b0f      	cmp	r3, #15
 8001e52:	d80a      	bhi.n	8001e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e54:	2200      	movs	r2, #0
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5c:	f000 f90b 	bl	8002076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e60:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <HAL_InitTick+0x5c>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
 8001e68:	e000      	b.n	8001e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000000 	.word	0x20000000
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_IncTick+0x20>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4413      	add	r3, r2
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <HAL_IncTick+0x24>)
 8001e92:	6013      	str	r3, [r2, #0]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000008 	.word	0x20000008
 8001ea4:	2000032c 	.word	0x2000032c

08001ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b03      	ldr	r3, [pc, #12]	; (8001ebc <HAL_GetTick+0x14>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	2000032c 	.word	0x2000032c

08001ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001edc:	4013      	ands	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef2:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	60d3      	str	r3, [r2, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <__NVIC_GetPriorityGrouping+0x18>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	f003 0307 	and.w	r3, r3, #7
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db0b      	blt.n	8001f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	f003 021f 	and.w	r2, r3, #31
 8001f3c:	4907      	ldr	r1, [pc, #28]	; (8001f5c <__NVIC_EnableIRQ+0x38>)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	2001      	movs	r0, #1
 8001f46:	fa00 f202 	lsl.w	r2, r0, r2
 8001f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000e100 	.word	0xe000e100

08001f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	6039      	str	r1, [r7, #0]
 8001f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	db0a      	blt.n	8001f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	490c      	ldr	r1, [pc, #48]	; (8001fac <__NVIC_SetPriority+0x4c>)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f88:	e00a      	b.n	8001fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4908      	ldr	r1, [pc, #32]	; (8001fb0 <__NVIC_SetPriority+0x50>)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	3b04      	subs	r3, #4
 8001f98:	0112      	lsls	r2, r2, #4
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	761a      	strb	r2, [r3, #24]
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b089      	sub	sp, #36	; 0x24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f1c3 0307 	rsb	r3, r3, #7
 8001fce:	2b04      	cmp	r3, #4
 8001fd0:	bf28      	it	cs
 8001fd2:	2304      	movcs	r3, #4
 8001fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	2b06      	cmp	r3, #6
 8001fdc:	d902      	bls.n	8001fe4 <NVIC_EncodePriority+0x30>
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3b03      	subs	r3, #3
 8001fe2:	e000      	b.n	8001fe6 <NVIC_EncodePriority+0x32>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa01 f303 	lsl.w	r3, r1, r3
 8002006:	43d9      	mvns	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	4313      	orrs	r3, r2
         );
}
 800200e:	4618      	mov	r0, r3
 8002010:	3724      	adds	r7, #36	; 0x24
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3b01      	subs	r3, #1
 8002028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800202c:	d301      	bcc.n	8002032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202e:	2301      	movs	r3, #1
 8002030:	e00f      	b.n	8002052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <SysTick_Config+0x40>)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800203a:	210f      	movs	r1, #15
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f7ff ff8e 	bl	8001f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <SysTick_Config+0x40>)
 8002046:	2200      	movs	r2, #0
 8002048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800204a:	4b04      	ldr	r3, [pc, #16]	; (800205c <SysTick_Config+0x40>)
 800204c:	2207      	movs	r2, #7
 800204e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	e000e010 	.word	0xe000e010

08002060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ff29 	bl	8001ec0 <__NVIC_SetPriorityGrouping>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
 8002082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002088:	f7ff ff3e 	bl	8001f08 <__NVIC_GetPriorityGrouping>
 800208c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	6978      	ldr	r0, [r7, #20]
 8002094:	f7ff ff8e 	bl	8001fb4 <NVIC_EncodePriority>
 8002098:	4602      	mov	r2, r0
 800209a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff5d 	bl	8001f60 <__NVIC_SetPriority>
}
 80020a6:	bf00      	nop
 80020a8:	3718      	adds	r7, #24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	4603      	mov	r3, r0
 80020b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff31 	bl	8001f24 <__NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ffa2 	bl	800201c <SysTick_Config>
 80020d8:	4603      	mov	r3, r0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e159      	b.n	80023b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8148 	bne.w	80023ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d005      	beq.n	8002136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002132:	2b02      	cmp	r3, #2
 8002134:	d130      	bne.n	8002198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 0201 	and.w	r2, r3, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d017      	beq.n	80021d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d123      	bne.n	8002228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80a2 	beq.w	80023ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b57      	ldr	r3, [pc, #348]	; (80023cc <HAL_GPIO_Init+0x2e8>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a56      	ldr	r2, [pc, #344]	; (80023cc <HAL_GPIO_Init+0x2e8>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b54      	ldr	r3, [pc, #336]	; (80023cc <HAL_GPIO_Init+0x2e8>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002286:	4a52      	ldr	r2, [pc, #328]	; (80023d0 <HAL_GPIO_Init+0x2ec>)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	220f      	movs	r2, #15
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a49      	ldr	r2, [pc, #292]	; (80023d4 <HAL_GPIO_Init+0x2f0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x202>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a48      	ldr	r2, [pc, #288]	; (80023d8 <HAL_GPIO_Init+0x2f4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x1fe>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a47      	ldr	r2, [pc, #284]	; (80023dc <HAL_GPIO_Init+0x2f8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x1fa>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a46      	ldr	r2, [pc, #280]	; (80023e0 <HAL_GPIO_Init+0x2fc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x1f6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a45      	ldr	r2, [pc, #276]	; (80023e4 <HAL_GPIO_Init+0x300>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x1f2>
 80022d2:	2304      	movs	r3, #4
 80022d4:	e008      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022d6:	2307      	movs	r3, #7
 80022d8:	e006      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022da:	2303      	movs	r3, #3
 80022dc:	e004      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022de:	2302      	movs	r3, #2
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_GPIO_Init+0x204>
 80022e6:	2300      	movs	r3, #0
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	f002 0203 	and.w	r2, r2, #3
 80022ee:	0092      	lsls	r2, r2, #2
 80022f0:	4093      	lsls	r3, r2
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022f8:	4935      	ldr	r1, [pc, #212]	; (80023d0 <HAL_GPIO_Init+0x2ec>)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	3302      	adds	r3, #2
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002306:	4b38      	ldr	r3, [pc, #224]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800232a:	4a2f      	ldr	r2, [pc, #188]	; (80023e8 <HAL_GPIO_Init+0x304>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002330:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002354:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800235a:	4b23      	ldr	r3, [pc, #140]	; (80023e8 <HAL_GPIO_Init+0x304>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800237e:	4a1a      	ldr	r2, [pc, #104]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <HAL_GPIO_Init+0x304>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a8:	4a0f      	ldr	r2, [pc, #60]	; (80023e8 <HAL_GPIO_Init+0x304>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3301      	adds	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b0f      	cmp	r3, #15
 80023b8:	f67f aea2 	bls.w	8002100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3724      	adds	r7, #36	; 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40013800 	.word	0x40013800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40020400 	.word	0x40020400
 80023dc:	40020800 	.word	0x40020800
 80023e0:	40020c00 	.word	0x40020c00
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40013c00 	.word	0x40013c00

080023ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d002      	beq.n	800240a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e001      	b.n	800240e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	807b      	strh	r3, [r7, #2]
 8002428:	4613      	mov	r3, r2
 800242a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800242c:	787b      	ldrb	r3, [r7, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002432:	887a      	ldrh	r2, [r7, #2]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002438:	e003      	b.n	8002442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	041a      	lsls	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800245a:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	88fb      	ldrh	r3, [r7, #6]
 8002460:	4013      	ands	r3, r2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d006      	beq.n	8002474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002468:	88fb      	ldrh	r3, [r7, #6]
 800246a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fdc6 	bl	8001000 <HAL_GPIO_EXTI_Callback>
  }
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40013c00 	.word	0x40013c00

08002480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e267      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d075      	beq.n	800258a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800249e:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d00c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b85      	ldr	r3, [pc, #532]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b6:	4b82      	ldr	r3, [pc, #520]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c2:	d10b      	bne.n	80024dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	4b7e      	ldr	r3, [pc, #504]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05b      	beq.n	8002588 <HAL_RCC_OscConfig+0x108>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d157      	bne.n	8002588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e242      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_OscConfig+0x74>
 80024e6:	4b76      	ldr	r3, [pc, #472]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a75      	ldr	r2, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e01d      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x98>
 80024fe:	4b70      	ldr	r3, [pc, #448]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6f      	ldr	r2, [pc, #444]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b6d      	ldr	r3, [pc, #436]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a6c      	ldr	r2, [pc, #432]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0xb0>
 8002518:	4b69      	ldr	r3, [pc, #420]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a68      	ldr	r2, [pc, #416]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800251e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b66      	ldr	r3, [pc, #408]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a65      	ldr	r2, [pc, #404]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800252a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fcb6 	bl	8001ea8 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff fcb2 	bl	8001ea8 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	; 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e207      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b5b      	ldr	r3, [pc, #364]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0xc0>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff fca2 	bl	8001ea8 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff fc9e 	bl	8001ea8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1f3      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	4b51      	ldr	r3, [pc, #324]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0xe8>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d063      	beq.n	800265e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b47      	ldr	r3, [pc, #284]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d11c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ae:	4b44      	ldr	r3, [pc, #272]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d116      	bne.n	80025e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	4b41      	ldr	r3, [pc, #260]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e1c7      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4937      	ldr	r1, [pc, #220]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	e03a      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f0:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <HAL_RCC_OscConfig+0x244>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7ff fc57 	bl	8001ea8 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fe:	f7ff fc53 	bl	8001ea8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1a8      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	4b2b      	ldr	r3, [pc, #172]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4925      	ldr	r1, [pc, #148]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
 8002630:	e015      	b.n	800265e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <HAL_RCC_OscConfig+0x244>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7ff fc36 	bl	8001ea8 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002640:	f7ff fc32 	bl	8001ea8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e187      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d036      	beq.n	80026d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d016      	beq.n	80026a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_RCC_OscConfig+0x248>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7ff fc16 	bl	8001ea8 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002680:	f7ff fc12 	bl	8001ea8 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e167      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_OscConfig+0x240>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x200>
 800269e:	e01b      	b.n	80026d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCC_OscConfig+0x248>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fbff 	bl	8001ea8 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	e00e      	b.n	80026cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ae:	f7ff fbfb 	bl	8001ea8 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d907      	bls.n	80026cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e150      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
 80026c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	4b88      	ldr	r3, [pc, #544]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ea      	bne.n	80026ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8097 	beq.w	8002814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b81      	ldr	r3, [pc, #516]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b7d      	ldr	r3, [pc, #500]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a7c      	ldr	r2, [pc, #496]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b7a      	ldr	r3, [pc, #488]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b77      	ldr	r3, [pc, #476]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002722:	4b74      	ldr	r3, [pc, #464]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a73      	ldr	r2, [pc, #460]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272e:	f7ff fbbb 	bl	8001ea8 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7ff fbb7 	bl	8001ea8 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e10c      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_RCC_OscConfig+0x474>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x2ea>
 800275c:	4b64      	ldr	r3, [pc, #400]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002760:	4a63      	ldr	r2, [pc, #396]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	; 0x70
 8002768:	e01c      	b.n	80027a4 <HAL_RCC_OscConfig+0x324>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x30c>
 8002772:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a5e      	ldr	r2, [pc, #376]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	6713      	str	r3, [r2, #112]	; 0x70
 800277e:	4b5c      	ldr	r3, [pc, #368]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	4a5b      	ldr	r2, [pc, #364]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6713      	str	r3, [r2, #112]	; 0x70
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x324>
 800278c:	4b58      	ldr	r3, [pc, #352]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a57      	ldr	r2, [pc, #348]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
 8002798:	4b55      	ldr	r3, [pc, #340]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4a54      	ldr	r2, [pc, #336]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800279e:	f023 0304 	bic.w	r3, r3, #4
 80027a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7ff fb7c 	bl	8001ea8 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7ff fb78 	bl	8001ea8 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0cb      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ee      	beq.n	80027b4 <HAL_RCC_OscConfig+0x334>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d8:	f7ff fb66 	bl	8001ea8 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7ff fb62 	bl	8001ea8 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0b5      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ee      	bne.n	80027e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	4a38      	ldr	r2, [pc, #224]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002812:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a1 	beq.w	8002960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800281e:	4b34      	ldr	r3, [pc, #208]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b08      	cmp	r3, #8
 8002828:	d05c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d141      	bne.n	80028b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b31      	ldr	r3, [pc, #196]	; (80028f8 <HAL_RCC_OscConfig+0x478>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7ff fb36 	bl	8001ea8 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002840:	f7ff fb32 	bl	8001ea8 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e087      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	491b      	ldr	r1, [pc, #108]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002888:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_RCC_OscConfig+0x478>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7ff fb0b 	bl	8001ea8 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002896:	f7ff fb07 	bl	8001ea8 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e05c      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x416>
 80028b4:	e054      	b.n	8002960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_RCC_OscConfig+0x478>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff faf4 	bl	8001ea8 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c4:	f7ff faf0 	bl	8001ea8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e045      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_RCC_OscConfig+0x470>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x444>
 80028e2:	e03d      	b.n	8002960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e038      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40007000 	.word	0x40007000
 80028f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x4ec>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d028      	beq.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d121      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d11a      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002934:	4293      	cmp	r3, r2
 8002936:	d111      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	3b01      	subs	r3, #1
 8002946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800

08002970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0cc      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002984:	4b68      	ldr	r3, [pc, #416]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d90c      	bls.n	80029ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b65      	ldr	r3, [pc, #404]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b63      	ldr	r3, [pc, #396]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0b8      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c4:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a58      	ldr	r2, [pc, #352]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029dc:	4b53      	ldr	r3, [pc, #332]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a52      	ldr	r2, [pc, #328]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	494d      	ldr	r1, [pc, #308]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d044      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b47      	ldr	r3, [pc, #284]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d119      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2e:	4b3f      	ldr	r3, [pc, #252]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e06f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a3e:	4b3b      	ldr	r3, [pc, #236]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e067      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4e:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 0203 	bic.w	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	4934      	ldr	r1, [pc, #208]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a60:	f7ff fa22 	bl	8001ea8 <HAL_GetTick>
 8002a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	e00a      	b.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a68:	f7ff fa1e 	bl	8001ea8 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e04f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 020c 	and.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d1eb      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d20c      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e032      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4916      	ldr	r1, [pc, #88]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae2:	4b12      	ldr	r3, [pc, #72]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	490e      	ldr	r1, [pc, #56]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002af6:	f000 f821 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	490a      	ldr	r1, [pc, #40]	; (8002b30 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	5ccb      	ldrb	r3, [r1, r3]
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	4a09      	ldr	r2, [pc, #36]	; (8002b34 <HAL_RCC_ClockConfig+0x1c4>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b12:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <HAL_RCC_ClockConfig+0x1c8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff f982 	bl	8001e20 <HAL_InitTick>

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023c00 	.word	0x40023c00
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	08008ef0 	.word	0x08008ef0
 8002b34:	20000000 	.word	0x20000000
 8002b38:	20000004 	.word	0x20000004

08002b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b40:	b094      	sub	sp, #80	; 0x50
 8002b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b54:	4b79      	ldr	r3, [pc, #484]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d00d      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x40>
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	f200 80e1 	bhi.w	8002d28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x34>
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b6e:	e0db      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b70:	4b73      	ldr	r3, [pc, #460]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b74:	e0db      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b76:	4b73      	ldr	r3, [pc, #460]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b7a:	e0d8      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b7c:	4b6f      	ldr	r3, [pc, #444]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b84:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b86:	4b6d      	ldr	r3, [pc, #436]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d063      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b92:	4b6a      	ldr	r3, [pc, #424]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	099b      	lsrs	r3, r3, #6
 8002b98:	2200      	movs	r2, #0
 8002b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8002baa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bae:	4622      	mov	r2, r4
 8002bb0:	462b      	mov	r3, r5
 8002bb2:	f04f 0000 	mov.w	r0, #0
 8002bb6:	f04f 0100 	mov.w	r1, #0
 8002bba:	0159      	lsls	r1, r3, #5
 8002bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc0:	0150      	lsls	r0, r2, #5
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	1a51      	subs	r1, r2, r1
 8002bca:	6139      	str	r1, [r7, #16]
 8002bcc:	4629      	mov	r1, r5
 8002bce:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be0:	4659      	mov	r1, fp
 8002be2:	018b      	lsls	r3, r1, #6
 8002be4:	4651      	mov	r1, sl
 8002be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bea:	4651      	mov	r1, sl
 8002bec:	018a      	lsls	r2, r1, #6
 8002bee:	4651      	mov	r1, sl
 8002bf0:	ebb2 0801 	subs.w	r8, r2, r1
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	eb63 0901 	sbc.w	r9, r3, r1
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c0e:	4690      	mov	r8, r2
 8002c10:	4699      	mov	r9, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	eb18 0303 	adds.w	r3, r8, r3
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	462b      	mov	r3, r5
 8002c1c:	eb49 0303 	adc.w	r3, r9, r3
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c2e:	4629      	mov	r1, r5
 8002c30:	024b      	lsls	r3, r1, #9
 8002c32:	4621      	mov	r1, r4
 8002c34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c38:	4621      	mov	r1, r4
 8002c3a:	024a      	lsls	r2, r1, #9
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c42:	2200      	movs	r2, #0
 8002c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c4c:	f7fe f824 	bl	8000c98 <__aeabi_uldivmod>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4613      	mov	r3, r2
 8002c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c58:	e058      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5a:	4b38      	ldr	r3, [pc, #224]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	2200      	movs	r2, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	4611      	mov	r1, r2
 8002c66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c6a:	623b      	str	r3, [r7, #32]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c74:	4642      	mov	r2, r8
 8002c76:	464b      	mov	r3, r9
 8002c78:	f04f 0000 	mov.w	r0, #0
 8002c7c:	f04f 0100 	mov.w	r1, #0
 8002c80:	0159      	lsls	r1, r3, #5
 8002c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c86:	0150      	lsls	r0, r2, #5
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c92:	4649      	mov	r1, r9
 8002c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cac:	ebb2 040a 	subs.w	r4, r2, sl
 8002cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	00eb      	lsls	r3, r5, #3
 8002cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc2:	00e2      	lsls	r2, r4, #3
 8002cc4:	4614      	mov	r4, r2
 8002cc6:	461d      	mov	r5, r3
 8002cc8:	4643      	mov	r3, r8
 8002cca:	18e3      	adds	r3, r4, r3
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	464b      	mov	r3, r9
 8002cd0:	eb45 0303 	adc.w	r3, r5, r3
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	028b      	lsls	r3, r1, #10
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cec:	4621      	mov	r1, r4
 8002cee:	028a      	lsls	r2, r1, #10
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
 8002cfa:	61fa      	str	r2, [r7, #28]
 8002cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d00:	f7fd ffca 	bl	8000c98 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	3301      	adds	r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002d1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d26:	e002      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3750      	adds	r7, #80	; 0x50
 8002d34:	46bd      	mov	sp, r7
 8002d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	00f42400 	.word	0x00f42400
 8002d44:	007a1200 	.word	0x007a1200

08002d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000000 	.word	0x20000000

08002d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d64:	f7ff fff0 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	0a9b      	lsrs	r3, r3, #10
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	4903      	ldr	r1, [pc, #12]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d76:	5ccb      	ldrb	r3, [r1, r3]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08008f00 	.word	0x08008f00

08002d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d8c:	f7ff ffdc 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0b5b      	lsrs	r3, r3, #13
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4903      	ldr	r1, [pc, #12]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	08008f00 	.word	0x08008f00

08002db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e041      	b.n	8002e46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe fdca 	bl	8001970 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2202      	movs	r2, #2
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3304      	adds	r3, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f000 fb12 	bl	8003418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d001      	beq.n	8002e68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e03c      	b.n	8002ee2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1e      	ldr	r2, [pc, #120]	; (8002ef0 <HAL_TIM_Base_Start+0xa0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d018      	beq.n	8002eac <HAL_TIM_Base_Start+0x5c>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e82:	d013      	beq.n	8002eac <HAL_TIM_Base_Start+0x5c>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <HAL_TIM_Base_Start+0xa4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00e      	beq.n	8002eac <HAL_TIM_Base_Start+0x5c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a19      	ldr	r2, [pc, #100]	; (8002ef8 <HAL_TIM_Base_Start+0xa8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d009      	beq.n	8002eac <HAL_TIM_Base_Start+0x5c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a17      	ldr	r2, [pc, #92]	; (8002efc <HAL_TIM_Base_Start+0xac>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_TIM_Base_Start+0x5c>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <HAL_TIM_Base_Start+0xb0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d111      	bne.n	8002ed0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d010      	beq.n	8002ee0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ece:	e007      	b.n	8002ee0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40010000 	.word	0x40010000
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40000800 	.word	0x40000800
 8002efc:	40000c00 	.word	0x40000c00
 8002f00:	40014000 	.word	0x40014000

08002f04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e041      	b.n	8002f9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fd56 	bl	80019dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	f000 fa68 	bl	8003418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d109      	bne.n	8002fc8 <HAL_TIM_PWM_Start+0x24>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	e022      	b.n	800300e <HAL_TIM_PWM_Start+0x6a>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d109      	bne.n	8002fe2 <HAL_TIM_PWM_Start+0x3e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	bf14      	ite	ne
 8002fda:	2301      	movne	r3, #1
 8002fdc:	2300      	moveq	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	e015      	b.n	800300e <HAL_TIM_PWM_Start+0x6a>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d109      	bne.n	8002ffc <HAL_TIM_PWM_Start+0x58>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	bf14      	ite	ne
 8002ff4:	2301      	movne	r3, #1
 8002ff6:	2300      	moveq	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e008      	b.n	800300e <HAL_TIM_PWM_Start+0x6a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	bf14      	ite	ne
 8003008:	2301      	movne	r3, #1
 800300a:	2300      	moveq	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e068      	b.n	80030e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d104      	bne.n	8003026 <HAL_TIM_PWM_Start+0x82>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003024:	e013      	b.n	800304e <HAL_TIM_PWM_Start+0xaa>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b04      	cmp	r3, #4
 800302a:	d104      	bne.n	8003036 <HAL_TIM_PWM_Start+0x92>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003034:	e00b      	b.n	800304e <HAL_TIM_PWM_Start+0xaa>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d104      	bne.n	8003046 <HAL_TIM_PWM_Start+0xa2>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003044:	e003      	b.n	800304e <HAL_TIM_PWM_Start+0xaa>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2201      	movs	r2, #1
 8003054:	6839      	ldr	r1, [r7, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fc90 	bl	800397c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a23      	ldr	r2, [pc, #140]	; (80030f0 <HAL_TIM_PWM_Start+0x14c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d107      	bne.n	8003076 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_TIM_PWM_Start+0x14c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d018      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x10e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d013      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x10e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a19      	ldr	r2, [pc, #100]	; (80030f4 <HAL_TIM_PWM_Start+0x150>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x10e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <HAL_TIM_PWM_Start+0x154>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x10e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a16      	ldr	r2, [pc, #88]	; (80030fc <HAL_TIM_PWM_Start+0x158>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_TIM_PWM_Start+0x10e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a14      	ldr	r2, [pc, #80]	; (8003100 <HAL_TIM_PWM_Start+0x15c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d111      	bne.n	80030d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b06      	cmp	r3, #6
 80030c2:	d010      	beq.n	80030e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d4:	e007      	b.n	80030e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0201 	orr.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40010000 	.word	0x40010000
 80030f4:	40000400 	.word	0x40000400
 80030f8:	40000800 	.word	0x40000800
 80030fc:	40000c00 	.word	0x40000c00
 8003100:	40014000 	.word	0x40014000

08003104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800311a:	2b01      	cmp	r3, #1
 800311c:	d101      	bne.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800311e:	2302      	movs	r3, #2
 8003120:	e0ae      	b.n	8003280 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b0c      	cmp	r3, #12
 800312e:	f200 809f 	bhi.w	8003270 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003132:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	0800316d 	.word	0x0800316d
 800313c:	08003271 	.word	0x08003271
 8003140:	08003271 	.word	0x08003271
 8003144:	08003271 	.word	0x08003271
 8003148:	080031ad 	.word	0x080031ad
 800314c:	08003271 	.word	0x08003271
 8003150:	08003271 	.word	0x08003271
 8003154:	08003271 	.word	0x08003271
 8003158:	080031ef 	.word	0x080031ef
 800315c:	08003271 	.word	0x08003271
 8003160:	08003271 	.word	0x08003271
 8003164:	08003271 	.word	0x08003271
 8003168:	0800322f 	.word	0x0800322f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f9dc 	bl	8003530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0208 	orr.w	r2, r2, #8
 8003186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0204 	bic.w	r2, r2, #4
 8003196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6999      	ldr	r1, [r3, #24]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	619a      	str	r2, [r3, #24]
      break;
 80031aa:	e064      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fa22 	bl	80035fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	699a      	ldr	r2, [r3, #24]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6999      	ldr	r1, [r3, #24]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	021a      	lsls	r2, r3, #8
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	619a      	str	r2, [r3, #24]
      break;
 80031ec:	e043      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fa6d 	bl	80036d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0208 	orr.w	r2, r2, #8
 8003208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0204 	bic.w	r2, r2, #4
 8003218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69d9      	ldr	r1, [r3, #28]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	61da      	str	r2, [r3, #28]
      break;
 800322c:	e023      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fab7 	bl	80037a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69da      	ldr	r2, [r3, #28]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003248:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69d9      	ldr	r1, [r3, #28]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	021a      	lsls	r2, r3, #8
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	61da      	str	r2, [r3, #28]
      break;
 800326e:	e002      	b.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
      break;
 8003274:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800327e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003292:	2300      	movs	r3, #0
 8003294:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_TIM_ConfigClockSource+0x1c>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e0b4      	b.n	800340e <HAL_TIM_ConfigClockSource+0x186>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032dc:	d03e      	beq.n	800335c <HAL_TIM_ConfigClockSource+0xd4>
 80032de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e2:	f200 8087 	bhi.w	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 80032e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ea:	f000 8086 	beq.w	80033fa <HAL_TIM_ConfigClockSource+0x172>
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f2:	d87f      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 80032f4:	2b70      	cmp	r3, #112	; 0x70
 80032f6:	d01a      	beq.n	800332e <HAL_TIM_ConfigClockSource+0xa6>
 80032f8:	2b70      	cmp	r3, #112	; 0x70
 80032fa:	d87b      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 80032fc:	2b60      	cmp	r3, #96	; 0x60
 80032fe:	d050      	beq.n	80033a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003300:	2b60      	cmp	r3, #96	; 0x60
 8003302:	d877      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003304:	2b50      	cmp	r3, #80	; 0x50
 8003306:	d03c      	beq.n	8003382 <HAL_TIM_ConfigClockSource+0xfa>
 8003308:	2b50      	cmp	r3, #80	; 0x50
 800330a:	d873      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 800330c:	2b40      	cmp	r3, #64	; 0x40
 800330e:	d058      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003310:	2b40      	cmp	r3, #64	; 0x40
 8003312:	d86f      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003314:	2b30      	cmp	r3, #48	; 0x30
 8003316:	d064      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003318:	2b30      	cmp	r3, #48	; 0x30
 800331a:	d86b      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 800331c:	2b20      	cmp	r3, #32
 800331e:	d060      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003320:	2b20      	cmp	r3, #32
 8003322:	d867      	bhi.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d05c      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003328:	2b10      	cmp	r3, #16
 800332a:	d05a      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x15a>
 800332c:	e062      	b.n	80033f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800333e:	f000 fafd 	bl	800393c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003350:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	609a      	str	r2, [r3, #8]
      break;
 800335a:	e04f      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800336c:	f000 fae6 	bl	800393c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800337e:	609a      	str	r2, [r3, #8]
      break;
 8003380:	e03c      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800338e:	461a      	mov	r2, r3
 8003390:	f000 fa5a 	bl	8003848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2150      	movs	r1, #80	; 0x50
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fab3 	bl	8003906 <TIM_ITRx_SetConfig>
      break;
 80033a0:	e02c      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ae:	461a      	mov	r2, r3
 80033b0:	f000 fa79 	bl	80038a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2160      	movs	r1, #96	; 0x60
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 faa3 	bl	8003906 <TIM_ITRx_SetConfig>
      break;
 80033c0:	e01c      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	461a      	mov	r2, r3
 80033d0:	f000 fa3a 	bl	8003848 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2140      	movs	r1, #64	; 0x40
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fa93 	bl	8003906 <TIM_ITRx_SetConfig>
      break;
 80033e0:	e00c      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4619      	mov	r1, r3
 80033ec:	4610      	mov	r0, r2
 80033ee:	f000 fa8a 	bl	8003906 <TIM_ITRx_SetConfig>
      break;
 80033f2:	e003      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]
      break;
 80033f8:	e000      	b.n	80033fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a3a      	ldr	r2, [pc, #232]	; (8003514 <TIM_Base_SetConfig+0xfc>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00f      	beq.n	8003450 <TIM_Base_SetConfig+0x38>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003436:	d00b      	beq.n	8003450 <TIM_Base_SetConfig+0x38>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a37      	ldr	r2, [pc, #220]	; (8003518 <TIM_Base_SetConfig+0x100>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d007      	beq.n	8003450 <TIM_Base_SetConfig+0x38>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a36      	ldr	r2, [pc, #216]	; (800351c <TIM_Base_SetConfig+0x104>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d003      	beq.n	8003450 <TIM_Base_SetConfig+0x38>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a35      	ldr	r2, [pc, #212]	; (8003520 <TIM_Base_SetConfig+0x108>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d108      	bne.n	8003462 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003456:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <TIM_Base_SetConfig+0xfc>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01b      	beq.n	80034a2 <TIM_Base_SetConfig+0x8a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003470:	d017      	beq.n	80034a2 <TIM_Base_SetConfig+0x8a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a28      	ldr	r2, [pc, #160]	; (8003518 <TIM_Base_SetConfig+0x100>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <TIM_Base_SetConfig+0x8a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a27      	ldr	r2, [pc, #156]	; (800351c <TIM_Base_SetConfig+0x104>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00f      	beq.n	80034a2 <TIM_Base_SetConfig+0x8a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a26      	ldr	r2, [pc, #152]	; (8003520 <TIM_Base_SetConfig+0x108>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d00b      	beq.n	80034a2 <TIM_Base_SetConfig+0x8a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a25      	ldr	r2, [pc, #148]	; (8003524 <TIM_Base_SetConfig+0x10c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d007      	beq.n	80034a2 <TIM_Base_SetConfig+0x8a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a24      	ldr	r2, [pc, #144]	; (8003528 <TIM_Base_SetConfig+0x110>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d003      	beq.n	80034a2 <TIM_Base_SetConfig+0x8a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a23      	ldr	r2, [pc, #140]	; (800352c <TIM_Base_SetConfig+0x114>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d108      	bne.n	80034b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a0e      	ldr	r2, [pc, #56]	; (8003514 <TIM_Base_SetConfig+0xfc>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d103      	bne.n	80034e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d105      	bne.n	8003506 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f023 0201 	bic.w	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	611a      	str	r2, [r3, #16]
  }
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40010000 	.word	0x40010000
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40000c00 	.word	0x40000c00
 8003524:	40014000 	.word	0x40014000
 8003528:	40014400 	.word	0x40014400
 800352c:	40014800 	.word	0x40014800

08003530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f023 0201 	bic.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0303 	bic.w	r3, r3, #3
 8003566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 0302 	bic.w	r3, r3, #2
 8003578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a1c      	ldr	r2, [pc, #112]	; (80035f8 <TIM_OC1_SetConfig+0xc8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d10c      	bne.n	80035a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f023 0308 	bic.w	r3, r3, #8
 8003592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 0304 	bic.w	r3, r3, #4
 80035a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a13      	ldr	r2, [pc, #76]	; (80035f8 <TIM_OC1_SetConfig+0xc8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d111      	bne.n	80035d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	621a      	str	r2, [r3, #32]
}
 80035ec:	bf00      	nop
 80035ee:	371c      	adds	r7, #28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	40010000 	.word	0x40010000

080035fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	f023 0210 	bic.w	r2, r3, #16
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f023 0320 	bic.w	r3, r3, #32
 8003646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a1e      	ldr	r2, [pc, #120]	; (80036d0 <TIM_OC2_SetConfig+0xd4>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d10d      	bne.n	8003678 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003676:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a15      	ldr	r2, [pc, #84]	; (80036d0 <TIM_OC2_SetConfig+0xd4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d113      	bne.n	80036a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003686:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800368e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40010000 	.word	0x40010000

080036d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800371c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a1d      	ldr	r2, [pc, #116]	; (80037a4 <TIM_OC3_SetConfig+0xd0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d10d      	bne.n	800374e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800374c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <TIM_OC3_SetConfig+0xd0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d113      	bne.n	800377e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800375c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	621a      	str	r2, [r3, #32]
}
 8003798:	bf00      	nop
 800379a:	371c      	adds	r7, #28
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40010000 	.word	0x40010000

080037a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	031b      	lsls	r3, r3, #12
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a10      	ldr	r2, [pc, #64]	; (8003844 <TIM_OC4_SetConfig+0x9c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d109      	bne.n	800381c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800380e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	019b      	lsls	r3, r3, #6
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	4313      	orrs	r3, r2
 800381a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40010000 	.word	0x40010000

08003848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f023 0201 	bic.w	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f023 030a 	bic.w	r3, r3, #10
 8003884:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	621a      	str	r2, [r3, #32]
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b087      	sub	sp, #28
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	f023 0210 	bic.w	r2, r3, #16
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	031b      	lsls	r3, r3, #12
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr

08003906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003906:	b480      	push	{r7}
 8003908:	b085      	sub	sp, #20
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	f043 0307 	orr.w	r3, r3, #7
 8003928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]
}
 8003930:	bf00      	nop
 8003932:	3714      	adds	r7, #20
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	021a      	lsls	r2, r3, #8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	431a      	orrs	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	609a      	str	r2, [r3, #8]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2201      	movs	r2, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1a      	ldr	r2, [r3, #32]
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	43db      	mvns	r3, r3
 800399e:	401a      	ands	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	fa01 f303 	lsl.w	r3, r1, r3
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039dc:	2302      	movs	r3, #2
 80039de:	e050      	b.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1c      	ldr	r2, [pc, #112]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d018      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2c:	d013      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a13      	ldr	r2, [pc, #76]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10c      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800
 8003a9c:	40000c00 	.word	0x40000c00
 8003aa0:	40014000 	.word	0x40014000

08003aa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e03d      	b.n	8003b3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e042      	b.n	8003be0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fd ffb8 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	; 0x24
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 fa09 	bl	8003fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d175      	bne.n	8003cf4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_UART_Transmit+0x2c>
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e06e      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2221      	movs	r2, #33	; 0x21
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c26:	f7fe f93f 	bl	8001ea8 <HAL_GetTick>
 8003c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	88fa      	ldrh	r2, [r7, #6]
 8003c36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c40:	d108      	bne.n	8003c54 <HAL_UART_Transmit+0x6c>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d104      	bne.n	8003c54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e003      	b.n	8003c5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c5c:	e02e      	b.n	8003cbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2200      	movs	r2, #0
 8003c66:	2180      	movs	r1, #128	; 0x80
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f8df 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e03a      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10b      	bne.n	8003c9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	3302      	adds	r3, #2
 8003c9a:	61bb      	str	r3, [r7, #24]
 8003c9c:	e007      	b.n	8003cae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	3301      	adds	r3, #1
 8003cac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1cb      	bne.n	8003c5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2140      	movs	r1, #64	; 0x40
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f8ab 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e006      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	e000      	b.n	8003cf6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
  }
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b08a      	sub	sp, #40	; 0x28
 8003d02:	af02      	add	r7, sp, #8
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	f040 8081 	bne.w	8003e22 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_UART_Receive+0x2e>
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e079      	b.n	8003e24 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2222      	movs	r2, #34	; 0x22
 8003d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d44:	f7fe f8b0 	bl	8001ea8 <HAL_GetTick>
 8003d48:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	88fa      	ldrh	r2, [r7, #6]
 8003d4e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	d108      	bne.n	8003d72 <HAL_UART_Receive+0x74>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d104      	bne.n	8003d72 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	61bb      	str	r3, [r7, #24]
 8003d70:	e003      	b.n	8003d7a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003d7a:	e047      	b.n	8003e0c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	2120      	movs	r1, #32
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f850 	bl	8003e2c <UART_WaitOnFlagUntilTimeout>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e042      	b.n	8003e24 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10c      	bne.n	8003dbe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	3302      	adds	r3, #2
 8003dba:	61bb      	str	r3, [r7, #24]
 8003dbc:	e01f      	b.n	8003dfe <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d007      	beq.n	8003dd8 <HAL_UART_Receive+0xda>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <HAL_UART_Receive+0xe8>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	e008      	b.n	8003df8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1b2      	bne.n	8003d7c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e000      	b.n	8003e24 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3720      	adds	r7, #32
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e3c:	e03b      	b.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d037      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e46:	f7fe f82f 	bl	8001ea8 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	6a3a      	ldr	r2, [r7, #32]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d302      	bcc.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e03a      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0304 	and.w	r3, r3, #4
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d023      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b80      	cmp	r3, #128	; 0x80
 8003e72:	d020      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	2b40      	cmp	r3, #64	; 0x40
 8003e78:	d01d      	beq.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d116      	bne.n	8003eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f81d 	bl	8003ede <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e00f      	b.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	68ba      	ldr	r2, [r7, #8]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d0b4      	beq.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b095      	sub	sp, #84	; 0x54
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003efc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f06:	643a      	str	r2, [r7, #64]	; 0x40
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e5      	bne.n	8003f1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d119      	bne.n	8003f8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	330c      	adds	r3, #12
 8003f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f023 0310 	bic.w	r3, r3, #16
 8003f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f76:	61ba      	str	r2, [r7, #24]
 8003f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6979      	ldr	r1, [r7, #20]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	613b      	str	r3, [r7, #16]
   return(result);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e5      	bne.n	8003f56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f98:	bf00      	nop
 8003f9a:	3754      	adds	r7, #84	; 0x54
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa8:	b0c0      	sub	sp, #256	; 0x100
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	68d9      	ldr	r1, [r3, #12]
 8003fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	ea40 0301 	orr.w	r3, r0, r1
 8003fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ffc:	f021 010c 	bic.w	r1, r1, #12
 8004000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800400a:	430b      	orrs	r3, r1
 800400c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	6999      	ldr	r1, [r3, #24]
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	ea40 0301 	orr.w	r3, r0, r1
 800402a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b8f      	ldr	r3, [pc, #572]	; (8004270 <UART_SetConfig+0x2cc>)
 8004034:	429a      	cmp	r2, r3
 8004036:	d005      	beq.n	8004044 <UART_SetConfig+0xa0>
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b8d      	ldr	r3, [pc, #564]	; (8004274 <UART_SetConfig+0x2d0>)
 8004040:	429a      	cmp	r2, r3
 8004042:	d104      	bne.n	800404e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004044:	f7fe fea0 	bl	8002d88 <HAL_RCC_GetPCLK2Freq>
 8004048:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800404c:	e003      	b.n	8004056 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800404e:	f7fe fe87 	bl	8002d60 <HAL_RCC_GetPCLK1Freq>
 8004052:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004060:	f040 810c 	bne.w	800427c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004068:	2200      	movs	r2, #0
 800406a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800406e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004072:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004076:	4622      	mov	r2, r4
 8004078:	462b      	mov	r3, r5
 800407a:	1891      	adds	r1, r2, r2
 800407c:	65b9      	str	r1, [r7, #88]	; 0x58
 800407e:	415b      	adcs	r3, r3
 8004080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004082:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004086:	4621      	mov	r1, r4
 8004088:	eb12 0801 	adds.w	r8, r2, r1
 800408c:	4629      	mov	r1, r5
 800408e:	eb43 0901 	adc.w	r9, r3, r1
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800409e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040a6:	4690      	mov	r8, r2
 80040a8:	4699      	mov	r9, r3
 80040aa:	4623      	mov	r3, r4
 80040ac:	eb18 0303 	adds.w	r3, r8, r3
 80040b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80040b4:	462b      	mov	r3, r5
 80040b6:	eb49 0303 	adc.w	r3, r9, r3
 80040ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80040ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040d2:	460b      	mov	r3, r1
 80040d4:	18db      	adds	r3, r3, r3
 80040d6:	653b      	str	r3, [r7, #80]	; 0x50
 80040d8:	4613      	mov	r3, r2
 80040da:	eb42 0303 	adc.w	r3, r2, r3
 80040de:	657b      	str	r3, [r7, #84]	; 0x54
 80040e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040e8:	f7fc fdd6 	bl	8000c98 <__aeabi_uldivmod>
 80040ec:	4602      	mov	r2, r0
 80040ee:	460b      	mov	r3, r1
 80040f0:	4b61      	ldr	r3, [pc, #388]	; (8004278 <UART_SetConfig+0x2d4>)
 80040f2:	fba3 2302 	umull	r2, r3, r3, r2
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	011c      	lsls	r4, r3, #4
 80040fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040fe:	2200      	movs	r2, #0
 8004100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004104:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004108:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800410c:	4642      	mov	r2, r8
 800410e:	464b      	mov	r3, r9
 8004110:	1891      	adds	r1, r2, r2
 8004112:	64b9      	str	r1, [r7, #72]	; 0x48
 8004114:	415b      	adcs	r3, r3
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004118:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800411c:	4641      	mov	r1, r8
 800411e:	eb12 0a01 	adds.w	sl, r2, r1
 8004122:	4649      	mov	r1, r9
 8004124:	eb43 0b01 	adc.w	fp, r3, r1
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004134:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800413c:	4692      	mov	sl, r2
 800413e:	469b      	mov	fp, r3
 8004140:	4643      	mov	r3, r8
 8004142:	eb1a 0303 	adds.w	r3, sl, r3
 8004146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800414a:	464b      	mov	r3, r9
 800414c:	eb4b 0303 	adc.w	r3, fp, r3
 8004150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004160:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004164:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004168:	460b      	mov	r3, r1
 800416a:	18db      	adds	r3, r3, r3
 800416c:	643b      	str	r3, [r7, #64]	; 0x40
 800416e:	4613      	mov	r3, r2
 8004170:	eb42 0303 	adc.w	r3, r2, r3
 8004174:	647b      	str	r3, [r7, #68]	; 0x44
 8004176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800417a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800417e:	f7fc fd8b 	bl	8000c98 <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4611      	mov	r1, r2
 8004188:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <UART_SetConfig+0x2d4>)
 800418a:	fba3 2301 	umull	r2, r3, r3, r1
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	2264      	movs	r2, #100	; 0x64
 8004192:	fb02 f303 	mul.w	r3, r2, r3
 8004196:	1acb      	subs	r3, r1, r3
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800419e:	4b36      	ldr	r3, [pc, #216]	; (8004278 <UART_SetConfig+0x2d4>)
 80041a0:	fba3 2302 	umull	r2, r3, r3, r2
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041ac:	441c      	add	r4, r3
 80041ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041b2:	2200      	movs	r2, #0
 80041b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80041bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	1891      	adds	r1, r2, r2
 80041c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80041c8:	415b      	adcs	r3, r3
 80041ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80041d0:	4641      	mov	r1, r8
 80041d2:	1851      	adds	r1, r2, r1
 80041d4:	6339      	str	r1, [r7, #48]	; 0x30
 80041d6:	4649      	mov	r1, r9
 80041d8:	414b      	adcs	r3, r1
 80041da:	637b      	str	r3, [r7, #52]	; 0x34
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041e8:	4659      	mov	r1, fp
 80041ea:	00cb      	lsls	r3, r1, #3
 80041ec:	4651      	mov	r1, sl
 80041ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041f2:	4651      	mov	r1, sl
 80041f4:	00ca      	lsls	r2, r1, #3
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	4603      	mov	r3, r0
 80041fc:	4642      	mov	r2, r8
 80041fe:	189b      	adds	r3, r3, r2
 8004200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004204:	464b      	mov	r3, r9
 8004206:	460a      	mov	r2, r1
 8004208:	eb42 0303 	adc.w	r3, r2, r3
 800420c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800421c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004220:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004224:	460b      	mov	r3, r1
 8004226:	18db      	adds	r3, r3, r3
 8004228:	62bb      	str	r3, [r7, #40]	; 0x28
 800422a:	4613      	mov	r3, r2
 800422c:	eb42 0303 	adc.w	r3, r2, r3
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004232:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004236:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800423a:	f7fc fd2d 	bl	8000c98 <__aeabi_uldivmod>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <UART_SetConfig+0x2d4>)
 8004244:	fba3 1302 	umull	r1, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	2164      	movs	r1, #100	; 0x64
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	3332      	adds	r3, #50	; 0x32
 8004256:	4a08      	ldr	r2, [pc, #32]	; (8004278 <UART_SetConfig+0x2d4>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	095b      	lsrs	r3, r3, #5
 800425e:	f003 0207 	and.w	r2, r3, #7
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4422      	add	r2, r4
 800426a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800426c:	e106      	b.n	800447c <UART_SetConfig+0x4d8>
 800426e:	bf00      	nop
 8004270:	40011000 	.word	0x40011000
 8004274:	40011400 	.word	0x40011400
 8004278:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800427c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004280:	2200      	movs	r2, #0
 8004282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004286:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800428a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800428e:	4642      	mov	r2, r8
 8004290:	464b      	mov	r3, r9
 8004292:	1891      	adds	r1, r2, r2
 8004294:	6239      	str	r1, [r7, #32]
 8004296:	415b      	adcs	r3, r3
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800429e:	4641      	mov	r1, r8
 80042a0:	1854      	adds	r4, r2, r1
 80042a2:	4649      	mov	r1, r9
 80042a4:	eb43 0501 	adc.w	r5, r3, r1
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	00eb      	lsls	r3, r5, #3
 80042b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042b6:	00e2      	lsls	r2, r4, #3
 80042b8:	4614      	mov	r4, r2
 80042ba:	461d      	mov	r5, r3
 80042bc:	4643      	mov	r3, r8
 80042be:	18e3      	adds	r3, r4, r3
 80042c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042c4:	464b      	mov	r3, r9
 80042c6:	eb45 0303 	adc.w	r3, r5, r3
 80042ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80042ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042de:	f04f 0200 	mov.w	r2, #0
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042ea:	4629      	mov	r1, r5
 80042ec:	008b      	lsls	r3, r1, #2
 80042ee:	4621      	mov	r1, r4
 80042f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f4:	4621      	mov	r1, r4
 80042f6:	008a      	lsls	r2, r1, #2
 80042f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042fc:	f7fc fccc 	bl	8000c98 <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4b60      	ldr	r3, [pc, #384]	; (8004488 <UART_SetConfig+0x4e4>)
 8004306:	fba3 2302 	umull	r2, r3, r3, r2
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	011c      	lsls	r4, r3, #4
 800430e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004312:	2200      	movs	r2, #0
 8004314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004318:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800431c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004320:	4642      	mov	r2, r8
 8004322:	464b      	mov	r3, r9
 8004324:	1891      	adds	r1, r2, r2
 8004326:	61b9      	str	r1, [r7, #24]
 8004328:	415b      	adcs	r3, r3
 800432a:	61fb      	str	r3, [r7, #28]
 800432c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004330:	4641      	mov	r1, r8
 8004332:	1851      	adds	r1, r2, r1
 8004334:	6139      	str	r1, [r7, #16]
 8004336:	4649      	mov	r1, r9
 8004338:	414b      	adcs	r3, r1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004348:	4659      	mov	r1, fp
 800434a:	00cb      	lsls	r3, r1, #3
 800434c:	4651      	mov	r1, sl
 800434e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004352:	4651      	mov	r1, sl
 8004354:	00ca      	lsls	r2, r1, #3
 8004356:	4610      	mov	r0, r2
 8004358:	4619      	mov	r1, r3
 800435a:	4603      	mov	r3, r0
 800435c:	4642      	mov	r2, r8
 800435e:	189b      	adds	r3, r3, r2
 8004360:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004364:	464b      	mov	r3, r9
 8004366:	460a      	mov	r2, r1
 8004368:	eb42 0303 	adc.w	r3, r2, r3
 800436c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	67bb      	str	r3, [r7, #120]	; 0x78
 800437a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004388:	4649      	mov	r1, r9
 800438a:	008b      	lsls	r3, r1, #2
 800438c:	4641      	mov	r1, r8
 800438e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004392:	4641      	mov	r1, r8
 8004394:	008a      	lsls	r2, r1, #2
 8004396:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800439a:	f7fc fc7d 	bl	8000c98 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4611      	mov	r1, r2
 80043a4:	4b38      	ldr	r3, [pc, #224]	; (8004488 <UART_SetConfig+0x4e4>)
 80043a6:	fba3 2301 	umull	r2, r3, r3, r1
 80043aa:	095b      	lsrs	r3, r3, #5
 80043ac:	2264      	movs	r2, #100	; 0x64
 80043ae:	fb02 f303 	mul.w	r3, r2, r3
 80043b2:	1acb      	subs	r3, r1, r3
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	3332      	adds	r3, #50	; 0x32
 80043b8:	4a33      	ldr	r2, [pc, #204]	; (8004488 <UART_SetConfig+0x4e4>)
 80043ba:	fba2 2303 	umull	r2, r3, r2, r3
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c4:	441c      	add	r4, r3
 80043c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043ca:	2200      	movs	r2, #0
 80043cc:	673b      	str	r3, [r7, #112]	; 0x70
 80043ce:	677a      	str	r2, [r7, #116]	; 0x74
 80043d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80043d4:	4642      	mov	r2, r8
 80043d6:	464b      	mov	r3, r9
 80043d8:	1891      	adds	r1, r2, r2
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	415b      	adcs	r3, r3
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043e4:	4641      	mov	r1, r8
 80043e6:	1851      	adds	r1, r2, r1
 80043e8:	6039      	str	r1, [r7, #0]
 80043ea:	4649      	mov	r1, r9
 80043ec:	414b      	adcs	r3, r1
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043fc:	4659      	mov	r1, fp
 80043fe:	00cb      	lsls	r3, r1, #3
 8004400:	4651      	mov	r1, sl
 8004402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004406:	4651      	mov	r1, sl
 8004408:	00ca      	lsls	r2, r1, #3
 800440a:	4610      	mov	r0, r2
 800440c:	4619      	mov	r1, r3
 800440e:	4603      	mov	r3, r0
 8004410:	4642      	mov	r2, r8
 8004412:	189b      	adds	r3, r3, r2
 8004414:	66bb      	str	r3, [r7, #104]	; 0x68
 8004416:	464b      	mov	r3, r9
 8004418:	460a      	mov	r2, r1
 800441a:	eb42 0303 	adc.w	r3, r2, r3
 800441e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	663b      	str	r3, [r7, #96]	; 0x60
 800442a:	667a      	str	r2, [r7, #100]	; 0x64
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004438:	4649      	mov	r1, r9
 800443a:	008b      	lsls	r3, r1, #2
 800443c:	4641      	mov	r1, r8
 800443e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004442:	4641      	mov	r1, r8
 8004444:	008a      	lsls	r2, r1, #2
 8004446:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800444a:	f7fc fc25 	bl	8000c98 <__aeabi_uldivmod>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <UART_SetConfig+0x4e4>)
 8004454:	fba3 1302 	umull	r1, r3, r3, r2
 8004458:	095b      	lsrs	r3, r3, #5
 800445a:	2164      	movs	r1, #100	; 0x64
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	3332      	adds	r3, #50	; 0x32
 8004466:	4a08      	ldr	r2, [pc, #32]	; (8004488 <UART_SetConfig+0x4e4>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	f003 020f 	and.w	r2, r3, #15
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4422      	add	r2, r4
 800447a:	609a      	str	r2, [r3, #8]
}
 800447c:	bf00      	nop
 800447e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004482:	46bd      	mov	sp, r7
 8004484:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004488:	51eb851f 	.word	0x51eb851f

0800448c <__cvt>:
 800448c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004490:	ec55 4b10 	vmov	r4, r5, d0
 8004494:	2d00      	cmp	r5, #0
 8004496:	460e      	mov	r6, r1
 8004498:	4619      	mov	r1, r3
 800449a:	462b      	mov	r3, r5
 800449c:	bfbb      	ittet	lt
 800449e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044a2:	461d      	movlt	r5, r3
 80044a4:	2300      	movge	r3, #0
 80044a6:	232d      	movlt	r3, #45	; 0x2d
 80044a8:	700b      	strb	r3, [r1, #0]
 80044aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044b0:	4691      	mov	r9, r2
 80044b2:	f023 0820 	bic.w	r8, r3, #32
 80044b6:	bfbc      	itt	lt
 80044b8:	4622      	movlt	r2, r4
 80044ba:	4614      	movlt	r4, r2
 80044bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044c0:	d005      	beq.n	80044ce <__cvt+0x42>
 80044c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044c6:	d100      	bne.n	80044ca <__cvt+0x3e>
 80044c8:	3601      	adds	r6, #1
 80044ca:	2102      	movs	r1, #2
 80044cc:	e000      	b.n	80044d0 <__cvt+0x44>
 80044ce:	2103      	movs	r1, #3
 80044d0:	ab03      	add	r3, sp, #12
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	ab02      	add	r3, sp, #8
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	ec45 4b10 	vmov	d0, r4, r5
 80044dc:	4653      	mov	r3, sl
 80044de:	4632      	mov	r2, r6
 80044e0:	f001 fa2e 	bl	8005940 <_dtoa_r>
 80044e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044e8:	4607      	mov	r7, r0
 80044ea:	d102      	bne.n	80044f2 <__cvt+0x66>
 80044ec:	f019 0f01 	tst.w	r9, #1
 80044f0:	d022      	beq.n	8004538 <__cvt+0xac>
 80044f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044f6:	eb07 0906 	add.w	r9, r7, r6
 80044fa:	d110      	bne.n	800451e <__cvt+0x92>
 80044fc:	783b      	ldrb	r3, [r7, #0]
 80044fe:	2b30      	cmp	r3, #48	; 0x30
 8004500:	d10a      	bne.n	8004518 <__cvt+0x8c>
 8004502:	2200      	movs	r2, #0
 8004504:	2300      	movs	r3, #0
 8004506:	4620      	mov	r0, r4
 8004508:	4629      	mov	r1, r5
 800450a:	f7fc fae5 	bl	8000ad8 <__aeabi_dcmpeq>
 800450e:	b918      	cbnz	r0, 8004518 <__cvt+0x8c>
 8004510:	f1c6 0601 	rsb	r6, r6, #1
 8004514:	f8ca 6000 	str.w	r6, [sl]
 8004518:	f8da 3000 	ldr.w	r3, [sl]
 800451c:	4499      	add	r9, r3
 800451e:	2200      	movs	r2, #0
 8004520:	2300      	movs	r3, #0
 8004522:	4620      	mov	r0, r4
 8004524:	4629      	mov	r1, r5
 8004526:	f7fc fad7 	bl	8000ad8 <__aeabi_dcmpeq>
 800452a:	b108      	cbz	r0, 8004530 <__cvt+0xa4>
 800452c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004530:	2230      	movs	r2, #48	; 0x30
 8004532:	9b03      	ldr	r3, [sp, #12]
 8004534:	454b      	cmp	r3, r9
 8004536:	d307      	bcc.n	8004548 <__cvt+0xbc>
 8004538:	9b03      	ldr	r3, [sp, #12]
 800453a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800453c:	1bdb      	subs	r3, r3, r7
 800453e:	4638      	mov	r0, r7
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	b004      	add	sp, #16
 8004544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004548:	1c59      	adds	r1, r3, #1
 800454a:	9103      	str	r1, [sp, #12]
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	e7f0      	b.n	8004532 <__cvt+0xa6>

08004550 <__exponent>:
 8004550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004552:	4603      	mov	r3, r0
 8004554:	2900      	cmp	r1, #0
 8004556:	bfb8      	it	lt
 8004558:	4249      	neglt	r1, r1
 800455a:	f803 2b02 	strb.w	r2, [r3], #2
 800455e:	bfb4      	ite	lt
 8004560:	222d      	movlt	r2, #45	; 0x2d
 8004562:	222b      	movge	r2, #43	; 0x2b
 8004564:	2909      	cmp	r1, #9
 8004566:	7042      	strb	r2, [r0, #1]
 8004568:	dd2a      	ble.n	80045c0 <__exponent+0x70>
 800456a:	f10d 0207 	add.w	r2, sp, #7
 800456e:	4617      	mov	r7, r2
 8004570:	260a      	movs	r6, #10
 8004572:	4694      	mov	ip, r2
 8004574:	fb91 f5f6 	sdiv	r5, r1, r6
 8004578:	fb06 1415 	mls	r4, r6, r5, r1
 800457c:	3430      	adds	r4, #48	; 0x30
 800457e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004582:	460c      	mov	r4, r1
 8004584:	2c63      	cmp	r4, #99	; 0x63
 8004586:	f102 32ff 	add.w	r2, r2, #4294967295
 800458a:	4629      	mov	r1, r5
 800458c:	dcf1      	bgt.n	8004572 <__exponent+0x22>
 800458e:	3130      	adds	r1, #48	; 0x30
 8004590:	f1ac 0402 	sub.w	r4, ip, #2
 8004594:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004598:	1c41      	adds	r1, r0, #1
 800459a:	4622      	mov	r2, r4
 800459c:	42ba      	cmp	r2, r7
 800459e:	d30a      	bcc.n	80045b6 <__exponent+0x66>
 80045a0:	f10d 0209 	add.w	r2, sp, #9
 80045a4:	eba2 020c 	sub.w	r2, r2, ip
 80045a8:	42bc      	cmp	r4, r7
 80045aa:	bf88      	it	hi
 80045ac:	2200      	movhi	r2, #0
 80045ae:	4413      	add	r3, r2
 80045b0:	1a18      	subs	r0, r3, r0
 80045b2:	b003      	add	sp, #12
 80045b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80045ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 80045be:	e7ed      	b.n	800459c <__exponent+0x4c>
 80045c0:	2330      	movs	r3, #48	; 0x30
 80045c2:	3130      	adds	r1, #48	; 0x30
 80045c4:	7083      	strb	r3, [r0, #2]
 80045c6:	70c1      	strb	r1, [r0, #3]
 80045c8:	1d03      	adds	r3, r0, #4
 80045ca:	e7f1      	b.n	80045b0 <__exponent+0x60>

080045cc <_printf_float>:
 80045cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d0:	ed2d 8b02 	vpush	{d8}
 80045d4:	b08d      	sub	sp, #52	; 0x34
 80045d6:	460c      	mov	r4, r1
 80045d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80045dc:	4616      	mov	r6, r2
 80045de:	461f      	mov	r7, r3
 80045e0:	4605      	mov	r5, r0
 80045e2:	f001 f8a7 	bl	8005734 <_localeconv_r>
 80045e6:	f8d0 a000 	ldr.w	sl, [r0]
 80045ea:	4650      	mov	r0, sl
 80045ec:	f7fb fe48 	bl	8000280 <strlen>
 80045f0:	2300      	movs	r3, #0
 80045f2:	930a      	str	r3, [sp, #40]	; 0x28
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	9305      	str	r3, [sp, #20]
 80045f8:	f8d8 3000 	ldr.w	r3, [r8]
 80045fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004600:	3307      	adds	r3, #7
 8004602:	f023 0307 	bic.w	r3, r3, #7
 8004606:	f103 0208 	add.w	r2, r3, #8
 800460a:	f8c8 2000 	str.w	r2, [r8]
 800460e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004612:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004616:	9307      	str	r3, [sp, #28]
 8004618:	f8cd 8018 	str.w	r8, [sp, #24]
 800461c:	ee08 0a10 	vmov	s16, r0
 8004620:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004628:	4b9e      	ldr	r3, [pc, #632]	; (80048a4 <_printf_float+0x2d8>)
 800462a:	f04f 32ff 	mov.w	r2, #4294967295
 800462e:	f7fc fa85 	bl	8000b3c <__aeabi_dcmpun>
 8004632:	bb88      	cbnz	r0, 8004698 <_printf_float+0xcc>
 8004634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004638:	4b9a      	ldr	r3, [pc, #616]	; (80048a4 <_printf_float+0x2d8>)
 800463a:	f04f 32ff 	mov.w	r2, #4294967295
 800463e:	f7fc fa5f 	bl	8000b00 <__aeabi_dcmple>
 8004642:	bb48      	cbnz	r0, 8004698 <_printf_float+0xcc>
 8004644:	2200      	movs	r2, #0
 8004646:	2300      	movs	r3, #0
 8004648:	4640      	mov	r0, r8
 800464a:	4649      	mov	r1, r9
 800464c:	f7fc fa4e 	bl	8000aec <__aeabi_dcmplt>
 8004650:	b110      	cbz	r0, 8004658 <_printf_float+0x8c>
 8004652:	232d      	movs	r3, #45	; 0x2d
 8004654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004658:	4a93      	ldr	r2, [pc, #588]	; (80048a8 <_printf_float+0x2dc>)
 800465a:	4b94      	ldr	r3, [pc, #592]	; (80048ac <_printf_float+0x2e0>)
 800465c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004660:	bf94      	ite	ls
 8004662:	4690      	movls	r8, r2
 8004664:	4698      	movhi	r8, r3
 8004666:	2303      	movs	r3, #3
 8004668:	6123      	str	r3, [r4, #16]
 800466a:	9b05      	ldr	r3, [sp, #20]
 800466c:	f023 0304 	bic.w	r3, r3, #4
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	f04f 0900 	mov.w	r9, #0
 8004676:	9700      	str	r7, [sp, #0]
 8004678:	4633      	mov	r3, r6
 800467a:	aa0b      	add	r2, sp, #44	; 0x2c
 800467c:	4621      	mov	r1, r4
 800467e:	4628      	mov	r0, r5
 8004680:	f000 f9da 	bl	8004a38 <_printf_common>
 8004684:	3001      	adds	r0, #1
 8004686:	f040 8090 	bne.w	80047aa <_printf_float+0x1de>
 800468a:	f04f 30ff 	mov.w	r0, #4294967295
 800468e:	b00d      	add	sp, #52	; 0x34
 8004690:	ecbd 8b02 	vpop	{d8}
 8004694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004698:	4642      	mov	r2, r8
 800469a:	464b      	mov	r3, r9
 800469c:	4640      	mov	r0, r8
 800469e:	4649      	mov	r1, r9
 80046a0:	f7fc fa4c 	bl	8000b3c <__aeabi_dcmpun>
 80046a4:	b140      	cbz	r0, 80046b8 <_printf_float+0xec>
 80046a6:	464b      	mov	r3, r9
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bfbc      	itt	lt
 80046ac:	232d      	movlt	r3, #45	; 0x2d
 80046ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046b2:	4a7f      	ldr	r2, [pc, #508]	; (80048b0 <_printf_float+0x2e4>)
 80046b4:	4b7f      	ldr	r3, [pc, #508]	; (80048b4 <_printf_float+0x2e8>)
 80046b6:	e7d1      	b.n	800465c <_printf_float+0x90>
 80046b8:	6863      	ldr	r3, [r4, #4]
 80046ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046be:	9206      	str	r2, [sp, #24]
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	d13f      	bne.n	8004744 <_printf_float+0x178>
 80046c4:	2306      	movs	r3, #6
 80046c6:	6063      	str	r3, [r4, #4]
 80046c8:	9b05      	ldr	r3, [sp, #20]
 80046ca:	6861      	ldr	r1, [r4, #4]
 80046cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046d0:	2300      	movs	r3, #0
 80046d2:	9303      	str	r3, [sp, #12]
 80046d4:	ab0a      	add	r3, sp, #40	; 0x28
 80046d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80046da:	ab09      	add	r3, sp, #36	; 0x24
 80046dc:	ec49 8b10 	vmov	d0, r8, r9
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	6022      	str	r2, [r4, #0]
 80046e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046e8:	4628      	mov	r0, r5
 80046ea:	f7ff fecf 	bl	800448c <__cvt>
 80046ee:	9b06      	ldr	r3, [sp, #24]
 80046f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046f2:	2b47      	cmp	r3, #71	; 0x47
 80046f4:	4680      	mov	r8, r0
 80046f6:	d108      	bne.n	800470a <_printf_float+0x13e>
 80046f8:	1cc8      	adds	r0, r1, #3
 80046fa:	db02      	blt.n	8004702 <_printf_float+0x136>
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	4299      	cmp	r1, r3
 8004700:	dd41      	ble.n	8004786 <_printf_float+0x1ba>
 8004702:	f1ab 0302 	sub.w	r3, fp, #2
 8004706:	fa5f fb83 	uxtb.w	fp, r3
 800470a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800470e:	d820      	bhi.n	8004752 <_printf_float+0x186>
 8004710:	3901      	subs	r1, #1
 8004712:	465a      	mov	r2, fp
 8004714:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004718:	9109      	str	r1, [sp, #36]	; 0x24
 800471a:	f7ff ff19 	bl	8004550 <__exponent>
 800471e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004720:	1813      	adds	r3, r2, r0
 8004722:	2a01      	cmp	r2, #1
 8004724:	4681      	mov	r9, r0
 8004726:	6123      	str	r3, [r4, #16]
 8004728:	dc02      	bgt.n	8004730 <_printf_float+0x164>
 800472a:	6822      	ldr	r2, [r4, #0]
 800472c:	07d2      	lsls	r2, r2, #31
 800472e:	d501      	bpl.n	8004734 <_printf_float+0x168>
 8004730:	3301      	adds	r3, #1
 8004732:	6123      	str	r3, [r4, #16]
 8004734:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004738:	2b00      	cmp	r3, #0
 800473a:	d09c      	beq.n	8004676 <_printf_float+0xaa>
 800473c:	232d      	movs	r3, #45	; 0x2d
 800473e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004742:	e798      	b.n	8004676 <_printf_float+0xaa>
 8004744:	9a06      	ldr	r2, [sp, #24]
 8004746:	2a47      	cmp	r2, #71	; 0x47
 8004748:	d1be      	bne.n	80046c8 <_printf_float+0xfc>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1bc      	bne.n	80046c8 <_printf_float+0xfc>
 800474e:	2301      	movs	r3, #1
 8004750:	e7b9      	b.n	80046c6 <_printf_float+0xfa>
 8004752:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004756:	d118      	bne.n	800478a <_printf_float+0x1be>
 8004758:	2900      	cmp	r1, #0
 800475a:	6863      	ldr	r3, [r4, #4]
 800475c:	dd0b      	ble.n	8004776 <_printf_float+0x1aa>
 800475e:	6121      	str	r1, [r4, #16]
 8004760:	b913      	cbnz	r3, 8004768 <_printf_float+0x19c>
 8004762:	6822      	ldr	r2, [r4, #0]
 8004764:	07d0      	lsls	r0, r2, #31
 8004766:	d502      	bpl.n	800476e <_printf_float+0x1a2>
 8004768:	3301      	adds	r3, #1
 800476a:	440b      	add	r3, r1
 800476c:	6123      	str	r3, [r4, #16]
 800476e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004770:	f04f 0900 	mov.w	r9, #0
 8004774:	e7de      	b.n	8004734 <_printf_float+0x168>
 8004776:	b913      	cbnz	r3, 800477e <_printf_float+0x1b2>
 8004778:	6822      	ldr	r2, [r4, #0]
 800477a:	07d2      	lsls	r2, r2, #31
 800477c:	d501      	bpl.n	8004782 <_printf_float+0x1b6>
 800477e:	3302      	adds	r3, #2
 8004780:	e7f4      	b.n	800476c <_printf_float+0x1a0>
 8004782:	2301      	movs	r3, #1
 8004784:	e7f2      	b.n	800476c <_printf_float+0x1a0>
 8004786:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800478a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800478c:	4299      	cmp	r1, r3
 800478e:	db05      	blt.n	800479c <_printf_float+0x1d0>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	6121      	str	r1, [r4, #16]
 8004794:	07d8      	lsls	r0, r3, #31
 8004796:	d5ea      	bpl.n	800476e <_printf_float+0x1a2>
 8004798:	1c4b      	adds	r3, r1, #1
 800479a:	e7e7      	b.n	800476c <_printf_float+0x1a0>
 800479c:	2900      	cmp	r1, #0
 800479e:	bfd4      	ite	le
 80047a0:	f1c1 0202 	rsble	r2, r1, #2
 80047a4:	2201      	movgt	r2, #1
 80047a6:	4413      	add	r3, r2
 80047a8:	e7e0      	b.n	800476c <_printf_float+0x1a0>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	055a      	lsls	r2, r3, #21
 80047ae:	d407      	bmi.n	80047c0 <_printf_float+0x1f4>
 80047b0:	6923      	ldr	r3, [r4, #16]
 80047b2:	4642      	mov	r2, r8
 80047b4:	4631      	mov	r1, r6
 80047b6:	4628      	mov	r0, r5
 80047b8:	47b8      	blx	r7
 80047ba:	3001      	adds	r0, #1
 80047bc:	d12c      	bne.n	8004818 <_printf_float+0x24c>
 80047be:	e764      	b.n	800468a <_printf_float+0xbe>
 80047c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047c4:	f240 80e0 	bls.w	8004988 <_printf_float+0x3bc>
 80047c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047cc:	2200      	movs	r2, #0
 80047ce:	2300      	movs	r3, #0
 80047d0:	f7fc f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d034      	beq.n	8004842 <_printf_float+0x276>
 80047d8:	4a37      	ldr	r2, [pc, #220]	; (80048b8 <_printf_float+0x2ec>)
 80047da:	2301      	movs	r3, #1
 80047dc:	4631      	mov	r1, r6
 80047de:	4628      	mov	r0, r5
 80047e0:	47b8      	blx	r7
 80047e2:	3001      	adds	r0, #1
 80047e4:	f43f af51 	beq.w	800468a <_printf_float+0xbe>
 80047e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047ec:	429a      	cmp	r2, r3
 80047ee:	db02      	blt.n	80047f6 <_printf_float+0x22a>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	07d8      	lsls	r0, r3, #31
 80047f4:	d510      	bpl.n	8004818 <_printf_float+0x24c>
 80047f6:	ee18 3a10 	vmov	r3, s16
 80047fa:	4652      	mov	r2, sl
 80047fc:	4631      	mov	r1, r6
 80047fe:	4628      	mov	r0, r5
 8004800:	47b8      	blx	r7
 8004802:	3001      	adds	r0, #1
 8004804:	f43f af41 	beq.w	800468a <_printf_float+0xbe>
 8004808:	f04f 0800 	mov.w	r8, #0
 800480c:	f104 091a 	add.w	r9, r4, #26
 8004810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004812:	3b01      	subs	r3, #1
 8004814:	4543      	cmp	r3, r8
 8004816:	dc09      	bgt.n	800482c <_printf_float+0x260>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	079b      	lsls	r3, r3, #30
 800481c:	f100 8107 	bmi.w	8004a2e <_printf_float+0x462>
 8004820:	68e0      	ldr	r0, [r4, #12]
 8004822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004824:	4298      	cmp	r0, r3
 8004826:	bfb8      	it	lt
 8004828:	4618      	movlt	r0, r3
 800482a:	e730      	b.n	800468e <_printf_float+0xc2>
 800482c:	2301      	movs	r3, #1
 800482e:	464a      	mov	r2, r9
 8004830:	4631      	mov	r1, r6
 8004832:	4628      	mov	r0, r5
 8004834:	47b8      	blx	r7
 8004836:	3001      	adds	r0, #1
 8004838:	f43f af27 	beq.w	800468a <_printf_float+0xbe>
 800483c:	f108 0801 	add.w	r8, r8, #1
 8004840:	e7e6      	b.n	8004810 <_printf_float+0x244>
 8004842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004844:	2b00      	cmp	r3, #0
 8004846:	dc39      	bgt.n	80048bc <_printf_float+0x2f0>
 8004848:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <_printf_float+0x2ec>)
 800484a:	2301      	movs	r3, #1
 800484c:	4631      	mov	r1, r6
 800484e:	4628      	mov	r0, r5
 8004850:	47b8      	blx	r7
 8004852:	3001      	adds	r0, #1
 8004854:	f43f af19 	beq.w	800468a <_printf_float+0xbe>
 8004858:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800485c:	4313      	orrs	r3, r2
 800485e:	d102      	bne.n	8004866 <_printf_float+0x29a>
 8004860:	6823      	ldr	r3, [r4, #0]
 8004862:	07d9      	lsls	r1, r3, #31
 8004864:	d5d8      	bpl.n	8004818 <_printf_float+0x24c>
 8004866:	ee18 3a10 	vmov	r3, s16
 800486a:	4652      	mov	r2, sl
 800486c:	4631      	mov	r1, r6
 800486e:	4628      	mov	r0, r5
 8004870:	47b8      	blx	r7
 8004872:	3001      	adds	r0, #1
 8004874:	f43f af09 	beq.w	800468a <_printf_float+0xbe>
 8004878:	f04f 0900 	mov.w	r9, #0
 800487c:	f104 0a1a 	add.w	sl, r4, #26
 8004880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004882:	425b      	negs	r3, r3
 8004884:	454b      	cmp	r3, r9
 8004886:	dc01      	bgt.n	800488c <_printf_float+0x2c0>
 8004888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800488a:	e792      	b.n	80047b2 <_printf_float+0x1e6>
 800488c:	2301      	movs	r3, #1
 800488e:	4652      	mov	r2, sl
 8004890:	4631      	mov	r1, r6
 8004892:	4628      	mov	r0, r5
 8004894:	47b8      	blx	r7
 8004896:	3001      	adds	r0, #1
 8004898:	f43f aef7 	beq.w	800468a <_printf_float+0xbe>
 800489c:	f109 0901 	add.w	r9, r9, #1
 80048a0:	e7ee      	b.n	8004880 <_printf_float+0x2b4>
 80048a2:	bf00      	nop
 80048a4:	7fefffff 	.word	0x7fefffff
 80048a8:	08008f08 	.word	0x08008f08
 80048ac:	08008f0c 	.word	0x08008f0c
 80048b0:	08008f10 	.word	0x08008f10
 80048b4:	08008f14 	.word	0x08008f14
 80048b8:	08008f18 	.word	0x08008f18
 80048bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048c0:	429a      	cmp	r2, r3
 80048c2:	bfa8      	it	ge
 80048c4:	461a      	movge	r2, r3
 80048c6:	2a00      	cmp	r2, #0
 80048c8:	4691      	mov	r9, r2
 80048ca:	dc37      	bgt.n	800493c <_printf_float+0x370>
 80048cc:	f04f 0b00 	mov.w	fp, #0
 80048d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048d4:	f104 021a 	add.w	r2, r4, #26
 80048d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048da:	9305      	str	r3, [sp, #20]
 80048dc:	eba3 0309 	sub.w	r3, r3, r9
 80048e0:	455b      	cmp	r3, fp
 80048e2:	dc33      	bgt.n	800494c <_printf_float+0x380>
 80048e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048e8:	429a      	cmp	r2, r3
 80048ea:	db3b      	blt.n	8004964 <_printf_float+0x398>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	07da      	lsls	r2, r3, #31
 80048f0:	d438      	bmi.n	8004964 <_printf_float+0x398>
 80048f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80048f6:	eba2 0903 	sub.w	r9, r2, r3
 80048fa:	9b05      	ldr	r3, [sp, #20]
 80048fc:	1ad2      	subs	r2, r2, r3
 80048fe:	4591      	cmp	r9, r2
 8004900:	bfa8      	it	ge
 8004902:	4691      	movge	r9, r2
 8004904:	f1b9 0f00 	cmp.w	r9, #0
 8004908:	dc35      	bgt.n	8004976 <_printf_float+0x3aa>
 800490a:	f04f 0800 	mov.w	r8, #0
 800490e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004912:	f104 0a1a 	add.w	sl, r4, #26
 8004916:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800491a:	1a9b      	subs	r3, r3, r2
 800491c:	eba3 0309 	sub.w	r3, r3, r9
 8004920:	4543      	cmp	r3, r8
 8004922:	f77f af79 	ble.w	8004818 <_printf_float+0x24c>
 8004926:	2301      	movs	r3, #1
 8004928:	4652      	mov	r2, sl
 800492a:	4631      	mov	r1, r6
 800492c:	4628      	mov	r0, r5
 800492e:	47b8      	blx	r7
 8004930:	3001      	adds	r0, #1
 8004932:	f43f aeaa 	beq.w	800468a <_printf_float+0xbe>
 8004936:	f108 0801 	add.w	r8, r8, #1
 800493a:	e7ec      	b.n	8004916 <_printf_float+0x34a>
 800493c:	4613      	mov	r3, r2
 800493e:	4631      	mov	r1, r6
 8004940:	4642      	mov	r2, r8
 8004942:	4628      	mov	r0, r5
 8004944:	47b8      	blx	r7
 8004946:	3001      	adds	r0, #1
 8004948:	d1c0      	bne.n	80048cc <_printf_float+0x300>
 800494a:	e69e      	b.n	800468a <_printf_float+0xbe>
 800494c:	2301      	movs	r3, #1
 800494e:	4631      	mov	r1, r6
 8004950:	4628      	mov	r0, r5
 8004952:	9205      	str	r2, [sp, #20]
 8004954:	47b8      	blx	r7
 8004956:	3001      	adds	r0, #1
 8004958:	f43f ae97 	beq.w	800468a <_printf_float+0xbe>
 800495c:	9a05      	ldr	r2, [sp, #20]
 800495e:	f10b 0b01 	add.w	fp, fp, #1
 8004962:	e7b9      	b.n	80048d8 <_printf_float+0x30c>
 8004964:	ee18 3a10 	vmov	r3, s16
 8004968:	4652      	mov	r2, sl
 800496a:	4631      	mov	r1, r6
 800496c:	4628      	mov	r0, r5
 800496e:	47b8      	blx	r7
 8004970:	3001      	adds	r0, #1
 8004972:	d1be      	bne.n	80048f2 <_printf_float+0x326>
 8004974:	e689      	b.n	800468a <_printf_float+0xbe>
 8004976:	9a05      	ldr	r2, [sp, #20]
 8004978:	464b      	mov	r3, r9
 800497a:	4442      	add	r2, r8
 800497c:	4631      	mov	r1, r6
 800497e:	4628      	mov	r0, r5
 8004980:	47b8      	blx	r7
 8004982:	3001      	adds	r0, #1
 8004984:	d1c1      	bne.n	800490a <_printf_float+0x33e>
 8004986:	e680      	b.n	800468a <_printf_float+0xbe>
 8004988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800498a:	2a01      	cmp	r2, #1
 800498c:	dc01      	bgt.n	8004992 <_printf_float+0x3c6>
 800498e:	07db      	lsls	r3, r3, #31
 8004990:	d53a      	bpl.n	8004a08 <_printf_float+0x43c>
 8004992:	2301      	movs	r3, #1
 8004994:	4642      	mov	r2, r8
 8004996:	4631      	mov	r1, r6
 8004998:	4628      	mov	r0, r5
 800499a:	47b8      	blx	r7
 800499c:	3001      	adds	r0, #1
 800499e:	f43f ae74 	beq.w	800468a <_printf_float+0xbe>
 80049a2:	ee18 3a10 	vmov	r3, s16
 80049a6:	4652      	mov	r2, sl
 80049a8:	4631      	mov	r1, r6
 80049aa:	4628      	mov	r0, r5
 80049ac:	47b8      	blx	r7
 80049ae:	3001      	adds	r0, #1
 80049b0:	f43f ae6b 	beq.w	800468a <_printf_float+0xbe>
 80049b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049b8:	2200      	movs	r2, #0
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80049c0:	f7fc f88a 	bl	8000ad8 <__aeabi_dcmpeq>
 80049c4:	b9d8      	cbnz	r0, 80049fe <_printf_float+0x432>
 80049c6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80049ca:	f108 0201 	add.w	r2, r8, #1
 80049ce:	4631      	mov	r1, r6
 80049d0:	4628      	mov	r0, r5
 80049d2:	47b8      	blx	r7
 80049d4:	3001      	adds	r0, #1
 80049d6:	d10e      	bne.n	80049f6 <_printf_float+0x42a>
 80049d8:	e657      	b.n	800468a <_printf_float+0xbe>
 80049da:	2301      	movs	r3, #1
 80049dc:	4652      	mov	r2, sl
 80049de:	4631      	mov	r1, r6
 80049e0:	4628      	mov	r0, r5
 80049e2:	47b8      	blx	r7
 80049e4:	3001      	adds	r0, #1
 80049e6:	f43f ae50 	beq.w	800468a <_printf_float+0xbe>
 80049ea:	f108 0801 	add.w	r8, r8, #1
 80049ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f0:	3b01      	subs	r3, #1
 80049f2:	4543      	cmp	r3, r8
 80049f4:	dcf1      	bgt.n	80049da <_printf_float+0x40e>
 80049f6:	464b      	mov	r3, r9
 80049f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049fc:	e6da      	b.n	80047b4 <_printf_float+0x1e8>
 80049fe:	f04f 0800 	mov.w	r8, #0
 8004a02:	f104 0a1a 	add.w	sl, r4, #26
 8004a06:	e7f2      	b.n	80049ee <_printf_float+0x422>
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4642      	mov	r2, r8
 8004a0c:	e7df      	b.n	80049ce <_printf_float+0x402>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	464a      	mov	r2, r9
 8004a12:	4631      	mov	r1, r6
 8004a14:	4628      	mov	r0, r5
 8004a16:	47b8      	blx	r7
 8004a18:	3001      	adds	r0, #1
 8004a1a:	f43f ae36 	beq.w	800468a <_printf_float+0xbe>
 8004a1e:	f108 0801 	add.w	r8, r8, #1
 8004a22:	68e3      	ldr	r3, [r4, #12]
 8004a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a26:	1a5b      	subs	r3, r3, r1
 8004a28:	4543      	cmp	r3, r8
 8004a2a:	dcf0      	bgt.n	8004a0e <_printf_float+0x442>
 8004a2c:	e6f8      	b.n	8004820 <_printf_float+0x254>
 8004a2e:	f04f 0800 	mov.w	r8, #0
 8004a32:	f104 0919 	add.w	r9, r4, #25
 8004a36:	e7f4      	b.n	8004a22 <_printf_float+0x456>

08004a38 <_printf_common>:
 8004a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	4699      	mov	r9, r3
 8004a40:	688a      	ldr	r2, [r1, #8]
 8004a42:	690b      	ldr	r3, [r1, #16]
 8004a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	bfb8      	it	lt
 8004a4c:	4613      	movlt	r3, r2
 8004a4e:	6033      	str	r3, [r6, #0]
 8004a50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a54:	4607      	mov	r7, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	b10a      	cbz	r2, 8004a5e <_printf_common+0x26>
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	6033      	str	r3, [r6, #0]
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	0699      	lsls	r1, r3, #26
 8004a62:	bf42      	ittt	mi
 8004a64:	6833      	ldrmi	r3, [r6, #0]
 8004a66:	3302      	addmi	r3, #2
 8004a68:	6033      	strmi	r3, [r6, #0]
 8004a6a:	6825      	ldr	r5, [r4, #0]
 8004a6c:	f015 0506 	ands.w	r5, r5, #6
 8004a70:	d106      	bne.n	8004a80 <_printf_common+0x48>
 8004a72:	f104 0a19 	add.w	sl, r4, #25
 8004a76:	68e3      	ldr	r3, [r4, #12]
 8004a78:	6832      	ldr	r2, [r6, #0]
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	42ab      	cmp	r3, r5
 8004a7e:	dc26      	bgt.n	8004ace <_printf_common+0x96>
 8004a80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a84:	1e13      	subs	r3, r2, #0
 8004a86:	6822      	ldr	r2, [r4, #0]
 8004a88:	bf18      	it	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	0692      	lsls	r2, r2, #26
 8004a8e:	d42b      	bmi.n	8004ae8 <_printf_common+0xb0>
 8004a90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a94:	4649      	mov	r1, r9
 8004a96:	4638      	mov	r0, r7
 8004a98:	47c0      	blx	r8
 8004a9a:	3001      	adds	r0, #1
 8004a9c:	d01e      	beq.n	8004adc <_printf_common+0xa4>
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	6922      	ldr	r2, [r4, #16]
 8004aa2:	f003 0306 	and.w	r3, r3, #6
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	bf02      	ittt	eq
 8004aaa:	68e5      	ldreq	r5, [r4, #12]
 8004aac:	6833      	ldreq	r3, [r6, #0]
 8004aae:	1aed      	subeq	r5, r5, r3
 8004ab0:	68a3      	ldr	r3, [r4, #8]
 8004ab2:	bf0c      	ite	eq
 8004ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ab8:	2500      	movne	r5, #0
 8004aba:	4293      	cmp	r3, r2
 8004abc:	bfc4      	itt	gt
 8004abe:	1a9b      	subgt	r3, r3, r2
 8004ac0:	18ed      	addgt	r5, r5, r3
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	341a      	adds	r4, #26
 8004ac6:	42b5      	cmp	r5, r6
 8004ac8:	d11a      	bne.n	8004b00 <_printf_common+0xc8>
 8004aca:	2000      	movs	r0, #0
 8004acc:	e008      	b.n	8004ae0 <_printf_common+0xa8>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4652      	mov	r2, sl
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	47c0      	blx	r8
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d103      	bne.n	8004ae4 <_printf_common+0xac>
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae4:	3501      	adds	r5, #1
 8004ae6:	e7c6      	b.n	8004a76 <_printf_common+0x3e>
 8004ae8:	18e1      	adds	r1, r4, r3
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	2030      	movs	r0, #48	; 0x30
 8004aee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004af2:	4422      	add	r2, r4
 8004af4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004af8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004afc:	3302      	adds	r3, #2
 8004afe:	e7c7      	b.n	8004a90 <_printf_common+0x58>
 8004b00:	2301      	movs	r3, #1
 8004b02:	4622      	mov	r2, r4
 8004b04:	4649      	mov	r1, r9
 8004b06:	4638      	mov	r0, r7
 8004b08:	47c0      	blx	r8
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	d0e6      	beq.n	8004adc <_printf_common+0xa4>
 8004b0e:	3601      	adds	r6, #1
 8004b10:	e7d9      	b.n	8004ac6 <_printf_common+0x8e>
	...

08004b14 <_printf_i>:
 8004b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b18:	7e0f      	ldrb	r7, [r1, #24]
 8004b1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b1c:	2f78      	cmp	r7, #120	; 0x78
 8004b1e:	4691      	mov	r9, r2
 8004b20:	4680      	mov	r8, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	469a      	mov	sl, r3
 8004b26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b2a:	d807      	bhi.n	8004b3c <_printf_i+0x28>
 8004b2c:	2f62      	cmp	r7, #98	; 0x62
 8004b2e:	d80a      	bhi.n	8004b46 <_printf_i+0x32>
 8004b30:	2f00      	cmp	r7, #0
 8004b32:	f000 80d4 	beq.w	8004cde <_printf_i+0x1ca>
 8004b36:	2f58      	cmp	r7, #88	; 0x58
 8004b38:	f000 80c0 	beq.w	8004cbc <_printf_i+0x1a8>
 8004b3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b44:	e03a      	b.n	8004bbc <_printf_i+0xa8>
 8004b46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b4a:	2b15      	cmp	r3, #21
 8004b4c:	d8f6      	bhi.n	8004b3c <_printf_i+0x28>
 8004b4e:	a101      	add	r1, pc, #4	; (adr r1, 8004b54 <_printf_i+0x40>)
 8004b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b54:	08004bad 	.word	0x08004bad
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004b3d 	.word	0x08004b3d
 8004b60:	08004b3d 	.word	0x08004b3d
 8004b64:	08004b3d 	.word	0x08004b3d
 8004b68:	08004b3d 	.word	0x08004b3d
 8004b6c:	08004bc1 	.word	0x08004bc1
 8004b70:	08004b3d 	.word	0x08004b3d
 8004b74:	08004b3d 	.word	0x08004b3d
 8004b78:	08004b3d 	.word	0x08004b3d
 8004b7c:	08004b3d 	.word	0x08004b3d
 8004b80:	08004cc5 	.word	0x08004cc5
 8004b84:	08004bed 	.word	0x08004bed
 8004b88:	08004c7f 	.word	0x08004c7f
 8004b8c:	08004b3d 	.word	0x08004b3d
 8004b90:	08004b3d 	.word	0x08004b3d
 8004b94:	08004ce7 	.word	0x08004ce7
 8004b98:	08004b3d 	.word	0x08004b3d
 8004b9c:	08004bed 	.word	0x08004bed
 8004ba0:	08004b3d 	.word	0x08004b3d
 8004ba4:	08004b3d 	.word	0x08004b3d
 8004ba8:	08004c87 	.word	0x08004c87
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	1d1a      	adds	r2, r3, #4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	602a      	str	r2, [r5, #0]
 8004bb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e09f      	b.n	8004d00 <_printf_i+0x1ec>
 8004bc0:	6820      	ldr	r0, [r4, #0]
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	0607      	lsls	r7, r0, #24
 8004bc6:	f103 0104 	add.w	r1, r3, #4
 8004bca:	6029      	str	r1, [r5, #0]
 8004bcc:	d501      	bpl.n	8004bd2 <_printf_i+0xbe>
 8004bce:	681e      	ldr	r6, [r3, #0]
 8004bd0:	e003      	b.n	8004bda <_printf_i+0xc6>
 8004bd2:	0646      	lsls	r6, r0, #25
 8004bd4:	d5fb      	bpl.n	8004bce <_printf_i+0xba>
 8004bd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bda:	2e00      	cmp	r6, #0
 8004bdc:	da03      	bge.n	8004be6 <_printf_i+0xd2>
 8004bde:	232d      	movs	r3, #45	; 0x2d
 8004be0:	4276      	negs	r6, r6
 8004be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be6:	485a      	ldr	r0, [pc, #360]	; (8004d50 <_printf_i+0x23c>)
 8004be8:	230a      	movs	r3, #10
 8004bea:	e012      	b.n	8004c12 <_printf_i+0xfe>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	6820      	ldr	r0, [r4, #0]
 8004bf0:	1d19      	adds	r1, r3, #4
 8004bf2:	6029      	str	r1, [r5, #0]
 8004bf4:	0605      	lsls	r5, r0, #24
 8004bf6:	d501      	bpl.n	8004bfc <_printf_i+0xe8>
 8004bf8:	681e      	ldr	r6, [r3, #0]
 8004bfa:	e002      	b.n	8004c02 <_printf_i+0xee>
 8004bfc:	0641      	lsls	r1, r0, #25
 8004bfe:	d5fb      	bpl.n	8004bf8 <_printf_i+0xe4>
 8004c00:	881e      	ldrh	r6, [r3, #0]
 8004c02:	4853      	ldr	r0, [pc, #332]	; (8004d50 <_printf_i+0x23c>)
 8004c04:	2f6f      	cmp	r7, #111	; 0x6f
 8004c06:	bf0c      	ite	eq
 8004c08:	2308      	moveq	r3, #8
 8004c0a:	230a      	movne	r3, #10
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c12:	6865      	ldr	r5, [r4, #4]
 8004c14:	60a5      	str	r5, [r4, #8]
 8004c16:	2d00      	cmp	r5, #0
 8004c18:	bfa2      	ittt	ge
 8004c1a:	6821      	ldrge	r1, [r4, #0]
 8004c1c:	f021 0104 	bicge.w	r1, r1, #4
 8004c20:	6021      	strge	r1, [r4, #0]
 8004c22:	b90e      	cbnz	r6, 8004c28 <_printf_i+0x114>
 8004c24:	2d00      	cmp	r5, #0
 8004c26:	d04b      	beq.n	8004cc0 <_printf_i+0x1ac>
 8004c28:	4615      	mov	r5, r2
 8004c2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c2e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c32:	5dc7      	ldrb	r7, [r0, r7]
 8004c34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c38:	4637      	mov	r7, r6
 8004c3a:	42bb      	cmp	r3, r7
 8004c3c:	460e      	mov	r6, r1
 8004c3e:	d9f4      	bls.n	8004c2a <_printf_i+0x116>
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d10b      	bne.n	8004c5c <_printf_i+0x148>
 8004c44:	6823      	ldr	r3, [r4, #0]
 8004c46:	07de      	lsls	r6, r3, #31
 8004c48:	d508      	bpl.n	8004c5c <_printf_i+0x148>
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	6861      	ldr	r1, [r4, #4]
 8004c4e:	4299      	cmp	r1, r3
 8004c50:	bfde      	ittt	le
 8004c52:	2330      	movle	r3, #48	; 0x30
 8004c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c5c:	1b52      	subs	r2, r2, r5
 8004c5e:	6122      	str	r2, [r4, #16]
 8004c60:	f8cd a000 	str.w	sl, [sp]
 8004c64:	464b      	mov	r3, r9
 8004c66:	aa03      	add	r2, sp, #12
 8004c68:	4621      	mov	r1, r4
 8004c6a:	4640      	mov	r0, r8
 8004c6c:	f7ff fee4 	bl	8004a38 <_printf_common>
 8004c70:	3001      	adds	r0, #1
 8004c72:	d14a      	bne.n	8004d0a <_printf_i+0x1f6>
 8004c74:	f04f 30ff 	mov.w	r0, #4294967295
 8004c78:	b004      	add	sp, #16
 8004c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	f043 0320 	orr.w	r3, r3, #32
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	4833      	ldr	r0, [pc, #204]	; (8004d54 <_printf_i+0x240>)
 8004c88:	2778      	movs	r7, #120	; 0x78
 8004c8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c8e:	6823      	ldr	r3, [r4, #0]
 8004c90:	6829      	ldr	r1, [r5, #0]
 8004c92:	061f      	lsls	r7, r3, #24
 8004c94:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c98:	d402      	bmi.n	8004ca0 <_printf_i+0x18c>
 8004c9a:	065f      	lsls	r7, r3, #25
 8004c9c:	bf48      	it	mi
 8004c9e:	b2b6      	uxthmi	r6, r6
 8004ca0:	07df      	lsls	r7, r3, #31
 8004ca2:	bf48      	it	mi
 8004ca4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ca8:	6029      	str	r1, [r5, #0]
 8004caa:	bf48      	it	mi
 8004cac:	6023      	strmi	r3, [r4, #0]
 8004cae:	b91e      	cbnz	r6, 8004cb8 <_printf_i+0x1a4>
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	f023 0320 	bic.w	r3, r3, #32
 8004cb6:	6023      	str	r3, [r4, #0]
 8004cb8:	2310      	movs	r3, #16
 8004cba:	e7a7      	b.n	8004c0c <_printf_i+0xf8>
 8004cbc:	4824      	ldr	r0, [pc, #144]	; (8004d50 <_printf_i+0x23c>)
 8004cbe:	e7e4      	b.n	8004c8a <_printf_i+0x176>
 8004cc0:	4615      	mov	r5, r2
 8004cc2:	e7bd      	b.n	8004c40 <_printf_i+0x12c>
 8004cc4:	682b      	ldr	r3, [r5, #0]
 8004cc6:	6826      	ldr	r6, [r4, #0]
 8004cc8:	6961      	ldr	r1, [r4, #20]
 8004cca:	1d18      	adds	r0, r3, #4
 8004ccc:	6028      	str	r0, [r5, #0]
 8004cce:	0635      	lsls	r5, r6, #24
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	d501      	bpl.n	8004cd8 <_printf_i+0x1c4>
 8004cd4:	6019      	str	r1, [r3, #0]
 8004cd6:	e002      	b.n	8004cde <_printf_i+0x1ca>
 8004cd8:	0670      	lsls	r0, r6, #25
 8004cda:	d5fb      	bpl.n	8004cd4 <_printf_i+0x1c0>
 8004cdc:	8019      	strh	r1, [r3, #0]
 8004cde:	2300      	movs	r3, #0
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	4615      	mov	r5, r2
 8004ce4:	e7bc      	b.n	8004c60 <_printf_i+0x14c>
 8004ce6:	682b      	ldr	r3, [r5, #0]
 8004ce8:	1d1a      	adds	r2, r3, #4
 8004cea:	602a      	str	r2, [r5, #0]
 8004cec:	681d      	ldr	r5, [r3, #0]
 8004cee:	6862      	ldr	r2, [r4, #4]
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f7fb fa74 	bl	80001e0 <memchr>
 8004cf8:	b108      	cbz	r0, 8004cfe <_printf_i+0x1ea>
 8004cfa:	1b40      	subs	r0, r0, r5
 8004cfc:	6060      	str	r0, [r4, #4]
 8004cfe:	6863      	ldr	r3, [r4, #4]
 8004d00:	6123      	str	r3, [r4, #16]
 8004d02:	2300      	movs	r3, #0
 8004d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d08:	e7aa      	b.n	8004c60 <_printf_i+0x14c>
 8004d0a:	6923      	ldr	r3, [r4, #16]
 8004d0c:	462a      	mov	r2, r5
 8004d0e:	4649      	mov	r1, r9
 8004d10:	4640      	mov	r0, r8
 8004d12:	47d0      	blx	sl
 8004d14:	3001      	adds	r0, #1
 8004d16:	d0ad      	beq.n	8004c74 <_printf_i+0x160>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	079b      	lsls	r3, r3, #30
 8004d1c:	d413      	bmi.n	8004d46 <_printf_i+0x232>
 8004d1e:	68e0      	ldr	r0, [r4, #12]
 8004d20:	9b03      	ldr	r3, [sp, #12]
 8004d22:	4298      	cmp	r0, r3
 8004d24:	bfb8      	it	lt
 8004d26:	4618      	movlt	r0, r3
 8004d28:	e7a6      	b.n	8004c78 <_printf_i+0x164>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4640      	mov	r0, r8
 8004d32:	47d0      	blx	sl
 8004d34:	3001      	adds	r0, #1
 8004d36:	d09d      	beq.n	8004c74 <_printf_i+0x160>
 8004d38:	3501      	adds	r5, #1
 8004d3a:	68e3      	ldr	r3, [r4, #12]
 8004d3c:	9903      	ldr	r1, [sp, #12]
 8004d3e:	1a5b      	subs	r3, r3, r1
 8004d40:	42ab      	cmp	r3, r5
 8004d42:	dcf2      	bgt.n	8004d2a <_printf_i+0x216>
 8004d44:	e7eb      	b.n	8004d1e <_printf_i+0x20a>
 8004d46:	2500      	movs	r5, #0
 8004d48:	f104 0619 	add.w	r6, r4, #25
 8004d4c:	e7f5      	b.n	8004d3a <_printf_i+0x226>
 8004d4e:	bf00      	nop
 8004d50:	08008f1a 	.word	0x08008f1a
 8004d54:	08008f2b 	.word	0x08008f2b

08004d58 <_scanf_float>:
 8004d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d5c:	b087      	sub	sp, #28
 8004d5e:	4617      	mov	r7, r2
 8004d60:	9303      	str	r3, [sp, #12]
 8004d62:	688b      	ldr	r3, [r1, #8]
 8004d64:	1e5a      	subs	r2, r3, #1
 8004d66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004d6a:	bf83      	ittte	hi
 8004d6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004d70:	195b      	addhi	r3, r3, r5
 8004d72:	9302      	strhi	r3, [sp, #8]
 8004d74:	2300      	movls	r3, #0
 8004d76:	bf86      	itte	hi
 8004d78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004d7c:	608b      	strhi	r3, [r1, #8]
 8004d7e:	9302      	strls	r3, [sp, #8]
 8004d80:	680b      	ldr	r3, [r1, #0]
 8004d82:	468b      	mov	fp, r1
 8004d84:	2500      	movs	r5, #0
 8004d86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004d8a:	f84b 3b1c 	str.w	r3, [fp], #28
 8004d8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004d92:	4680      	mov	r8, r0
 8004d94:	460c      	mov	r4, r1
 8004d96:	465e      	mov	r6, fp
 8004d98:	46aa      	mov	sl, r5
 8004d9a:	46a9      	mov	r9, r5
 8004d9c:	9501      	str	r5, [sp, #4]
 8004d9e:	68a2      	ldr	r2, [r4, #8]
 8004da0:	b152      	cbz	r2, 8004db8 <_scanf_float+0x60>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b4e      	cmp	r3, #78	; 0x4e
 8004da8:	d864      	bhi.n	8004e74 <_scanf_float+0x11c>
 8004daa:	2b40      	cmp	r3, #64	; 0x40
 8004dac:	d83c      	bhi.n	8004e28 <_scanf_float+0xd0>
 8004dae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004db2:	b2c8      	uxtb	r0, r1
 8004db4:	280e      	cmp	r0, #14
 8004db6:	d93a      	bls.n	8004e2e <_scanf_float+0xd6>
 8004db8:	f1b9 0f00 	cmp.w	r9, #0
 8004dbc:	d003      	beq.n	8004dc6 <_scanf_float+0x6e>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dca:	f1ba 0f01 	cmp.w	sl, #1
 8004dce:	f200 8113 	bhi.w	8004ff8 <_scanf_float+0x2a0>
 8004dd2:	455e      	cmp	r6, fp
 8004dd4:	f200 8105 	bhi.w	8004fe2 <_scanf_float+0x28a>
 8004dd8:	2501      	movs	r5, #1
 8004dda:	4628      	mov	r0, r5
 8004ddc:	b007      	add	sp, #28
 8004dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004de6:	2a0d      	cmp	r2, #13
 8004de8:	d8e6      	bhi.n	8004db8 <_scanf_float+0x60>
 8004dea:	a101      	add	r1, pc, #4	; (adr r1, 8004df0 <_scanf_float+0x98>)
 8004dec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004df0:	08004f2f 	.word	0x08004f2f
 8004df4:	08004db9 	.word	0x08004db9
 8004df8:	08004db9 	.word	0x08004db9
 8004dfc:	08004db9 	.word	0x08004db9
 8004e00:	08004f8f 	.word	0x08004f8f
 8004e04:	08004f67 	.word	0x08004f67
 8004e08:	08004db9 	.word	0x08004db9
 8004e0c:	08004db9 	.word	0x08004db9
 8004e10:	08004f3d 	.word	0x08004f3d
 8004e14:	08004db9 	.word	0x08004db9
 8004e18:	08004db9 	.word	0x08004db9
 8004e1c:	08004db9 	.word	0x08004db9
 8004e20:	08004db9 	.word	0x08004db9
 8004e24:	08004ef5 	.word	0x08004ef5
 8004e28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004e2c:	e7db      	b.n	8004de6 <_scanf_float+0x8e>
 8004e2e:	290e      	cmp	r1, #14
 8004e30:	d8c2      	bhi.n	8004db8 <_scanf_float+0x60>
 8004e32:	a001      	add	r0, pc, #4	; (adr r0, 8004e38 <_scanf_float+0xe0>)
 8004e34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004e38:	08004ee7 	.word	0x08004ee7
 8004e3c:	08004db9 	.word	0x08004db9
 8004e40:	08004ee7 	.word	0x08004ee7
 8004e44:	08004f7b 	.word	0x08004f7b
 8004e48:	08004db9 	.word	0x08004db9
 8004e4c:	08004e95 	.word	0x08004e95
 8004e50:	08004ed1 	.word	0x08004ed1
 8004e54:	08004ed1 	.word	0x08004ed1
 8004e58:	08004ed1 	.word	0x08004ed1
 8004e5c:	08004ed1 	.word	0x08004ed1
 8004e60:	08004ed1 	.word	0x08004ed1
 8004e64:	08004ed1 	.word	0x08004ed1
 8004e68:	08004ed1 	.word	0x08004ed1
 8004e6c:	08004ed1 	.word	0x08004ed1
 8004e70:	08004ed1 	.word	0x08004ed1
 8004e74:	2b6e      	cmp	r3, #110	; 0x6e
 8004e76:	d809      	bhi.n	8004e8c <_scanf_float+0x134>
 8004e78:	2b60      	cmp	r3, #96	; 0x60
 8004e7a:	d8b2      	bhi.n	8004de2 <_scanf_float+0x8a>
 8004e7c:	2b54      	cmp	r3, #84	; 0x54
 8004e7e:	d077      	beq.n	8004f70 <_scanf_float+0x218>
 8004e80:	2b59      	cmp	r3, #89	; 0x59
 8004e82:	d199      	bne.n	8004db8 <_scanf_float+0x60>
 8004e84:	2d07      	cmp	r5, #7
 8004e86:	d197      	bne.n	8004db8 <_scanf_float+0x60>
 8004e88:	2508      	movs	r5, #8
 8004e8a:	e029      	b.n	8004ee0 <_scanf_float+0x188>
 8004e8c:	2b74      	cmp	r3, #116	; 0x74
 8004e8e:	d06f      	beq.n	8004f70 <_scanf_float+0x218>
 8004e90:	2b79      	cmp	r3, #121	; 0x79
 8004e92:	e7f6      	b.n	8004e82 <_scanf_float+0x12a>
 8004e94:	6821      	ldr	r1, [r4, #0]
 8004e96:	05c8      	lsls	r0, r1, #23
 8004e98:	d51a      	bpl.n	8004ed0 <_scanf_float+0x178>
 8004e9a:	9b02      	ldr	r3, [sp, #8]
 8004e9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004ea0:	6021      	str	r1, [r4, #0]
 8004ea2:	f109 0901 	add.w	r9, r9, #1
 8004ea6:	b11b      	cbz	r3, 8004eb0 <_scanf_float+0x158>
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	3201      	adds	r2, #1
 8004eac:	9302      	str	r3, [sp, #8]
 8004eae:	60a2      	str	r2, [r4, #8]
 8004eb0:	68a3      	ldr	r3, [r4, #8]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	60a3      	str	r3, [r4, #8]
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	6123      	str	r3, [r4, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	607b      	str	r3, [r7, #4]
 8004ec4:	f340 8084 	ble.w	8004fd0 <_scanf_float+0x278>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	e766      	b.n	8004d9e <_scanf_float+0x46>
 8004ed0:	eb1a 0f05 	cmn.w	sl, r5
 8004ed4:	f47f af70 	bne.w	8004db8 <_scanf_float+0x60>
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004ede:	6022      	str	r2, [r4, #0]
 8004ee0:	f806 3b01 	strb.w	r3, [r6], #1
 8004ee4:	e7e4      	b.n	8004eb0 <_scanf_float+0x158>
 8004ee6:	6822      	ldr	r2, [r4, #0]
 8004ee8:	0610      	lsls	r0, r2, #24
 8004eea:	f57f af65 	bpl.w	8004db8 <_scanf_float+0x60>
 8004eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ef2:	e7f4      	b.n	8004ede <_scanf_float+0x186>
 8004ef4:	f1ba 0f00 	cmp.w	sl, #0
 8004ef8:	d10e      	bne.n	8004f18 <_scanf_float+0x1c0>
 8004efa:	f1b9 0f00 	cmp.w	r9, #0
 8004efe:	d10e      	bne.n	8004f1e <_scanf_float+0x1c6>
 8004f00:	6822      	ldr	r2, [r4, #0]
 8004f02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f0a:	d108      	bne.n	8004f1e <_scanf_float+0x1c6>
 8004f0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f10:	6022      	str	r2, [r4, #0]
 8004f12:	f04f 0a01 	mov.w	sl, #1
 8004f16:	e7e3      	b.n	8004ee0 <_scanf_float+0x188>
 8004f18:	f1ba 0f02 	cmp.w	sl, #2
 8004f1c:	d055      	beq.n	8004fca <_scanf_float+0x272>
 8004f1e:	2d01      	cmp	r5, #1
 8004f20:	d002      	beq.n	8004f28 <_scanf_float+0x1d0>
 8004f22:	2d04      	cmp	r5, #4
 8004f24:	f47f af48 	bne.w	8004db8 <_scanf_float+0x60>
 8004f28:	3501      	adds	r5, #1
 8004f2a:	b2ed      	uxtb	r5, r5
 8004f2c:	e7d8      	b.n	8004ee0 <_scanf_float+0x188>
 8004f2e:	f1ba 0f01 	cmp.w	sl, #1
 8004f32:	f47f af41 	bne.w	8004db8 <_scanf_float+0x60>
 8004f36:	f04f 0a02 	mov.w	sl, #2
 8004f3a:	e7d1      	b.n	8004ee0 <_scanf_float+0x188>
 8004f3c:	b97d      	cbnz	r5, 8004f5e <_scanf_float+0x206>
 8004f3e:	f1b9 0f00 	cmp.w	r9, #0
 8004f42:	f47f af3c 	bne.w	8004dbe <_scanf_float+0x66>
 8004f46:	6822      	ldr	r2, [r4, #0]
 8004f48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004f4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004f50:	f47f af39 	bne.w	8004dc6 <_scanf_float+0x6e>
 8004f54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	2501      	movs	r5, #1
 8004f5c:	e7c0      	b.n	8004ee0 <_scanf_float+0x188>
 8004f5e:	2d03      	cmp	r5, #3
 8004f60:	d0e2      	beq.n	8004f28 <_scanf_float+0x1d0>
 8004f62:	2d05      	cmp	r5, #5
 8004f64:	e7de      	b.n	8004f24 <_scanf_float+0x1cc>
 8004f66:	2d02      	cmp	r5, #2
 8004f68:	f47f af26 	bne.w	8004db8 <_scanf_float+0x60>
 8004f6c:	2503      	movs	r5, #3
 8004f6e:	e7b7      	b.n	8004ee0 <_scanf_float+0x188>
 8004f70:	2d06      	cmp	r5, #6
 8004f72:	f47f af21 	bne.w	8004db8 <_scanf_float+0x60>
 8004f76:	2507      	movs	r5, #7
 8004f78:	e7b2      	b.n	8004ee0 <_scanf_float+0x188>
 8004f7a:	6822      	ldr	r2, [r4, #0]
 8004f7c:	0591      	lsls	r1, r2, #22
 8004f7e:	f57f af1b 	bpl.w	8004db8 <_scanf_float+0x60>
 8004f82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004f86:	6022      	str	r2, [r4, #0]
 8004f88:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f8c:	e7a8      	b.n	8004ee0 <_scanf_float+0x188>
 8004f8e:	6822      	ldr	r2, [r4, #0]
 8004f90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004f94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004f98:	d006      	beq.n	8004fa8 <_scanf_float+0x250>
 8004f9a:	0550      	lsls	r0, r2, #21
 8004f9c:	f57f af0c 	bpl.w	8004db8 <_scanf_float+0x60>
 8004fa0:	f1b9 0f00 	cmp.w	r9, #0
 8004fa4:	f43f af0f 	beq.w	8004dc6 <_scanf_float+0x6e>
 8004fa8:	0591      	lsls	r1, r2, #22
 8004faa:	bf58      	it	pl
 8004fac:	9901      	ldrpl	r1, [sp, #4]
 8004fae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004fb2:	bf58      	it	pl
 8004fb4:	eba9 0101 	subpl.w	r1, r9, r1
 8004fb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004fbc:	bf58      	it	pl
 8004fbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004fc2:	6022      	str	r2, [r4, #0]
 8004fc4:	f04f 0900 	mov.w	r9, #0
 8004fc8:	e78a      	b.n	8004ee0 <_scanf_float+0x188>
 8004fca:	f04f 0a03 	mov.w	sl, #3
 8004fce:	e787      	b.n	8004ee0 <_scanf_float+0x188>
 8004fd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004fd4:	4639      	mov	r1, r7
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	4798      	blx	r3
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	f43f aedf 	beq.w	8004d9e <_scanf_float+0x46>
 8004fe0:	e6ea      	b.n	8004db8 <_scanf_float+0x60>
 8004fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fea:	463a      	mov	r2, r7
 8004fec:	4640      	mov	r0, r8
 8004fee:	4798      	blx	r3
 8004ff0:	6923      	ldr	r3, [r4, #16]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	e6ec      	b.n	8004dd2 <_scanf_float+0x7a>
 8004ff8:	1e6b      	subs	r3, r5, #1
 8004ffa:	2b06      	cmp	r3, #6
 8004ffc:	d825      	bhi.n	800504a <_scanf_float+0x2f2>
 8004ffe:	2d02      	cmp	r5, #2
 8005000:	d836      	bhi.n	8005070 <_scanf_float+0x318>
 8005002:	455e      	cmp	r6, fp
 8005004:	f67f aee8 	bls.w	8004dd8 <_scanf_float+0x80>
 8005008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800500c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005010:	463a      	mov	r2, r7
 8005012:	4640      	mov	r0, r8
 8005014:	4798      	blx	r3
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	3b01      	subs	r3, #1
 800501a:	6123      	str	r3, [r4, #16]
 800501c:	e7f1      	b.n	8005002 <_scanf_float+0x2aa>
 800501e:	9802      	ldr	r0, [sp, #8]
 8005020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005024:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005028:	9002      	str	r0, [sp, #8]
 800502a:	463a      	mov	r2, r7
 800502c:	4640      	mov	r0, r8
 800502e:	4798      	blx	r3
 8005030:	6923      	ldr	r3, [r4, #16]
 8005032:	3b01      	subs	r3, #1
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	f10a 3aff 	add.w	sl, sl, #4294967295
 800503a:	fa5f fa8a 	uxtb.w	sl, sl
 800503e:	f1ba 0f02 	cmp.w	sl, #2
 8005042:	d1ec      	bne.n	800501e <_scanf_float+0x2c6>
 8005044:	3d03      	subs	r5, #3
 8005046:	b2ed      	uxtb	r5, r5
 8005048:	1b76      	subs	r6, r6, r5
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	05da      	lsls	r2, r3, #23
 800504e:	d52f      	bpl.n	80050b0 <_scanf_float+0x358>
 8005050:	055b      	lsls	r3, r3, #21
 8005052:	d510      	bpl.n	8005076 <_scanf_float+0x31e>
 8005054:	455e      	cmp	r6, fp
 8005056:	f67f aebf 	bls.w	8004dd8 <_scanf_float+0x80>
 800505a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800505e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005062:	463a      	mov	r2, r7
 8005064:	4640      	mov	r0, r8
 8005066:	4798      	blx	r3
 8005068:	6923      	ldr	r3, [r4, #16]
 800506a:	3b01      	subs	r3, #1
 800506c:	6123      	str	r3, [r4, #16]
 800506e:	e7f1      	b.n	8005054 <_scanf_float+0x2fc>
 8005070:	46aa      	mov	sl, r5
 8005072:	9602      	str	r6, [sp, #8]
 8005074:	e7df      	b.n	8005036 <_scanf_float+0x2de>
 8005076:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800507a:	6923      	ldr	r3, [r4, #16]
 800507c:	2965      	cmp	r1, #101	; 0x65
 800507e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005082:	f106 35ff 	add.w	r5, r6, #4294967295
 8005086:	6123      	str	r3, [r4, #16]
 8005088:	d00c      	beq.n	80050a4 <_scanf_float+0x34c>
 800508a:	2945      	cmp	r1, #69	; 0x45
 800508c:	d00a      	beq.n	80050a4 <_scanf_float+0x34c>
 800508e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005092:	463a      	mov	r2, r7
 8005094:	4640      	mov	r0, r8
 8005096:	4798      	blx	r3
 8005098:	6923      	ldr	r3, [r4, #16]
 800509a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800509e:	3b01      	subs	r3, #1
 80050a0:	1eb5      	subs	r5, r6, #2
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80050a8:	463a      	mov	r2, r7
 80050aa:	4640      	mov	r0, r8
 80050ac:	4798      	blx	r3
 80050ae:	462e      	mov	r6, r5
 80050b0:	6825      	ldr	r5, [r4, #0]
 80050b2:	f015 0510 	ands.w	r5, r5, #16
 80050b6:	d158      	bne.n	800516a <_scanf_float+0x412>
 80050b8:	7035      	strb	r5, [r6, #0]
 80050ba:	6823      	ldr	r3, [r4, #0]
 80050bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80050c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c4:	d11c      	bne.n	8005100 <_scanf_float+0x3a8>
 80050c6:	9b01      	ldr	r3, [sp, #4]
 80050c8:	454b      	cmp	r3, r9
 80050ca:	eba3 0209 	sub.w	r2, r3, r9
 80050ce:	d124      	bne.n	800511a <_scanf_float+0x3c2>
 80050d0:	2200      	movs	r2, #0
 80050d2:	4659      	mov	r1, fp
 80050d4:	4640      	mov	r0, r8
 80050d6:	f002 fddf 	bl	8007c98 <_strtod_r>
 80050da:	9b03      	ldr	r3, [sp, #12]
 80050dc:	6821      	ldr	r1, [r4, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f011 0f02 	tst.w	r1, #2
 80050e4:	ec57 6b10 	vmov	r6, r7, d0
 80050e8:	f103 0204 	add.w	r2, r3, #4
 80050ec:	d020      	beq.n	8005130 <_scanf_float+0x3d8>
 80050ee:	9903      	ldr	r1, [sp, #12]
 80050f0:	600a      	str	r2, [r1, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	e9c3 6700 	strd	r6, r7, [r3]
 80050f8:	68e3      	ldr	r3, [r4, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60e3      	str	r3, [r4, #12]
 80050fe:	e66c      	b.n	8004dda <_scanf_float+0x82>
 8005100:	9b04      	ldr	r3, [sp, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0e4      	beq.n	80050d0 <_scanf_float+0x378>
 8005106:	9905      	ldr	r1, [sp, #20]
 8005108:	230a      	movs	r3, #10
 800510a:	462a      	mov	r2, r5
 800510c:	3101      	adds	r1, #1
 800510e:	4640      	mov	r0, r8
 8005110:	f002 fe4a 	bl	8007da8 <_strtol_r>
 8005114:	9b04      	ldr	r3, [sp, #16]
 8005116:	9e05      	ldr	r6, [sp, #20]
 8005118:	1ac2      	subs	r2, r0, r3
 800511a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800511e:	429e      	cmp	r6, r3
 8005120:	bf28      	it	cs
 8005122:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005126:	4912      	ldr	r1, [pc, #72]	; (8005170 <_scanf_float+0x418>)
 8005128:	4630      	mov	r0, r6
 800512a:	f000 fa03 	bl	8005534 <siprintf>
 800512e:	e7cf      	b.n	80050d0 <_scanf_float+0x378>
 8005130:	f011 0f04 	tst.w	r1, #4
 8005134:	9903      	ldr	r1, [sp, #12]
 8005136:	600a      	str	r2, [r1, #0]
 8005138:	d1db      	bne.n	80050f2 <_scanf_float+0x39a>
 800513a:	f8d3 8000 	ldr.w	r8, [r3]
 800513e:	ee10 2a10 	vmov	r2, s0
 8005142:	ee10 0a10 	vmov	r0, s0
 8005146:	463b      	mov	r3, r7
 8005148:	4639      	mov	r1, r7
 800514a:	f7fb fcf7 	bl	8000b3c <__aeabi_dcmpun>
 800514e:	b128      	cbz	r0, 800515c <_scanf_float+0x404>
 8005150:	4808      	ldr	r0, [pc, #32]	; (8005174 <_scanf_float+0x41c>)
 8005152:	f000 fb67 	bl	8005824 <nanf>
 8005156:	ed88 0a00 	vstr	s0, [r8]
 800515a:	e7cd      	b.n	80050f8 <_scanf_float+0x3a0>
 800515c:	4630      	mov	r0, r6
 800515e:	4639      	mov	r1, r7
 8005160:	f7fb fd4a 	bl	8000bf8 <__aeabi_d2f>
 8005164:	f8c8 0000 	str.w	r0, [r8]
 8005168:	e7c6      	b.n	80050f8 <_scanf_float+0x3a0>
 800516a:	2500      	movs	r5, #0
 800516c:	e635      	b.n	8004dda <_scanf_float+0x82>
 800516e:	bf00      	nop
 8005170:	08008f3c 	.word	0x08008f3c
 8005174:	080092cd 	.word	0x080092cd

08005178 <std>:
 8005178:	2300      	movs	r3, #0
 800517a:	b510      	push	{r4, lr}
 800517c:	4604      	mov	r4, r0
 800517e:	e9c0 3300 	strd	r3, r3, [r0]
 8005182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005186:	6083      	str	r3, [r0, #8]
 8005188:	8181      	strh	r1, [r0, #12]
 800518a:	6643      	str	r3, [r0, #100]	; 0x64
 800518c:	81c2      	strh	r2, [r0, #14]
 800518e:	6183      	str	r3, [r0, #24]
 8005190:	4619      	mov	r1, r3
 8005192:	2208      	movs	r2, #8
 8005194:	305c      	adds	r0, #92	; 0x5c
 8005196:	f000 fac5 	bl	8005724 <memset>
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <std+0x58>)
 800519c:	6263      	str	r3, [r4, #36]	; 0x24
 800519e:	4b0d      	ldr	r3, [pc, #52]	; (80051d4 <std+0x5c>)
 80051a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80051a2:	4b0d      	ldr	r3, [pc, #52]	; (80051d8 <std+0x60>)
 80051a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051a6:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <std+0x64>)
 80051a8:	6323      	str	r3, [r4, #48]	; 0x30
 80051aa:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <std+0x68>)
 80051ac:	6224      	str	r4, [r4, #32]
 80051ae:	429c      	cmp	r4, r3
 80051b0:	d006      	beq.n	80051c0 <std+0x48>
 80051b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80051b6:	4294      	cmp	r4, r2
 80051b8:	d002      	beq.n	80051c0 <std+0x48>
 80051ba:	33d0      	adds	r3, #208	; 0xd0
 80051bc:	429c      	cmp	r4, r3
 80051be:	d105      	bne.n	80051cc <std+0x54>
 80051c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c8:	f000 bb28 	b.w	800581c <__retarget_lock_init_recursive>
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	bf00      	nop
 80051d0:	08005575 	.word	0x08005575
 80051d4:	08005597 	.word	0x08005597
 80051d8:	080055cf 	.word	0x080055cf
 80051dc:	080055f3 	.word	0x080055f3
 80051e0:	20000330 	.word	0x20000330

080051e4 <stdio_exit_handler>:
 80051e4:	4a02      	ldr	r2, [pc, #8]	; (80051f0 <stdio_exit_handler+0xc>)
 80051e6:	4903      	ldr	r1, [pc, #12]	; (80051f4 <stdio_exit_handler+0x10>)
 80051e8:	4803      	ldr	r0, [pc, #12]	; (80051f8 <stdio_exit_handler+0x14>)
 80051ea:	f000 b869 	b.w	80052c0 <_fwalk_sglue>
 80051ee:	bf00      	nop
 80051f0:	2000000c 	.word	0x2000000c
 80051f4:	080083f1 	.word	0x080083f1
 80051f8:	20000018 	.word	0x20000018

080051fc <cleanup_stdio>:
 80051fc:	6841      	ldr	r1, [r0, #4]
 80051fe:	4b0c      	ldr	r3, [pc, #48]	; (8005230 <cleanup_stdio+0x34>)
 8005200:	4299      	cmp	r1, r3
 8005202:	b510      	push	{r4, lr}
 8005204:	4604      	mov	r4, r0
 8005206:	d001      	beq.n	800520c <cleanup_stdio+0x10>
 8005208:	f003 f8f2 	bl	80083f0 <_fflush_r>
 800520c:	68a1      	ldr	r1, [r4, #8]
 800520e:	4b09      	ldr	r3, [pc, #36]	; (8005234 <cleanup_stdio+0x38>)
 8005210:	4299      	cmp	r1, r3
 8005212:	d002      	beq.n	800521a <cleanup_stdio+0x1e>
 8005214:	4620      	mov	r0, r4
 8005216:	f003 f8eb 	bl	80083f0 <_fflush_r>
 800521a:	68e1      	ldr	r1, [r4, #12]
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <cleanup_stdio+0x3c>)
 800521e:	4299      	cmp	r1, r3
 8005220:	d004      	beq.n	800522c <cleanup_stdio+0x30>
 8005222:	4620      	mov	r0, r4
 8005224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005228:	f003 b8e2 	b.w	80083f0 <_fflush_r>
 800522c:	bd10      	pop	{r4, pc}
 800522e:	bf00      	nop
 8005230:	20000330 	.word	0x20000330
 8005234:	20000398 	.word	0x20000398
 8005238:	20000400 	.word	0x20000400

0800523c <global_stdio_init.part.0>:
 800523c:	b510      	push	{r4, lr}
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <global_stdio_init.part.0+0x30>)
 8005240:	4c0b      	ldr	r4, [pc, #44]	; (8005270 <global_stdio_init.part.0+0x34>)
 8005242:	4a0c      	ldr	r2, [pc, #48]	; (8005274 <global_stdio_init.part.0+0x38>)
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	4620      	mov	r0, r4
 8005248:	2200      	movs	r2, #0
 800524a:	2104      	movs	r1, #4
 800524c:	f7ff ff94 	bl	8005178 <std>
 8005250:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005254:	2201      	movs	r2, #1
 8005256:	2109      	movs	r1, #9
 8005258:	f7ff ff8e 	bl	8005178 <std>
 800525c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005260:	2202      	movs	r2, #2
 8005262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005266:	2112      	movs	r1, #18
 8005268:	f7ff bf86 	b.w	8005178 <std>
 800526c:	20000468 	.word	0x20000468
 8005270:	20000330 	.word	0x20000330
 8005274:	080051e5 	.word	0x080051e5

08005278 <__sfp_lock_acquire>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__sfp_lock_acquire+0x8>)
 800527a:	f000 bad0 	b.w	800581e <__retarget_lock_acquire_recursive>
 800527e:	bf00      	nop
 8005280:	20000471 	.word	0x20000471

08005284 <__sfp_lock_release>:
 8005284:	4801      	ldr	r0, [pc, #4]	; (800528c <__sfp_lock_release+0x8>)
 8005286:	f000 bacb 	b.w	8005820 <__retarget_lock_release_recursive>
 800528a:	bf00      	nop
 800528c:	20000471 	.word	0x20000471

08005290 <__sinit>:
 8005290:	b510      	push	{r4, lr}
 8005292:	4604      	mov	r4, r0
 8005294:	f7ff fff0 	bl	8005278 <__sfp_lock_acquire>
 8005298:	6a23      	ldr	r3, [r4, #32]
 800529a:	b11b      	cbz	r3, 80052a4 <__sinit+0x14>
 800529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a0:	f7ff bff0 	b.w	8005284 <__sfp_lock_release>
 80052a4:	4b04      	ldr	r3, [pc, #16]	; (80052b8 <__sinit+0x28>)
 80052a6:	6223      	str	r3, [r4, #32]
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <__sinit+0x2c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f5      	bne.n	800529c <__sinit+0xc>
 80052b0:	f7ff ffc4 	bl	800523c <global_stdio_init.part.0>
 80052b4:	e7f2      	b.n	800529c <__sinit+0xc>
 80052b6:	bf00      	nop
 80052b8:	080051fd 	.word	0x080051fd
 80052bc:	20000468 	.word	0x20000468

080052c0 <_fwalk_sglue>:
 80052c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052c4:	4607      	mov	r7, r0
 80052c6:	4688      	mov	r8, r1
 80052c8:	4614      	mov	r4, r2
 80052ca:	2600      	movs	r6, #0
 80052cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052d0:	f1b9 0901 	subs.w	r9, r9, #1
 80052d4:	d505      	bpl.n	80052e2 <_fwalk_sglue+0x22>
 80052d6:	6824      	ldr	r4, [r4, #0]
 80052d8:	2c00      	cmp	r4, #0
 80052da:	d1f7      	bne.n	80052cc <_fwalk_sglue+0xc>
 80052dc:	4630      	mov	r0, r6
 80052de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052e2:	89ab      	ldrh	r3, [r5, #12]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d907      	bls.n	80052f8 <_fwalk_sglue+0x38>
 80052e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052ec:	3301      	adds	r3, #1
 80052ee:	d003      	beq.n	80052f8 <_fwalk_sglue+0x38>
 80052f0:	4629      	mov	r1, r5
 80052f2:	4638      	mov	r0, r7
 80052f4:	47c0      	blx	r8
 80052f6:	4306      	orrs	r6, r0
 80052f8:	3568      	adds	r5, #104	; 0x68
 80052fa:	e7e9      	b.n	80052d0 <_fwalk_sglue+0x10>

080052fc <iprintf>:
 80052fc:	b40f      	push	{r0, r1, r2, r3}
 80052fe:	b507      	push	{r0, r1, r2, lr}
 8005300:	4906      	ldr	r1, [pc, #24]	; (800531c <iprintf+0x20>)
 8005302:	ab04      	add	r3, sp, #16
 8005304:	6808      	ldr	r0, [r1, #0]
 8005306:	f853 2b04 	ldr.w	r2, [r3], #4
 800530a:	6881      	ldr	r1, [r0, #8]
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	f002 fecf 	bl	80080b0 <_vfiprintf_r>
 8005312:	b003      	add	sp, #12
 8005314:	f85d eb04 	ldr.w	lr, [sp], #4
 8005318:	b004      	add	sp, #16
 800531a:	4770      	bx	lr
 800531c:	20000064 	.word	0x20000064

08005320 <_puts_r>:
 8005320:	6a03      	ldr	r3, [r0, #32]
 8005322:	b570      	push	{r4, r5, r6, lr}
 8005324:	6884      	ldr	r4, [r0, #8]
 8005326:	4605      	mov	r5, r0
 8005328:	460e      	mov	r6, r1
 800532a:	b90b      	cbnz	r3, 8005330 <_puts_r+0x10>
 800532c:	f7ff ffb0 	bl	8005290 <__sinit>
 8005330:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005332:	07db      	lsls	r3, r3, #31
 8005334:	d405      	bmi.n	8005342 <_puts_r+0x22>
 8005336:	89a3      	ldrh	r3, [r4, #12]
 8005338:	0598      	lsls	r0, r3, #22
 800533a:	d402      	bmi.n	8005342 <_puts_r+0x22>
 800533c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800533e:	f000 fa6e 	bl	800581e <__retarget_lock_acquire_recursive>
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	0719      	lsls	r1, r3, #28
 8005346:	d513      	bpl.n	8005370 <_puts_r+0x50>
 8005348:	6923      	ldr	r3, [r4, #16]
 800534a:	b18b      	cbz	r3, 8005370 <_puts_r+0x50>
 800534c:	3e01      	subs	r6, #1
 800534e:	68a3      	ldr	r3, [r4, #8]
 8005350:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005354:	3b01      	subs	r3, #1
 8005356:	60a3      	str	r3, [r4, #8]
 8005358:	b9e9      	cbnz	r1, 8005396 <_puts_r+0x76>
 800535a:	2b00      	cmp	r3, #0
 800535c:	da2e      	bge.n	80053bc <_puts_r+0x9c>
 800535e:	4622      	mov	r2, r4
 8005360:	210a      	movs	r1, #10
 8005362:	4628      	mov	r0, r5
 8005364:	f000 f949 	bl	80055fa <__swbuf_r>
 8005368:	3001      	adds	r0, #1
 800536a:	d007      	beq.n	800537c <_puts_r+0x5c>
 800536c:	250a      	movs	r5, #10
 800536e:	e007      	b.n	8005380 <_puts_r+0x60>
 8005370:	4621      	mov	r1, r4
 8005372:	4628      	mov	r0, r5
 8005374:	f000 f97e 	bl	8005674 <__swsetup_r>
 8005378:	2800      	cmp	r0, #0
 800537a:	d0e7      	beq.n	800534c <_puts_r+0x2c>
 800537c:	f04f 35ff 	mov.w	r5, #4294967295
 8005380:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005382:	07da      	lsls	r2, r3, #31
 8005384:	d405      	bmi.n	8005392 <_puts_r+0x72>
 8005386:	89a3      	ldrh	r3, [r4, #12]
 8005388:	059b      	lsls	r3, r3, #22
 800538a:	d402      	bmi.n	8005392 <_puts_r+0x72>
 800538c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800538e:	f000 fa47 	bl	8005820 <__retarget_lock_release_recursive>
 8005392:	4628      	mov	r0, r5
 8005394:	bd70      	pop	{r4, r5, r6, pc}
 8005396:	2b00      	cmp	r3, #0
 8005398:	da04      	bge.n	80053a4 <_puts_r+0x84>
 800539a:	69a2      	ldr	r2, [r4, #24]
 800539c:	429a      	cmp	r2, r3
 800539e:	dc06      	bgt.n	80053ae <_puts_r+0x8e>
 80053a0:	290a      	cmp	r1, #10
 80053a2:	d004      	beq.n	80053ae <_puts_r+0x8e>
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	6022      	str	r2, [r4, #0]
 80053aa:	7019      	strb	r1, [r3, #0]
 80053ac:	e7cf      	b.n	800534e <_puts_r+0x2e>
 80053ae:	4622      	mov	r2, r4
 80053b0:	4628      	mov	r0, r5
 80053b2:	f000 f922 	bl	80055fa <__swbuf_r>
 80053b6:	3001      	adds	r0, #1
 80053b8:	d1c9      	bne.n	800534e <_puts_r+0x2e>
 80053ba:	e7df      	b.n	800537c <_puts_r+0x5c>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	250a      	movs	r5, #10
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	6022      	str	r2, [r4, #0]
 80053c4:	701d      	strb	r5, [r3, #0]
 80053c6:	e7db      	b.n	8005380 <_puts_r+0x60>

080053c8 <puts>:
 80053c8:	4b02      	ldr	r3, [pc, #8]	; (80053d4 <puts+0xc>)
 80053ca:	4601      	mov	r1, r0
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	f7ff bfa7 	b.w	8005320 <_puts_r>
 80053d2:	bf00      	nop
 80053d4:	20000064 	.word	0x20000064

080053d8 <setvbuf>:
 80053d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80053dc:	461d      	mov	r5, r3
 80053de:	4b54      	ldr	r3, [pc, #336]	; (8005530 <setvbuf+0x158>)
 80053e0:	681f      	ldr	r7, [r3, #0]
 80053e2:	4604      	mov	r4, r0
 80053e4:	460e      	mov	r6, r1
 80053e6:	4690      	mov	r8, r2
 80053e8:	b127      	cbz	r7, 80053f4 <setvbuf+0x1c>
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	b913      	cbnz	r3, 80053f4 <setvbuf+0x1c>
 80053ee:	4638      	mov	r0, r7
 80053f0:	f7ff ff4e 	bl	8005290 <__sinit>
 80053f4:	f1b8 0f02 	cmp.w	r8, #2
 80053f8:	d006      	beq.n	8005408 <setvbuf+0x30>
 80053fa:	f1b8 0f01 	cmp.w	r8, #1
 80053fe:	f200 8094 	bhi.w	800552a <setvbuf+0x152>
 8005402:	2d00      	cmp	r5, #0
 8005404:	f2c0 8091 	blt.w	800552a <setvbuf+0x152>
 8005408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800540a:	07da      	lsls	r2, r3, #31
 800540c:	d405      	bmi.n	800541a <setvbuf+0x42>
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	059b      	lsls	r3, r3, #22
 8005412:	d402      	bmi.n	800541a <setvbuf+0x42>
 8005414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005416:	f000 fa02 	bl	800581e <__retarget_lock_acquire_recursive>
 800541a:	4621      	mov	r1, r4
 800541c:	4638      	mov	r0, r7
 800541e:	f002 ffe7 	bl	80083f0 <_fflush_r>
 8005422:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005424:	b141      	cbz	r1, 8005438 <setvbuf+0x60>
 8005426:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800542a:	4299      	cmp	r1, r3
 800542c:	d002      	beq.n	8005434 <setvbuf+0x5c>
 800542e:	4638      	mov	r0, r7
 8005430:	f001 f878 	bl	8006524 <_free_r>
 8005434:	2300      	movs	r3, #0
 8005436:	6363      	str	r3, [r4, #52]	; 0x34
 8005438:	2300      	movs	r3, #0
 800543a:	61a3      	str	r3, [r4, #24]
 800543c:	6063      	str	r3, [r4, #4]
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	0618      	lsls	r0, r3, #24
 8005442:	d503      	bpl.n	800544c <setvbuf+0x74>
 8005444:	6921      	ldr	r1, [r4, #16]
 8005446:	4638      	mov	r0, r7
 8005448:	f001 f86c 	bl	8006524 <_free_r>
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	f1b8 0f02 	cmp.w	r8, #2
 800545a:	81a3      	strh	r3, [r4, #12]
 800545c:	d05f      	beq.n	800551e <setvbuf+0x146>
 800545e:	ab01      	add	r3, sp, #4
 8005460:	466a      	mov	r2, sp
 8005462:	4621      	mov	r1, r4
 8005464:	4638      	mov	r0, r7
 8005466:	f002 ffeb 	bl	8008440 <__swhatbuf_r>
 800546a:	89a3      	ldrh	r3, [r4, #12]
 800546c:	4318      	orrs	r0, r3
 800546e:	81a0      	strh	r0, [r4, #12]
 8005470:	bb2d      	cbnz	r5, 80054be <setvbuf+0xe6>
 8005472:	9d00      	ldr	r5, [sp, #0]
 8005474:	4628      	mov	r0, r5
 8005476:	f001 f8a1 	bl	80065bc <malloc>
 800547a:	4606      	mov	r6, r0
 800547c:	2800      	cmp	r0, #0
 800547e:	d150      	bne.n	8005522 <setvbuf+0x14a>
 8005480:	f8dd 9000 	ldr.w	r9, [sp]
 8005484:	45a9      	cmp	r9, r5
 8005486:	d13e      	bne.n	8005506 <setvbuf+0x12e>
 8005488:	f04f 35ff 	mov.w	r5, #4294967295
 800548c:	2200      	movs	r2, #0
 800548e:	60a2      	str	r2, [r4, #8]
 8005490:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005494:	6022      	str	r2, [r4, #0]
 8005496:	6122      	str	r2, [r4, #16]
 8005498:	2201      	movs	r2, #1
 800549a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800549e:	6162      	str	r2, [r4, #20]
 80054a0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054a2:	f043 0302 	orr.w	r3, r3, #2
 80054a6:	07d1      	lsls	r1, r2, #31
 80054a8:	81a3      	strh	r3, [r4, #12]
 80054aa:	d404      	bmi.n	80054b6 <setvbuf+0xde>
 80054ac:	059b      	lsls	r3, r3, #22
 80054ae:	d402      	bmi.n	80054b6 <setvbuf+0xde>
 80054b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054b2:	f000 f9b5 	bl	8005820 <__retarget_lock_release_recursive>
 80054b6:	4628      	mov	r0, r5
 80054b8:	b003      	add	sp, #12
 80054ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054be:	2e00      	cmp	r6, #0
 80054c0:	d0d8      	beq.n	8005474 <setvbuf+0x9c>
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	b913      	cbnz	r3, 80054cc <setvbuf+0xf4>
 80054c6:	4638      	mov	r0, r7
 80054c8:	f7ff fee2 	bl	8005290 <__sinit>
 80054cc:	f1b8 0f01 	cmp.w	r8, #1
 80054d0:	bf08      	it	eq
 80054d2:	89a3      	ldrheq	r3, [r4, #12]
 80054d4:	6026      	str	r6, [r4, #0]
 80054d6:	bf04      	itt	eq
 80054d8:	f043 0301 	orreq.w	r3, r3, #1
 80054dc:	81a3      	strheq	r3, [r4, #12]
 80054de:	89a3      	ldrh	r3, [r4, #12]
 80054e0:	f013 0208 	ands.w	r2, r3, #8
 80054e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80054e8:	d01d      	beq.n	8005526 <setvbuf+0x14e>
 80054ea:	07da      	lsls	r2, r3, #31
 80054ec:	bf41      	itttt	mi
 80054ee:	2200      	movmi	r2, #0
 80054f0:	426d      	negmi	r5, r5
 80054f2:	60a2      	strmi	r2, [r4, #8]
 80054f4:	61a5      	strmi	r5, [r4, #24]
 80054f6:	bf58      	it	pl
 80054f8:	60a5      	strpl	r5, [r4, #8]
 80054fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80054fc:	f015 0501 	ands.w	r5, r5, #1
 8005500:	d0d4      	beq.n	80054ac <setvbuf+0xd4>
 8005502:	2500      	movs	r5, #0
 8005504:	e7d7      	b.n	80054b6 <setvbuf+0xde>
 8005506:	4648      	mov	r0, r9
 8005508:	f001 f858 	bl	80065bc <malloc>
 800550c:	4606      	mov	r6, r0
 800550e:	2800      	cmp	r0, #0
 8005510:	d0ba      	beq.n	8005488 <setvbuf+0xb0>
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005518:	81a3      	strh	r3, [r4, #12]
 800551a:	464d      	mov	r5, r9
 800551c:	e7d1      	b.n	80054c2 <setvbuf+0xea>
 800551e:	2500      	movs	r5, #0
 8005520:	e7b4      	b.n	800548c <setvbuf+0xb4>
 8005522:	46a9      	mov	r9, r5
 8005524:	e7f5      	b.n	8005512 <setvbuf+0x13a>
 8005526:	60a2      	str	r2, [r4, #8]
 8005528:	e7e7      	b.n	80054fa <setvbuf+0x122>
 800552a:	f04f 35ff 	mov.w	r5, #4294967295
 800552e:	e7c2      	b.n	80054b6 <setvbuf+0xde>
 8005530:	20000064 	.word	0x20000064

08005534 <siprintf>:
 8005534:	b40e      	push	{r1, r2, r3}
 8005536:	b500      	push	{lr}
 8005538:	b09c      	sub	sp, #112	; 0x70
 800553a:	ab1d      	add	r3, sp, #116	; 0x74
 800553c:	9002      	str	r0, [sp, #8]
 800553e:	9006      	str	r0, [sp, #24]
 8005540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005544:	4809      	ldr	r0, [pc, #36]	; (800556c <siprintf+0x38>)
 8005546:	9107      	str	r1, [sp, #28]
 8005548:	9104      	str	r1, [sp, #16]
 800554a:	4909      	ldr	r1, [pc, #36]	; (8005570 <siprintf+0x3c>)
 800554c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005550:	9105      	str	r1, [sp, #20]
 8005552:	6800      	ldr	r0, [r0, #0]
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	a902      	add	r1, sp, #8
 8005558:	f002 fc82 	bl	8007e60 <_svfiprintf_r>
 800555c:	9b02      	ldr	r3, [sp, #8]
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	b01c      	add	sp, #112	; 0x70
 8005564:	f85d eb04 	ldr.w	lr, [sp], #4
 8005568:	b003      	add	sp, #12
 800556a:	4770      	bx	lr
 800556c:	20000064 	.word	0x20000064
 8005570:	ffff0208 	.word	0xffff0208

08005574 <__sread>:
 8005574:	b510      	push	{r4, lr}
 8005576:	460c      	mov	r4, r1
 8005578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800557c:	f000 f900 	bl	8005780 <_read_r>
 8005580:	2800      	cmp	r0, #0
 8005582:	bfab      	itete	ge
 8005584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005586:	89a3      	ldrhlt	r3, [r4, #12]
 8005588:	181b      	addge	r3, r3, r0
 800558a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800558e:	bfac      	ite	ge
 8005590:	6563      	strge	r3, [r4, #84]	; 0x54
 8005592:	81a3      	strhlt	r3, [r4, #12]
 8005594:	bd10      	pop	{r4, pc}

08005596 <__swrite>:
 8005596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800559a:	461f      	mov	r7, r3
 800559c:	898b      	ldrh	r3, [r1, #12]
 800559e:	05db      	lsls	r3, r3, #23
 80055a0:	4605      	mov	r5, r0
 80055a2:	460c      	mov	r4, r1
 80055a4:	4616      	mov	r6, r2
 80055a6:	d505      	bpl.n	80055b4 <__swrite+0x1e>
 80055a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ac:	2302      	movs	r3, #2
 80055ae:	2200      	movs	r2, #0
 80055b0:	f000 f8d4 	bl	800575c <_lseek_r>
 80055b4:	89a3      	ldrh	r3, [r4, #12]
 80055b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055be:	81a3      	strh	r3, [r4, #12]
 80055c0:	4632      	mov	r2, r6
 80055c2:	463b      	mov	r3, r7
 80055c4:	4628      	mov	r0, r5
 80055c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ca:	f000 b8eb 	b.w	80057a4 <_write_r>

080055ce <__sseek>:
 80055ce:	b510      	push	{r4, lr}
 80055d0:	460c      	mov	r4, r1
 80055d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d6:	f000 f8c1 	bl	800575c <_lseek_r>
 80055da:	1c43      	adds	r3, r0, #1
 80055dc:	89a3      	ldrh	r3, [r4, #12]
 80055de:	bf15      	itete	ne
 80055e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80055e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055ea:	81a3      	strheq	r3, [r4, #12]
 80055ec:	bf18      	it	ne
 80055ee:	81a3      	strhne	r3, [r4, #12]
 80055f0:	bd10      	pop	{r4, pc}

080055f2 <__sclose>:
 80055f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f6:	f000 b8a1 	b.w	800573c <_close_r>

080055fa <__swbuf_r>:
 80055fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fc:	460e      	mov	r6, r1
 80055fe:	4614      	mov	r4, r2
 8005600:	4605      	mov	r5, r0
 8005602:	b118      	cbz	r0, 800560c <__swbuf_r+0x12>
 8005604:	6a03      	ldr	r3, [r0, #32]
 8005606:	b90b      	cbnz	r3, 800560c <__swbuf_r+0x12>
 8005608:	f7ff fe42 	bl	8005290 <__sinit>
 800560c:	69a3      	ldr	r3, [r4, #24]
 800560e:	60a3      	str	r3, [r4, #8]
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	071a      	lsls	r2, r3, #28
 8005614:	d525      	bpl.n	8005662 <__swbuf_r+0x68>
 8005616:	6923      	ldr	r3, [r4, #16]
 8005618:	b31b      	cbz	r3, 8005662 <__swbuf_r+0x68>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	6922      	ldr	r2, [r4, #16]
 800561e:	1a98      	subs	r0, r3, r2
 8005620:	6963      	ldr	r3, [r4, #20]
 8005622:	b2f6      	uxtb	r6, r6
 8005624:	4283      	cmp	r3, r0
 8005626:	4637      	mov	r7, r6
 8005628:	dc04      	bgt.n	8005634 <__swbuf_r+0x3a>
 800562a:	4621      	mov	r1, r4
 800562c:	4628      	mov	r0, r5
 800562e:	f002 fedf 	bl	80083f0 <_fflush_r>
 8005632:	b9e0      	cbnz	r0, 800566e <__swbuf_r+0x74>
 8005634:	68a3      	ldr	r3, [r4, #8]
 8005636:	3b01      	subs	r3, #1
 8005638:	60a3      	str	r3, [r4, #8]
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	1c5a      	adds	r2, r3, #1
 800563e:	6022      	str	r2, [r4, #0]
 8005640:	701e      	strb	r6, [r3, #0]
 8005642:	6962      	ldr	r2, [r4, #20]
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	429a      	cmp	r2, r3
 8005648:	d004      	beq.n	8005654 <__swbuf_r+0x5a>
 800564a:	89a3      	ldrh	r3, [r4, #12]
 800564c:	07db      	lsls	r3, r3, #31
 800564e:	d506      	bpl.n	800565e <__swbuf_r+0x64>
 8005650:	2e0a      	cmp	r6, #10
 8005652:	d104      	bne.n	800565e <__swbuf_r+0x64>
 8005654:	4621      	mov	r1, r4
 8005656:	4628      	mov	r0, r5
 8005658:	f002 feca 	bl	80083f0 <_fflush_r>
 800565c:	b938      	cbnz	r0, 800566e <__swbuf_r+0x74>
 800565e:	4638      	mov	r0, r7
 8005660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005662:	4621      	mov	r1, r4
 8005664:	4628      	mov	r0, r5
 8005666:	f000 f805 	bl	8005674 <__swsetup_r>
 800566a:	2800      	cmp	r0, #0
 800566c:	d0d5      	beq.n	800561a <__swbuf_r+0x20>
 800566e:	f04f 37ff 	mov.w	r7, #4294967295
 8005672:	e7f4      	b.n	800565e <__swbuf_r+0x64>

08005674 <__swsetup_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <__swsetup_r+0xac>)
 8005678:	4605      	mov	r5, r0
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	460c      	mov	r4, r1
 800567e:	b118      	cbz	r0, 8005688 <__swsetup_r+0x14>
 8005680:	6a03      	ldr	r3, [r0, #32]
 8005682:	b90b      	cbnz	r3, 8005688 <__swsetup_r+0x14>
 8005684:	f7ff fe04 	bl	8005290 <__sinit>
 8005688:	89a3      	ldrh	r3, [r4, #12]
 800568a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800568e:	0718      	lsls	r0, r3, #28
 8005690:	d422      	bmi.n	80056d8 <__swsetup_r+0x64>
 8005692:	06d9      	lsls	r1, r3, #27
 8005694:	d407      	bmi.n	80056a6 <__swsetup_r+0x32>
 8005696:	2309      	movs	r3, #9
 8005698:	602b      	str	r3, [r5, #0]
 800569a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800569e:	81a3      	strh	r3, [r4, #12]
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295
 80056a4:	e034      	b.n	8005710 <__swsetup_r+0x9c>
 80056a6:	0758      	lsls	r0, r3, #29
 80056a8:	d512      	bpl.n	80056d0 <__swsetup_r+0x5c>
 80056aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ac:	b141      	cbz	r1, 80056c0 <__swsetup_r+0x4c>
 80056ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056b2:	4299      	cmp	r1, r3
 80056b4:	d002      	beq.n	80056bc <__swsetup_r+0x48>
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 ff34 	bl	8006524 <_free_r>
 80056bc:	2300      	movs	r3, #0
 80056be:	6363      	str	r3, [r4, #52]	; 0x34
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80056c6:	81a3      	strh	r3, [r4, #12]
 80056c8:	2300      	movs	r3, #0
 80056ca:	6063      	str	r3, [r4, #4]
 80056cc:	6923      	ldr	r3, [r4, #16]
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	89a3      	ldrh	r3, [r4, #12]
 80056d2:	f043 0308 	orr.w	r3, r3, #8
 80056d6:	81a3      	strh	r3, [r4, #12]
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	b94b      	cbnz	r3, 80056f0 <__swsetup_r+0x7c>
 80056dc:	89a3      	ldrh	r3, [r4, #12]
 80056de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80056e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e6:	d003      	beq.n	80056f0 <__swsetup_r+0x7c>
 80056e8:	4621      	mov	r1, r4
 80056ea:	4628      	mov	r0, r5
 80056ec:	f002 fece 	bl	800848c <__smakebuf_r>
 80056f0:	89a0      	ldrh	r0, [r4, #12]
 80056f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056f6:	f010 0301 	ands.w	r3, r0, #1
 80056fa:	d00a      	beq.n	8005712 <__swsetup_r+0x9e>
 80056fc:	2300      	movs	r3, #0
 80056fe:	60a3      	str	r3, [r4, #8]
 8005700:	6963      	ldr	r3, [r4, #20]
 8005702:	425b      	negs	r3, r3
 8005704:	61a3      	str	r3, [r4, #24]
 8005706:	6923      	ldr	r3, [r4, #16]
 8005708:	b943      	cbnz	r3, 800571c <__swsetup_r+0xa8>
 800570a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800570e:	d1c4      	bne.n	800569a <__swsetup_r+0x26>
 8005710:	bd38      	pop	{r3, r4, r5, pc}
 8005712:	0781      	lsls	r1, r0, #30
 8005714:	bf58      	it	pl
 8005716:	6963      	ldrpl	r3, [r4, #20]
 8005718:	60a3      	str	r3, [r4, #8]
 800571a:	e7f4      	b.n	8005706 <__swsetup_r+0x92>
 800571c:	2000      	movs	r0, #0
 800571e:	e7f7      	b.n	8005710 <__swsetup_r+0x9c>
 8005720:	20000064 	.word	0x20000064

08005724 <memset>:
 8005724:	4402      	add	r2, r0
 8005726:	4603      	mov	r3, r0
 8005728:	4293      	cmp	r3, r2
 800572a:	d100      	bne.n	800572e <memset+0xa>
 800572c:	4770      	bx	lr
 800572e:	f803 1b01 	strb.w	r1, [r3], #1
 8005732:	e7f9      	b.n	8005728 <memset+0x4>

08005734 <_localeconv_r>:
 8005734:	4800      	ldr	r0, [pc, #0]	; (8005738 <_localeconv_r+0x4>)
 8005736:	4770      	bx	lr
 8005738:	20000158 	.word	0x20000158

0800573c <_close_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	4d06      	ldr	r5, [pc, #24]	; (8005758 <_close_r+0x1c>)
 8005740:	2300      	movs	r3, #0
 8005742:	4604      	mov	r4, r0
 8005744:	4608      	mov	r0, r1
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	f7fc faa1 	bl	8001c8e <_close>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d102      	bne.n	8005756 <_close_r+0x1a>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	b103      	cbz	r3, 8005756 <_close_r+0x1a>
 8005754:	6023      	str	r3, [r4, #0]
 8005756:	bd38      	pop	{r3, r4, r5, pc}
 8005758:	2000046c 	.word	0x2000046c

0800575c <_lseek_r>:
 800575c:	b538      	push	{r3, r4, r5, lr}
 800575e:	4d07      	ldr	r5, [pc, #28]	; (800577c <_lseek_r+0x20>)
 8005760:	4604      	mov	r4, r0
 8005762:	4608      	mov	r0, r1
 8005764:	4611      	mov	r1, r2
 8005766:	2200      	movs	r2, #0
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	461a      	mov	r2, r3
 800576c:	f7fc fab6 	bl	8001cdc <_lseek>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d102      	bne.n	800577a <_lseek_r+0x1e>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	b103      	cbz	r3, 800577a <_lseek_r+0x1e>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	bd38      	pop	{r3, r4, r5, pc}
 800577c:	2000046c 	.word	0x2000046c

08005780 <_read_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d07      	ldr	r5, [pc, #28]	; (80057a0 <_read_r+0x20>)
 8005784:	4604      	mov	r4, r0
 8005786:	4608      	mov	r0, r1
 8005788:	4611      	mov	r1, r2
 800578a:	2200      	movs	r2, #0
 800578c:	602a      	str	r2, [r5, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	f7fc fa44 	bl	8001c1c <_read>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_read_r+0x1e>
 8005798:	682b      	ldr	r3, [r5, #0]
 800579a:	b103      	cbz	r3, 800579e <_read_r+0x1e>
 800579c:	6023      	str	r3, [r4, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	2000046c 	.word	0x2000046c

080057a4 <_write_r>:
 80057a4:	b538      	push	{r3, r4, r5, lr}
 80057a6:	4d07      	ldr	r5, [pc, #28]	; (80057c4 <_write_r+0x20>)
 80057a8:	4604      	mov	r4, r0
 80057aa:	4608      	mov	r0, r1
 80057ac:	4611      	mov	r1, r2
 80057ae:	2200      	movs	r2, #0
 80057b0:	602a      	str	r2, [r5, #0]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f7fc fa4f 	bl	8001c56 <_write>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_write_r+0x1e>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_write_r+0x1e>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	2000046c 	.word	0x2000046c

080057c8 <__errno>:
 80057c8:	4b01      	ldr	r3, [pc, #4]	; (80057d0 <__errno+0x8>)
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000064 	.word	0x20000064

080057d4 <__libc_init_array>:
 80057d4:	b570      	push	{r4, r5, r6, lr}
 80057d6:	4d0d      	ldr	r5, [pc, #52]	; (800580c <__libc_init_array+0x38>)
 80057d8:	4c0d      	ldr	r4, [pc, #52]	; (8005810 <__libc_init_array+0x3c>)
 80057da:	1b64      	subs	r4, r4, r5
 80057dc:	10a4      	asrs	r4, r4, #2
 80057de:	2600      	movs	r6, #0
 80057e0:	42a6      	cmp	r6, r4
 80057e2:	d109      	bne.n	80057f8 <__libc_init_array+0x24>
 80057e4:	4d0b      	ldr	r5, [pc, #44]	; (8005814 <__libc_init_array+0x40>)
 80057e6:	4c0c      	ldr	r4, [pc, #48]	; (8005818 <__libc_init_array+0x44>)
 80057e8:	f003 fb42 	bl	8008e70 <_init>
 80057ec:	1b64      	subs	r4, r4, r5
 80057ee:	10a4      	asrs	r4, r4, #2
 80057f0:	2600      	movs	r6, #0
 80057f2:	42a6      	cmp	r6, r4
 80057f4:	d105      	bne.n	8005802 <__libc_init_array+0x2e>
 80057f6:	bd70      	pop	{r4, r5, r6, pc}
 80057f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fc:	4798      	blx	r3
 80057fe:	3601      	adds	r6, #1
 8005800:	e7ee      	b.n	80057e0 <__libc_init_array+0xc>
 8005802:	f855 3b04 	ldr.w	r3, [r5], #4
 8005806:	4798      	blx	r3
 8005808:	3601      	adds	r6, #1
 800580a:	e7f2      	b.n	80057f2 <__libc_init_array+0x1e>
 800580c:	08009338 	.word	0x08009338
 8005810:	08009338 	.word	0x08009338
 8005814:	08009338 	.word	0x08009338
 8005818:	0800933c 	.word	0x0800933c

0800581c <__retarget_lock_init_recursive>:
 800581c:	4770      	bx	lr

0800581e <__retarget_lock_acquire_recursive>:
 800581e:	4770      	bx	lr

08005820 <__retarget_lock_release_recursive>:
 8005820:	4770      	bx	lr
	...

08005824 <nanf>:
 8005824:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800582c <nanf+0x8>
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	7fc00000 	.word	0x7fc00000

08005830 <quorem>:
 8005830:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	6903      	ldr	r3, [r0, #16]
 8005836:	690c      	ldr	r4, [r1, #16]
 8005838:	42a3      	cmp	r3, r4
 800583a:	4607      	mov	r7, r0
 800583c:	db7e      	blt.n	800593c <quorem+0x10c>
 800583e:	3c01      	subs	r4, #1
 8005840:	f101 0814 	add.w	r8, r1, #20
 8005844:	f100 0514 	add.w	r5, r0, #20
 8005848:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005852:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005856:	3301      	adds	r3, #1
 8005858:	429a      	cmp	r2, r3
 800585a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800585e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005862:	fbb2 f6f3 	udiv	r6, r2, r3
 8005866:	d331      	bcc.n	80058cc <quorem+0x9c>
 8005868:	f04f 0e00 	mov.w	lr, #0
 800586c:	4640      	mov	r0, r8
 800586e:	46ac      	mov	ip, r5
 8005870:	46f2      	mov	sl, lr
 8005872:	f850 2b04 	ldr.w	r2, [r0], #4
 8005876:	b293      	uxth	r3, r2
 8005878:	fb06 e303 	mla	r3, r6, r3, lr
 800587c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005880:	0c1a      	lsrs	r2, r3, #16
 8005882:	b29b      	uxth	r3, r3
 8005884:	ebaa 0303 	sub.w	r3, sl, r3
 8005888:	f8dc a000 	ldr.w	sl, [ip]
 800588c:	fa13 f38a 	uxtah	r3, r3, sl
 8005890:	fb06 220e 	mla	r2, r6, lr, r2
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	9b00      	ldr	r3, [sp, #0]
 8005898:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800589c:	b292      	uxth	r2, r2
 800589e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80058a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058a6:	f8bd 3000 	ldrh.w	r3, [sp]
 80058aa:	4581      	cmp	r9, r0
 80058ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058b0:	f84c 3b04 	str.w	r3, [ip], #4
 80058b4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80058b8:	d2db      	bcs.n	8005872 <quorem+0x42>
 80058ba:	f855 300b 	ldr.w	r3, [r5, fp]
 80058be:	b92b      	cbnz	r3, 80058cc <quorem+0x9c>
 80058c0:	9b01      	ldr	r3, [sp, #4]
 80058c2:	3b04      	subs	r3, #4
 80058c4:	429d      	cmp	r5, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	d32c      	bcc.n	8005924 <quorem+0xf4>
 80058ca:	613c      	str	r4, [r7, #16]
 80058cc:	4638      	mov	r0, r7
 80058ce:	f001 f9ef 	bl	8006cb0 <__mcmp>
 80058d2:	2800      	cmp	r0, #0
 80058d4:	db22      	blt.n	800591c <quorem+0xec>
 80058d6:	3601      	adds	r6, #1
 80058d8:	4629      	mov	r1, r5
 80058da:	2000      	movs	r0, #0
 80058dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80058e0:	f8d1 c000 	ldr.w	ip, [r1]
 80058e4:	b293      	uxth	r3, r2
 80058e6:	1ac3      	subs	r3, r0, r3
 80058e8:	0c12      	lsrs	r2, r2, #16
 80058ea:	fa13 f38c 	uxtah	r3, r3, ip
 80058ee:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80058f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058fc:	45c1      	cmp	r9, r8
 80058fe:	f841 3b04 	str.w	r3, [r1], #4
 8005902:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005906:	d2e9      	bcs.n	80058dc <quorem+0xac>
 8005908:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800590c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005910:	b922      	cbnz	r2, 800591c <quorem+0xec>
 8005912:	3b04      	subs	r3, #4
 8005914:	429d      	cmp	r5, r3
 8005916:	461a      	mov	r2, r3
 8005918:	d30a      	bcc.n	8005930 <quorem+0x100>
 800591a:	613c      	str	r4, [r7, #16]
 800591c:	4630      	mov	r0, r6
 800591e:	b003      	add	sp, #12
 8005920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	3b04      	subs	r3, #4
 8005928:	2a00      	cmp	r2, #0
 800592a:	d1ce      	bne.n	80058ca <quorem+0x9a>
 800592c:	3c01      	subs	r4, #1
 800592e:	e7c9      	b.n	80058c4 <quorem+0x94>
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	3b04      	subs	r3, #4
 8005934:	2a00      	cmp	r2, #0
 8005936:	d1f0      	bne.n	800591a <quorem+0xea>
 8005938:	3c01      	subs	r4, #1
 800593a:	e7eb      	b.n	8005914 <quorem+0xe4>
 800593c:	2000      	movs	r0, #0
 800593e:	e7ee      	b.n	800591e <quorem+0xee>

08005940 <_dtoa_r>:
 8005940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005944:	ed2d 8b04 	vpush	{d8-d9}
 8005948:	69c5      	ldr	r5, [r0, #28]
 800594a:	b093      	sub	sp, #76	; 0x4c
 800594c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005950:	ec57 6b10 	vmov	r6, r7, d0
 8005954:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005958:	9107      	str	r1, [sp, #28]
 800595a:	4604      	mov	r4, r0
 800595c:	920a      	str	r2, [sp, #40]	; 0x28
 800595e:	930d      	str	r3, [sp, #52]	; 0x34
 8005960:	b975      	cbnz	r5, 8005980 <_dtoa_r+0x40>
 8005962:	2010      	movs	r0, #16
 8005964:	f000 fe2a 	bl	80065bc <malloc>
 8005968:	4602      	mov	r2, r0
 800596a:	61e0      	str	r0, [r4, #28]
 800596c:	b920      	cbnz	r0, 8005978 <_dtoa_r+0x38>
 800596e:	4bae      	ldr	r3, [pc, #696]	; (8005c28 <_dtoa_r+0x2e8>)
 8005970:	21ef      	movs	r1, #239	; 0xef
 8005972:	48ae      	ldr	r0, [pc, #696]	; (8005c2c <_dtoa_r+0x2ec>)
 8005974:	f002 fe3c 	bl	80085f0 <__assert_func>
 8005978:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800597c:	6005      	str	r5, [r0, #0]
 800597e:	60c5      	str	r5, [r0, #12]
 8005980:	69e3      	ldr	r3, [r4, #28]
 8005982:	6819      	ldr	r1, [r3, #0]
 8005984:	b151      	cbz	r1, 800599c <_dtoa_r+0x5c>
 8005986:	685a      	ldr	r2, [r3, #4]
 8005988:	604a      	str	r2, [r1, #4]
 800598a:	2301      	movs	r3, #1
 800598c:	4093      	lsls	r3, r2
 800598e:	608b      	str	r3, [r1, #8]
 8005990:	4620      	mov	r0, r4
 8005992:	f000 ff07 	bl	80067a4 <_Bfree>
 8005996:	69e3      	ldr	r3, [r4, #28]
 8005998:	2200      	movs	r2, #0
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	1e3b      	subs	r3, r7, #0
 800599e:	bfbb      	ittet	lt
 80059a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059a4:	9303      	strlt	r3, [sp, #12]
 80059a6:	2300      	movge	r3, #0
 80059a8:	2201      	movlt	r2, #1
 80059aa:	bfac      	ite	ge
 80059ac:	f8c8 3000 	strge.w	r3, [r8]
 80059b0:	f8c8 2000 	strlt.w	r2, [r8]
 80059b4:	4b9e      	ldr	r3, [pc, #632]	; (8005c30 <_dtoa_r+0x2f0>)
 80059b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80059ba:	ea33 0308 	bics.w	r3, r3, r8
 80059be:	d11b      	bne.n	80059f8 <_dtoa_r+0xb8>
 80059c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059c2:	f242 730f 	movw	r3, #9999	; 0x270f
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80059cc:	4333      	orrs	r3, r6
 80059ce:	f000 8593 	beq.w	80064f8 <_dtoa_r+0xbb8>
 80059d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d4:	b963      	cbnz	r3, 80059f0 <_dtoa_r+0xb0>
 80059d6:	4b97      	ldr	r3, [pc, #604]	; (8005c34 <_dtoa_r+0x2f4>)
 80059d8:	e027      	b.n	8005a2a <_dtoa_r+0xea>
 80059da:	4b97      	ldr	r3, [pc, #604]	; (8005c38 <_dtoa_r+0x2f8>)
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	3308      	adds	r3, #8
 80059e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	9800      	ldr	r0, [sp, #0]
 80059e6:	b013      	add	sp, #76	; 0x4c
 80059e8:	ecbd 8b04 	vpop	{d8-d9}
 80059ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f0:	4b90      	ldr	r3, [pc, #576]	; (8005c34 <_dtoa_r+0x2f4>)
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	3303      	adds	r3, #3
 80059f6:	e7f3      	b.n	80059e0 <_dtoa_r+0xa0>
 80059f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059fc:	2200      	movs	r2, #0
 80059fe:	ec51 0b17 	vmov	r0, r1, d7
 8005a02:	eeb0 8a47 	vmov.f32	s16, s14
 8005a06:	eef0 8a67 	vmov.f32	s17, s15
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f7fb f864 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a10:	4681      	mov	r9, r0
 8005a12:	b160      	cbz	r0, 8005a2e <_dtoa_r+0xee>
 8005a14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a16:	2301      	movs	r3, #1
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8568 	beq.w	80064f2 <_dtoa_r+0xbb2>
 8005a22:	4b86      	ldr	r3, [pc, #536]	; (8005c3c <_dtoa_r+0x2fc>)
 8005a24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a26:	6013      	str	r3, [r2, #0]
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	e7da      	b.n	80059e4 <_dtoa_r+0xa4>
 8005a2e:	aa10      	add	r2, sp, #64	; 0x40
 8005a30:	a911      	add	r1, sp, #68	; 0x44
 8005a32:	4620      	mov	r0, r4
 8005a34:	eeb0 0a48 	vmov.f32	s0, s16
 8005a38:	eef0 0a68 	vmov.f32	s1, s17
 8005a3c:	f001 fa4e 	bl	8006edc <__d2b>
 8005a40:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005a44:	4682      	mov	sl, r0
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	d07f      	beq.n	8005b4a <_dtoa_r+0x20a>
 8005a4a:	ee18 3a90 	vmov	r3, s17
 8005a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a52:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005a56:	ec51 0b18 	vmov	r0, r1, d8
 8005a5a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005a5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a62:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005a66:	4619      	mov	r1, r3
 8005a68:	2200      	movs	r2, #0
 8005a6a:	4b75      	ldr	r3, [pc, #468]	; (8005c40 <_dtoa_r+0x300>)
 8005a6c:	f7fa fc14 	bl	8000298 <__aeabi_dsub>
 8005a70:	a367      	add	r3, pc, #412	; (adr r3, 8005c10 <_dtoa_r+0x2d0>)
 8005a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a76:	f7fa fdc7 	bl	8000608 <__aeabi_dmul>
 8005a7a:	a367      	add	r3, pc, #412	; (adr r3, 8005c18 <_dtoa_r+0x2d8>)
 8005a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a80:	f7fa fc0c 	bl	800029c <__adddf3>
 8005a84:	4606      	mov	r6, r0
 8005a86:	4628      	mov	r0, r5
 8005a88:	460f      	mov	r7, r1
 8005a8a:	f7fa fd53 	bl	8000534 <__aeabi_i2d>
 8005a8e:	a364      	add	r3, pc, #400	; (adr r3, 8005c20 <_dtoa_r+0x2e0>)
 8005a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a94:	f7fa fdb8 	bl	8000608 <__aeabi_dmul>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	4639      	mov	r1, r7
 8005aa0:	f7fa fbfc 	bl	800029c <__adddf3>
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460f      	mov	r7, r1
 8005aa8:	f7fb f85e 	bl	8000b68 <__aeabi_d2iz>
 8005aac:	2200      	movs	r2, #0
 8005aae:	4683      	mov	fp, r0
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	f7fb f819 	bl	8000aec <__aeabi_dcmplt>
 8005aba:	b148      	cbz	r0, 8005ad0 <_dtoa_r+0x190>
 8005abc:	4658      	mov	r0, fp
 8005abe:	f7fa fd39 	bl	8000534 <__aeabi_i2d>
 8005ac2:	4632      	mov	r2, r6
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	f7fb f807 	bl	8000ad8 <__aeabi_dcmpeq>
 8005aca:	b908      	cbnz	r0, 8005ad0 <_dtoa_r+0x190>
 8005acc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ad0:	f1bb 0f16 	cmp.w	fp, #22
 8005ad4:	d857      	bhi.n	8005b86 <_dtoa_r+0x246>
 8005ad6:	4b5b      	ldr	r3, [pc, #364]	; (8005c44 <_dtoa_r+0x304>)
 8005ad8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae0:	ec51 0b18 	vmov	r0, r1, d8
 8005ae4:	f7fb f802 	bl	8000aec <__aeabi_dcmplt>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	d04e      	beq.n	8005b8a <_dtoa_r+0x24a>
 8005aec:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005af0:	2300      	movs	r3, #0
 8005af2:	930c      	str	r3, [sp, #48]	; 0x30
 8005af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005af6:	1b5b      	subs	r3, r3, r5
 8005af8:	1e5a      	subs	r2, r3, #1
 8005afa:	bf45      	ittet	mi
 8005afc:	f1c3 0301 	rsbmi	r3, r3, #1
 8005b00:	9305      	strmi	r3, [sp, #20]
 8005b02:	2300      	movpl	r3, #0
 8005b04:	2300      	movmi	r3, #0
 8005b06:	9206      	str	r2, [sp, #24]
 8005b08:	bf54      	ite	pl
 8005b0a:	9305      	strpl	r3, [sp, #20]
 8005b0c:	9306      	strmi	r3, [sp, #24]
 8005b0e:	f1bb 0f00 	cmp.w	fp, #0
 8005b12:	db3c      	blt.n	8005b8e <_dtoa_r+0x24e>
 8005b14:	9b06      	ldr	r3, [sp, #24]
 8005b16:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005b1a:	445b      	add	r3, fp
 8005b1c:	9306      	str	r3, [sp, #24]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	9308      	str	r3, [sp, #32]
 8005b22:	9b07      	ldr	r3, [sp, #28]
 8005b24:	2b09      	cmp	r3, #9
 8005b26:	d868      	bhi.n	8005bfa <_dtoa_r+0x2ba>
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	bfc4      	itt	gt
 8005b2c:	3b04      	subgt	r3, #4
 8005b2e:	9307      	strgt	r3, [sp, #28]
 8005b30:	9b07      	ldr	r3, [sp, #28]
 8005b32:	f1a3 0302 	sub.w	r3, r3, #2
 8005b36:	bfcc      	ite	gt
 8005b38:	2500      	movgt	r5, #0
 8005b3a:	2501      	movle	r5, #1
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	f200 8085 	bhi.w	8005c4c <_dtoa_r+0x30c>
 8005b42:	e8df f003 	tbb	[pc, r3]
 8005b46:	3b2e      	.short	0x3b2e
 8005b48:	5839      	.short	0x5839
 8005b4a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005b4e:	441d      	add	r5, r3
 8005b50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	bfc1      	itttt	gt
 8005b58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005b5c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005b60:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005b64:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005b68:	bfd6      	itet	le
 8005b6a:	f1c3 0320 	rsble	r3, r3, #32
 8005b6e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005b72:	fa06 f003 	lslle.w	r0, r6, r3
 8005b76:	f7fa fccd 	bl	8000514 <__aeabi_ui2d>
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005b80:	3d01      	subs	r5, #1
 8005b82:	920e      	str	r2, [sp, #56]	; 0x38
 8005b84:	e76f      	b.n	8005a66 <_dtoa_r+0x126>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e7b3      	b.n	8005af2 <_dtoa_r+0x1b2>
 8005b8a:	900c      	str	r0, [sp, #48]	; 0x30
 8005b8c:	e7b2      	b.n	8005af4 <_dtoa_r+0x1b4>
 8005b8e:	9b05      	ldr	r3, [sp, #20]
 8005b90:	eba3 030b 	sub.w	r3, r3, fp
 8005b94:	9305      	str	r3, [sp, #20]
 8005b96:	f1cb 0300 	rsb	r3, fp, #0
 8005b9a:	9308      	str	r3, [sp, #32]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ba0:	e7bf      	b.n	8005b22 <_dtoa_r+0x1e2>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	dc52      	bgt.n	8005c52 <_dtoa_r+0x312>
 8005bac:	2301      	movs	r3, #1
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	9304      	str	r3, [sp, #16]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	920a      	str	r2, [sp, #40]	; 0x28
 8005bb6:	e00b      	b.n	8005bd0 <_dtoa_r+0x290>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e7f3      	b.n	8005ba4 <_dtoa_r+0x264>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc2:	445b      	add	r3, fp
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	9304      	str	r3, [sp, #16]
 8005bcc:	bfb8      	it	lt
 8005bce:	2301      	movlt	r3, #1
 8005bd0:	69e0      	ldr	r0, [r4, #28]
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	2204      	movs	r2, #4
 8005bd6:	f102 0614 	add.w	r6, r2, #20
 8005bda:	429e      	cmp	r6, r3
 8005bdc:	d93d      	bls.n	8005c5a <_dtoa_r+0x31a>
 8005bde:	6041      	str	r1, [r0, #4]
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 fd9f 	bl	8006724 <_Balloc>
 8005be6:	9000      	str	r0, [sp, #0]
 8005be8:	2800      	cmp	r0, #0
 8005bea:	d139      	bne.n	8005c60 <_dtoa_r+0x320>
 8005bec:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <_dtoa_r+0x308>)
 8005bee:	4602      	mov	r2, r0
 8005bf0:	f240 11af 	movw	r1, #431	; 0x1af
 8005bf4:	e6bd      	b.n	8005972 <_dtoa_r+0x32>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e7e1      	b.n	8005bbe <_dtoa_r+0x27e>
 8005bfa:	2501      	movs	r5, #1
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	9307      	str	r3, [sp, #28]
 8005c00:	9509      	str	r5, [sp, #36]	; 0x24
 8005c02:	f04f 33ff 	mov.w	r3, #4294967295
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	9304      	str	r3, [sp, #16]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2312      	movs	r3, #18
 8005c0e:	e7d1      	b.n	8005bb4 <_dtoa_r+0x274>
 8005c10:	636f4361 	.word	0x636f4361
 8005c14:	3fd287a7 	.word	0x3fd287a7
 8005c18:	8b60c8b3 	.word	0x8b60c8b3
 8005c1c:	3fc68a28 	.word	0x3fc68a28
 8005c20:	509f79fb 	.word	0x509f79fb
 8005c24:	3fd34413 	.word	0x3fd34413
 8005c28:	08008f4e 	.word	0x08008f4e
 8005c2c:	08008f65 	.word	0x08008f65
 8005c30:	7ff00000 	.word	0x7ff00000
 8005c34:	08008f4a 	.word	0x08008f4a
 8005c38:	08008f41 	.word	0x08008f41
 8005c3c:	08008f19 	.word	0x08008f19
 8005c40:	3ff80000 	.word	0x3ff80000
 8005c44:	08009050 	.word	0x08009050
 8005c48:	08008fbd 	.word	0x08008fbd
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c50:	e7d7      	b.n	8005c02 <_dtoa_r+0x2c2>
 8005c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	9304      	str	r3, [sp, #16]
 8005c58:	e7ba      	b.n	8005bd0 <_dtoa_r+0x290>
 8005c5a:	3101      	adds	r1, #1
 8005c5c:	0052      	lsls	r2, r2, #1
 8005c5e:	e7ba      	b.n	8005bd6 <_dtoa_r+0x296>
 8005c60:	69e3      	ldr	r3, [r4, #28]
 8005c62:	9a00      	ldr	r2, [sp, #0]
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	9b04      	ldr	r3, [sp, #16]
 8005c68:	2b0e      	cmp	r3, #14
 8005c6a:	f200 80a8 	bhi.w	8005dbe <_dtoa_r+0x47e>
 8005c6e:	2d00      	cmp	r5, #0
 8005c70:	f000 80a5 	beq.w	8005dbe <_dtoa_r+0x47e>
 8005c74:	f1bb 0f00 	cmp.w	fp, #0
 8005c78:	dd38      	ble.n	8005cec <_dtoa_r+0x3ac>
 8005c7a:	4bc0      	ldr	r3, [pc, #768]	; (8005f7c <_dtoa_r+0x63c>)
 8005c7c:	f00b 020f 	and.w	r2, fp, #15
 8005c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005c88:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005c8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005c90:	d019      	beq.n	8005cc6 <_dtoa_r+0x386>
 8005c92:	4bbb      	ldr	r3, [pc, #748]	; (8005f80 <_dtoa_r+0x640>)
 8005c94:	ec51 0b18 	vmov	r0, r1, d8
 8005c98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c9c:	f7fa fdde 	bl	800085c <__aeabi_ddiv>
 8005ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ca4:	f008 080f 	and.w	r8, r8, #15
 8005ca8:	2503      	movs	r5, #3
 8005caa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005f80 <_dtoa_r+0x640>
 8005cae:	f1b8 0f00 	cmp.w	r8, #0
 8005cb2:	d10a      	bne.n	8005cca <_dtoa_r+0x38a>
 8005cb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cb8:	4632      	mov	r2, r6
 8005cba:	463b      	mov	r3, r7
 8005cbc:	f7fa fdce 	bl	800085c <__aeabi_ddiv>
 8005cc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cc4:	e02b      	b.n	8005d1e <_dtoa_r+0x3de>
 8005cc6:	2502      	movs	r5, #2
 8005cc8:	e7ef      	b.n	8005caa <_dtoa_r+0x36a>
 8005cca:	f018 0f01 	tst.w	r8, #1
 8005cce:	d008      	beq.n	8005ce2 <_dtoa_r+0x3a2>
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005cd8:	f7fa fc96 	bl	8000608 <__aeabi_dmul>
 8005cdc:	3501      	adds	r5, #1
 8005cde:	4606      	mov	r6, r0
 8005ce0:	460f      	mov	r7, r1
 8005ce2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005ce6:	f109 0908 	add.w	r9, r9, #8
 8005cea:	e7e0      	b.n	8005cae <_dtoa_r+0x36e>
 8005cec:	f000 809f 	beq.w	8005e2e <_dtoa_r+0x4ee>
 8005cf0:	f1cb 0600 	rsb	r6, fp, #0
 8005cf4:	4ba1      	ldr	r3, [pc, #644]	; (8005f7c <_dtoa_r+0x63c>)
 8005cf6:	4fa2      	ldr	r7, [pc, #648]	; (8005f80 <_dtoa_r+0x640>)
 8005cf8:	f006 020f 	and.w	r2, r6, #15
 8005cfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	ec51 0b18 	vmov	r0, r1, d8
 8005d08:	f7fa fc7e 	bl	8000608 <__aeabi_dmul>
 8005d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d10:	1136      	asrs	r6, r6, #4
 8005d12:	2300      	movs	r3, #0
 8005d14:	2502      	movs	r5, #2
 8005d16:	2e00      	cmp	r6, #0
 8005d18:	d17e      	bne.n	8005e18 <_dtoa_r+0x4d8>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1d0      	bne.n	8005cc0 <_dtoa_r+0x380>
 8005d1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 8084 	beq.w	8005e32 <_dtoa_r+0x4f2>
 8005d2a:	4b96      	ldr	r3, [pc, #600]	; (8005f84 <_dtoa_r+0x644>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4640      	mov	r0, r8
 8005d30:	4649      	mov	r1, r9
 8005d32:	f7fa fedb 	bl	8000aec <__aeabi_dcmplt>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d07b      	beq.n	8005e32 <_dtoa_r+0x4f2>
 8005d3a:	9b04      	ldr	r3, [sp, #16]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d078      	beq.n	8005e32 <_dtoa_r+0x4f2>
 8005d40:	9b01      	ldr	r3, [sp, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	dd39      	ble.n	8005dba <_dtoa_r+0x47a>
 8005d46:	4b90      	ldr	r3, [pc, #576]	; (8005f88 <_dtoa_r+0x648>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	4649      	mov	r1, r9
 8005d4e:	f7fa fc5b 	bl	8000608 <__aeabi_dmul>
 8005d52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d56:	9e01      	ldr	r6, [sp, #4]
 8005d58:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005d5c:	3501      	adds	r5, #1
 8005d5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005d62:	4628      	mov	r0, r5
 8005d64:	f7fa fbe6 	bl	8000534 <__aeabi_i2d>
 8005d68:	4642      	mov	r2, r8
 8005d6a:	464b      	mov	r3, r9
 8005d6c:	f7fa fc4c 	bl	8000608 <__aeabi_dmul>
 8005d70:	4b86      	ldr	r3, [pc, #536]	; (8005f8c <_dtoa_r+0x64c>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	f7fa fa92 	bl	800029c <__adddf3>
 8005d78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005d7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d80:	9303      	str	r3, [sp, #12]
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	d158      	bne.n	8005e38 <_dtoa_r+0x4f8>
 8005d86:	4b82      	ldr	r3, [pc, #520]	; (8005f90 <_dtoa_r+0x650>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	4640      	mov	r0, r8
 8005d8c:	4649      	mov	r1, r9
 8005d8e:	f7fa fa83 	bl	8000298 <__aeabi_dsub>
 8005d92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d96:	4680      	mov	r8, r0
 8005d98:	4689      	mov	r9, r1
 8005d9a:	f7fa fec5 	bl	8000b28 <__aeabi_dcmpgt>
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	f040 8296 	bne.w	80062d0 <_dtoa_r+0x990>
 8005da4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005da8:	4640      	mov	r0, r8
 8005daa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dae:	4649      	mov	r1, r9
 8005db0:	f7fa fe9c 	bl	8000aec <__aeabi_dcmplt>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	f040 8289 	bne.w	80062cc <_dtoa_r+0x98c>
 8005dba:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f2c0 814e 	blt.w	8006062 <_dtoa_r+0x722>
 8005dc6:	f1bb 0f0e 	cmp.w	fp, #14
 8005dca:	f300 814a 	bgt.w	8006062 <_dtoa_r+0x722>
 8005dce:	4b6b      	ldr	r3, [pc, #428]	; (8005f7c <_dtoa_r+0x63c>)
 8005dd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005dd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f280 80dc 	bge.w	8005f98 <_dtoa_r+0x658>
 8005de0:	9b04      	ldr	r3, [sp, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f300 80d8 	bgt.w	8005f98 <_dtoa_r+0x658>
 8005de8:	f040 826f 	bne.w	80062ca <_dtoa_r+0x98a>
 8005dec:	4b68      	ldr	r3, [pc, #416]	; (8005f90 <_dtoa_r+0x650>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	4640      	mov	r0, r8
 8005df2:	4649      	mov	r1, r9
 8005df4:	f7fa fc08 	bl	8000608 <__aeabi_dmul>
 8005df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dfc:	f7fa fe8a 	bl	8000b14 <__aeabi_dcmpge>
 8005e00:	9e04      	ldr	r6, [sp, #16]
 8005e02:	4637      	mov	r7, r6
 8005e04:	2800      	cmp	r0, #0
 8005e06:	f040 8245 	bne.w	8006294 <_dtoa_r+0x954>
 8005e0a:	9d00      	ldr	r5, [sp, #0]
 8005e0c:	2331      	movs	r3, #49	; 0x31
 8005e0e:	f805 3b01 	strb.w	r3, [r5], #1
 8005e12:	f10b 0b01 	add.w	fp, fp, #1
 8005e16:	e241      	b.n	800629c <_dtoa_r+0x95c>
 8005e18:	07f2      	lsls	r2, r6, #31
 8005e1a:	d505      	bpl.n	8005e28 <_dtoa_r+0x4e8>
 8005e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e20:	f7fa fbf2 	bl	8000608 <__aeabi_dmul>
 8005e24:	3501      	adds	r5, #1
 8005e26:	2301      	movs	r3, #1
 8005e28:	1076      	asrs	r6, r6, #1
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	e773      	b.n	8005d16 <_dtoa_r+0x3d6>
 8005e2e:	2502      	movs	r5, #2
 8005e30:	e775      	b.n	8005d1e <_dtoa_r+0x3de>
 8005e32:	9e04      	ldr	r6, [sp, #16]
 8005e34:	465f      	mov	r7, fp
 8005e36:	e792      	b.n	8005d5e <_dtoa_r+0x41e>
 8005e38:	9900      	ldr	r1, [sp, #0]
 8005e3a:	4b50      	ldr	r3, [pc, #320]	; (8005f7c <_dtoa_r+0x63c>)
 8005e3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e40:	4431      	add	r1, r6
 8005e42:	9102      	str	r1, [sp, #8]
 8005e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e46:	eeb0 9a47 	vmov.f32	s18, s14
 8005e4a:	eef0 9a67 	vmov.f32	s19, s15
 8005e4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e56:	2900      	cmp	r1, #0
 8005e58:	d044      	beq.n	8005ee4 <_dtoa_r+0x5a4>
 8005e5a:	494e      	ldr	r1, [pc, #312]	; (8005f94 <_dtoa_r+0x654>)
 8005e5c:	2000      	movs	r0, #0
 8005e5e:	f7fa fcfd 	bl	800085c <__aeabi_ddiv>
 8005e62:	ec53 2b19 	vmov	r2, r3, d9
 8005e66:	f7fa fa17 	bl	8000298 <__aeabi_dsub>
 8005e6a:	9d00      	ldr	r5, [sp, #0]
 8005e6c:	ec41 0b19 	vmov	d9, r0, r1
 8005e70:	4649      	mov	r1, r9
 8005e72:	4640      	mov	r0, r8
 8005e74:	f7fa fe78 	bl	8000b68 <__aeabi_d2iz>
 8005e78:	4606      	mov	r6, r0
 8005e7a:	f7fa fb5b 	bl	8000534 <__aeabi_i2d>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4640      	mov	r0, r8
 8005e84:	4649      	mov	r1, r9
 8005e86:	f7fa fa07 	bl	8000298 <__aeabi_dsub>
 8005e8a:	3630      	adds	r6, #48	; 0x30
 8005e8c:	f805 6b01 	strb.w	r6, [r5], #1
 8005e90:	ec53 2b19 	vmov	r2, r3, d9
 8005e94:	4680      	mov	r8, r0
 8005e96:	4689      	mov	r9, r1
 8005e98:	f7fa fe28 	bl	8000aec <__aeabi_dcmplt>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d164      	bne.n	8005f6a <_dtoa_r+0x62a>
 8005ea0:	4642      	mov	r2, r8
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	4937      	ldr	r1, [pc, #220]	; (8005f84 <_dtoa_r+0x644>)
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	f7fa f9f6 	bl	8000298 <__aeabi_dsub>
 8005eac:	ec53 2b19 	vmov	r2, r3, d9
 8005eb0:	f7fa fe1c 	bl	8000aec <__aeabi_dcmplt>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	f040 80b6 	bne.w	8006026 <_dtoa_r+0x6e6>
 8005eba:	9b02      	ldr	r3, [sp, #8]
 8005ebc:	429d      	cmp	r5, r3
 8005ebe:	f43f af7c 	beq.w	8005dba <_dtoa_r+0x47a>
 8005ec2:	4b31      	ldr	r3, [pc, #196]	; (8005f88 <_dtoa_r+0x648>)
 8005ec4:	ec51 0b19 	vmov	r0, r1, d9
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f7fa fb9d 	bl	8000608 <__aeabi_dmul>
 8005ece:	4b2e      	ldr	r3, [pc, #184]	; (8005f88 <_dtoa_r+0x648>)
 8005ed0:	ec41 0b19 	vmov	d9, r0, r1
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	4649      	mov	r1, r9
 8005eda:	f7fa fb95 	bl	8000608 <__aeabi_dmul>
 8005ede:	4680      	mov	r8, r0
 8005ee0:	4689      	mov	r9, r1
 8005ee2:	e7c5      	b.n	8005e70 <_dtoa_r+0x530>
 8005ee4:	ec51 0b17 	vmov	r0, r1, d7
 8005ee8:	f7fa fb8e 	bl	8000608 <__aeabi_dmul>
 8005eec:	9b02      	ldr	r3, [sp, #8]
 8005eee:	9d00      	ldr	r5, [sp, #0]
 8005ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ef2:	ec41 0b19 	vmov	d9, r0, r1
 8005ef6:	4649      	mov	r1, r9
 8005ef8:	4640      	mov	r0, r8
 8005efa:	f7fa fe35 	bl	8000b68 <__aeabi_d2iz>
 8005efe:	4606      	mov	r6, r0
 8005f00:	f7fa fb18 	bl	8000534 <__aeabi_i2d>
 8005f04:	3630      	adds	r6, #48	; 0x30
 8005f06:	4602      	mov	r2, r0
 8005f08:	460b      	mov	r3, r1
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	f7fa f9c3 	bl	8000298 <__aeabi_dsub>
 8005f12:	f805 6b01 	strb.w	r6, [r5], #1
 8005f16:	9b02      	ldr	r3, [sp, #8]
 8005f18:	429d      	cmp	r5, r3
 8005f1a:	4680      	mov	r8, r0
 8005f1c:	4689      	mov	r9, r1
 8005f1e:	f04f 0200 	mov.w	r2, #0
 8005f22:	d124      	bne.n	8005f6e <_dtoa_r+0x62e>
 8005f24:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <_dtoa_r+0x654>)
 8005f26:	ec51 0b19 	vmov	r0, r1, d9
 8005f2a:	f7fa f9b7 	bl	800029c <__adddf3>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4640      	mov	r0, r8
 8005f34:	4649      	mov	r1, r9
 8005f36:	f7fa fdf7 	bl	8000b28 <__aeabi_dcmpgt>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	d173      	bne.n	8006026 <_dtoa_r+0x6e6>
 8005f3e:	ec53 2b19 	vmov	r2, r3, d9
 8005f42:	4914      	ldr	r1, [pc, #80]	; (8005f94 <_dtoa_r+0x654>)
 8005f44:	2000      	movs	r0, #0
 8005f46:	f7fa f9a7 	bl	8000298 <__aeabi_dsub>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4640      	mov	r0, r8
 8005f50:	4649      	mov	r1, r9
 8005f52:	f7fa fdcb 	bl	8000aec <__aeabi_dcmplt>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	f43f af2f 	beq.w	8005dba <_dtoa_r+0x47a>
 8005f5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005f5e:	1e6b      	subs	r3, r5, #1
 8005f60:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f66:	2b30      	cmp	r3, #48	; 0x30
 8005f68:	d0f8      	beq.n	8005f5c <_dtoa_r+0x61c>
 8005f6a:	46bb      	mov	fp, r7
 8005f6c:	e04a      	b.n	8006004 <_dtoa_r+0x6c4>
 8005f6e:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <_dtoa_r+0x648>)
 8005f70:	f7fa fb4a 	bl	8000608 <__aeabi_dmul>
 8005f74:	4680      	mov	r8, r0
 8005f76:	4689      	mov	r9, r1
 8005f78:	e7bd      	b.n	8005ef6 <_dtoa_r+0x5b6>
 8005f7a:	bf00      	nop
 8005f7c:	08009050 	.word	0x08009050
 8005f80:	08009028 	.word	0x08009028
 8005f84:	3ff00000 	.word	0x3ff00000
 8005f88:	40240000 	.word	0x40240000
 8005f8c:	401c0000 	.word	0x401c0000
 8005f90:	40140000 	.word	0x40140000
 8005f94:	3fe00000 	.word	0x3fe00000
 8005f98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f9c:	9d00      	ldr	r5, [sp, #0]
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	f7fa fc59 	bl	800085c <__aeabi_ddiv>
 8005faa:	f7fa fddd 	bl	8000b68 <__aeabi_d2iz>
 8005fae:	9001      	str	r0, [sp, #4]
 8005fb0:	f7fa fac0 	bl	8000534 <__aeabi_i2d>
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	f7fa fb26 	bl	8000608 <__aeabi_dmul>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa f968 	bl	8000298 <__aeabi_dsub>
 8005fc8:	9e01      	ldr	r6, [sp, #4]
 8005fca:	9f04      	ldr	r7, [sp, #16]
 8005fcc:	3630      	adds	r6, #48	; 0x30
 8005fce:	f805 6b01 	strb.w	r6, [r5], #1
 8005fd2:	9e00      	ldr	r6, [sp, #0]
 8005fd4:	1bae      	subs	r6, r5, r6
 8005fd6:	42b7      	cmp	r7, r6
 8005fd8:	4602      	mov	r2, r0
 8005fda:	460b      	mov	r3, r1
 8005fdc:	d134      	bne.n	8006048 <_dtoa_r+0x708>
 8005fde:	f7fa f95d 	bl	800029c <__adddf3>
 8005fe2:	4642      	mov	r2, r8
 8005fe4:	464b      	mov	r3, r9
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	460f      	mov	r7, r1
 8005fea:	f7fa fd9d 	bl	8000b28 <__aeabi_dcmpgt>
 8005fee:	b9c8      	cbnz	r0, 8006024 <_dtoa_r+0x6e4>
 8005ff0:	4642      	mov	r2, r8
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	f7fa fd6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ffc:	b110      	cbz	r0, 8006004 <_dtoa_r+0x6c4>
 8005ffe:	9b01      	ldr	r3, [sp, #4]
 8006000:	07db      	lsls	r3, r3, #31
 8006002:	d40f      	bmi.n	8006024 <_dtoa_r+0x6e4>
 8006004:	4651      	mov	r1, sl
 8006006:	4620      	mov	r0, r4
 8006008:	f000 fbcc 	bl	80067a4 <_Bfree>
 800600c:	2300      	movs	r3, #0
 800600e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006010:	702b      	strb	r3, [r5, #0]
 8006012:	f10b 0301 	add.w	r3, fp, #1
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800601a:	2b00      	cmp	r3, #0
 800601c:	f43f ace2 	beq.w	80059e4 <_dtoa_r+0xa4>
 8006020:	601d      	str	r5, [r3, #0]
 8006022:	e4df      	b.n	80059e4 <_dtoa_r+0xa4>
 8006024:	465f      	mov	r7, fp
 8006026:	462b      	mov	r3, r5
 8006028:	461d      	mov	r5, r3
 800602a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800602e:	2a39      	cmp	r2, #57	; 0x39
 8006030:	d106      	bne.n	8006040 <_dtoa_r+0x700>
 8006032:	9a00      	ldr	r2, [sp, #0]
 8006034:	429a      	cmp	r2, r3
 8006036:	d1f7      	bne.n	8006028 <_dtoa_r+0x6e8>
 8006038:	9900      	ldr	r1, [sp, #0]
 800603a:	2230      	movs	r2, #48	; 0x30
 800603c:	3701      	adds	r7, #1
 800603e:	700a      	strb	r2, [r1, #0]
 8006040:	781a      	ldrb	r2, [r3, #0]
 8006042:	3201      	adds	r2, #1
 8006044:	701a      	strb	r2, [r3, #0]
 8006046:	e790      	b.n	8005f6a <_dtoa_r+0x62a>
 8006048:	4ba3      	ldr	r3, [pc, #652]	; (80062d8 <_dtoa_r+0x998>)
 800604a:	2200      	movs	r2, #0
 800604c:	f7fa fadc 	bl	8000608 <__aeabi_dmul>
 8006050:	2200      	movs	r2, #0
 8006052:	2300      	movs	r3, #0
 8006054:	4606      	mov	r6, r0
 8006056:	460f      	mov	r7, r1
 8006058:	f7fa fd3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800605c:	2800      	cmp	r0, #0
 800605e:	d09e      	beq.n	8005f9e <_dtoa_r+0x65e>
 8006060:	e7d0      	b.n	8006004 <_dtoa_r+0x6c4>
 8006062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006064:	2a00      	cmp	r2, #0
 8006066:	f000 80ca 	beq.w	80061fe <_dtoa_r+0x8be>
 800606a:	9a07      	ldr	r2, [sp, #28]
 800606c:	2a01      	cmp	r2, #1
 800606e:	f300 80ad 	bgt.w	80061cc <_dtoa_r+0x88c>
 8006072:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006074:	2a00      	cmp	r2, #0
 8006076:	f000 80a5 	beq.w	80061c4 <_dtoa_r+0x884>
 800607a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800607e:	9e08      	ldr	r6, [sp, #32]
 8006080:	9d05      	ldr	r5, [sp, #20]
 8006082:	9a05      	ldr	r2, [sp, #20]
 8006084:	441a      	add	r2, r3
 8006086:	9205      	str	r2, [sp, #20]
 8006088:	9a06      	ldr	r2, [sp, #24]
 800608a:	2101      	movs	r1, #1
 800608c:	441a      	add	r2, r3
 800608e:	4620      	mov	r0, r4
 8006090:	9206      	str	r2, [sp, #24]
 8006092:	f000 fc87 	bl	80069a4 <__i2b>
 8006096:	4607      	mov	r7, r0
 8006098:	b165      	cbz	r5, 80060b4 <_dtoa_r+0x774>
 800609a:	9b06      	ldr	r3, [sp, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	dd09      	ble.n	80060b4 <_dtoa_r+0x774>
 80060a0:	42ab      	cmp	r3, r5
 80060a2:	9a05      	ldr	r2, [sp, #20]
 80060a4:	bfa8      	it	ge
 80060a6:	462b      	movge	r3, r5
 80060a8:	1ad2      	subs	r2, r2, r3
 80060aa:	9205      	str	r2, [sp, #20]
 80060ac:	9a06      	ldr	r2, [sp, #24]
 80060ae:	1aed      	subs	r5, r5, r3
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	9306      	str	r3, [sp, #24]
 80060b4:	9b08      	ldr	r3, [sp, #32]
 80060b6:	b1f3      	cbz	r3, 80060f6 <_dtoa_r+0x7b6>
 80060b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80a3 	beq.w	8006206 <_dtoa_r+0x8c6>
 80060c0:	2e00      	cmp	r6, #0
 80060c2:	dd10      	ble.n	80060e6 <_dtoa_r+0x7a6>
 80060c4:	4639      	mov	r1, r7
 80060c6:	4632      	mov	r2, r6
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fd2b 	bl	8006b24 <__pow5mult>
 80060ce:	4652      	mov	r2, sl
 80060d0:	4601      	mov	r1, r0
 80060d2:	4607      	mov	r7, r0
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 fc7b 	bl	80069d0 <__multiply>
 80060da:	4651      	mov	r1, sl
 80060dc:	4680      	mov	r8, r0
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 fb60 	bl	80067a4 <_Bfree>
 80060e4:	46c2      	mov	sl, r8
 80060e6:	9b08      	ldr	r3, [sp, #32]
 80060e8:	1b9a      	subs	r2, r3, r6
 80060ea:	d004      	beq.n	80060f6 <_dtoa_r+0x7b6>
 80060ec:	4651      	mov	r1, sl
 80060ee:	4620      	mov	r0, r4
 80060f0:	f000 fd18 	bl	8006b24 <__pow5mult>
 80060f4:	4682      	mov	sl, r0
 80060f6:	2101      	movs	r1, #1
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 fc53 	bl	80069a4 <__i2b>
 80060fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006100:	2b00      	cmp	r3, #0
 8006102:	4606      	mov	r6, r0
 8006104:	f340 8081 	ble.w	800620a <_dtoa_r+0x8ca>
 8006108:	461a      	mov	r2, r3
 800610a:	4601      	mov	r1, r0
 800610c:	4620      	mov	r0, r4
 800610e:	f000 fd09 	bl	8006b24 <__pow5mult>
 8006112:	9b07      	ldr	r3, [sp, #28]
 8006114:	2b01      	cmp	r3, #1
 8006116:	4606      	mov	r6, r0
 8006118:	dd7a      	ble.n	8006210 <_dtoa_r+0x8d0>
 800611a:	f04f 0800 	mov.w	r8, #0
 800611e:	6933      	ldr	r3, [r6, #16]
 8006120:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006124:	6918      	ldr	r0, [r3, #16]
 8006126:	f000 fbef 	bl	8006908 <__hi0bits>
 800612a:	f1c0 0020 	rsb	r0, r0, #32
 800612e:	9b06      	ldr	r3, [sp, #24]
 8006130:	4418      	add	r0, r3
 8006132:	f010 001f 	ands.w	r0, r0, #31
 8006136:	f000 8094 	beq.w	8006262 <_dtoa_r+0x922>
 800613a:	f1c0 0320 	rsb	r3, r0, #32
 800613e:	2b04      	cmp	r3, #4
 8006140:	f340 8085 	ble.w	800624e <_dtoa_r+0x90e>
 8006144:	9b05      	ldr	r3, [sp, #20]
 8006146:	f1c0 001c 	rsb	r0, r0, #28
 800614a:	4403      	add	r3, r0
 800614c:	9305      	str	r3, [sp, #20]
 800614e:	9b06      	ldr	r3, [sp, #24]
 8006150:	4403      	add	r3, r0
 8006152:	4405      	add	r5, r0
 8006154:	9306      	str	r3, [sp, #24]
 8006156:	9b05      	ldr	r3, [sp, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	dd05      	ble.n	8006168 <_dtoa_r+0x828>
 800615c:	4651      	mov	r1, sl
 800615e:	461a      	mov	r2, r3
 8006160:	4620      	mov	r0, r4
 8006162:	f000 fd39 	bl	8006bd8 <__lshift>
 8006166:	4682      	mov	sl, r0
 8006168:	9b06      	ldr	r3, [sp, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	dd05      	ble.n	800617a <_dtoa_r+0x83a>
 800616e:	4631      	mov	r1, r6
 8006170:	461a      	mov	r2, r3
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fd30 	bl	8006bd8 <__lshift>
 8006178:	4606      	mov	r6, r0
 800617a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800617c:	2b00      	cmp	r3, #0
 800617e:	d072      	beq.n	8006266 <_dtoa_r+0x926>
 8006180:	4631      	mov	r1, r6
 8006182:	4650      	mov	r0, sl
 8006184:	f000 fd94 	bl	8006cb0 <__mcmp>
 8006188:	2800      	cmp	r0, #0
 800618a:	da6c      	bge.n	8006266 <_dtoa_r+0x926>
 800618c:	2300      	movs	r3, #0
 800618e:	4651      	mov	r1, sl
 8006190:	220a      	movs	r2, #10
 8006192:	4620      	mov	r0, r4
 8006194:	f000 fb28 	bl	80067e8 <__multadd>
 8006198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800619a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800619e:	4682      	mov	sl, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 81b0 	beq.w	8006506 <_dtoa_r+0xbc6>
 80061a6:	2300      	movs	r3, #0
 80061a8:	4639      	mov	r1, r7
 80061aa:	220a      	movs	r2, #10
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 fb1b 	bl	80067e8 <__multadd>
 80061b2:	9b01      	ldr	r3, [sp, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	4607      	mov	r7, r0
 80061b8:	f300 8096 	bgt.w	80062e8 <_dtoa_r+0x9a8>
 80061bc:	9b07      	ldr	r3, [sp, #28]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	dc59      	bgt.n	8006276 <_dtoa_r+0x936>
 80061c2:	e091      	b.n	80062e8 <_dtoa_r+0x9a8>
 80061c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80061c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80061ca:	e758      	b.n	800607e <_dtoa_r+0x73e>
 80061cc:	9b04      	ldr	r3, [sp, #16]
 80061ce:	1e5e      	subs	r6, r3, #1
 80061d0:	9b08      	ldr	r3, [sp, #32]
 80061d2:	42b3      	cmp	r3, r6
 80061d4:	bfbf      	itttt	lt
 80061d6:	9b08      	ldrlt	r3, [sp, #32]
 80061d8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80061da:	9608      	strlt	r6, [sp, #32]
 80061dc:	1af3      	sublt	r3, r6, r3
 80061de:	bfb4      	ite	lt
 80061e0:	18d2      	addlt	r2, r2, r3
 80061e2:	1b9e      	subge	r6, r3, r6
 80061e4:	9b04      	ldr	r3, [sp, #16]
 80061e6:	bfbc      	itt	lt
 80061e8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80061ea:	2600      	movlt	r6, #0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	bfb7      	itett	lt
 80061f0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80061f4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80061f8:	1a9d      	sublt	r5, r3, r2
 80061fa:	2300      	movlt	r3, #0
 80061fc:	e741      	b.n	8006082 <_dtoa_r+0x742>
 80061fe:	9e08      	ldr	r6, [sp, #32]
 8006200:	9d05      	ldr	r5, [sp, #20]
 8006202:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006204:	e748      	b.n	8006098 <_dtoa_r+0x758>
 8006206:	9a08      	ldr	r2, [sp, #32]
 8006208:	e770      	b.n	80060ec <_dtoa_r+0x7ac>
 800620a:	9b07      	ldr	r3, [sp, #28]
 800620c:	2b01      	cmp	r3, #1
 800620e:	dc19      	bgt.n	8006244 <_dtoa_r+0x904>
 8006210:	9b02      	ldr	r3, [sp, #8]
 8006212:	b9bb      	cbnz	r3, 8006244 <_dtoa_r+0x904>
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800621a:	b99b      	cbnz	r3, 8006244 <_dtoa_r+0x904>
 800621c:	9b03      	ldr	r3, [sp, #12]
 800621e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006222:	0d1b      	lsrs	r3, r3, #20
 8006224:	051b      	lsls	r3, r3, #20
 8006226:	b183      	cbz	r3, 800624a <_dtoa_r+0x90a>
 8006228:	9b05      	ldr	r3, [sp, #20]
 800622a:	3301      	adds	r3, #1
 800622c:	9305      	str	r3, [sp, #20]
 800622e:	9b06      	ldr	r3, [sp, #24]
 8006230:	3301      	adds	r3, #1
 8006232:	9306      	str	r3, [sp, #24]
 8006234:	f04f 0801 	mov.w	r8, #1
 8006238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800623a:	2b00      	cmp	r3, #0
 800623c:	f47f af6f 	bne.w	800611e <_dtoa_r+0x7de>
 8006240:	2001      	movs	r0, #1
 8006242:	e774      	b.n	800612e <_dtoa_r+0x7ee>
 8006244:	f04f 0800 	mov.w	r8, #0
 8006248:	e7f6      	b.n	8006238 <_dtoa_r+0x8f8>
 800624a:	4698      	mov	r8, r3
 800624c:	e7f4      	b.n	8006238 <_dtoa_r+0x8f8>
 800624e:	d082      	beq.n	8006156 <_dtoa_r+0x816>
 8006250:	9a05      	ldr	r2, [sp, #20]
 8006252:	331c      	adds	r3, #28
 8006254:	441a      	add	r2, r3
 8006256:	9205      	str	r2, [sp, #20]
 8006258:	9a06      	ldr	r2, [sp, #24]
 800625a:	441a      	add	r2, r3
 800625c:	441d      	add	r5, r3
 800625e:	9206      	str	r2, [sp, #24]
 8006260:	e779      	b.n	8006156 <_dtoa_r+0x816>
 8006262:	4603      	mov	r3, r0
 8006264:	e7f4      	b.n	8006250 <_dtoa_r+0x910>
 8006266:	9b04      	ldr	r3, [sp, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	dc37      	bgt.n	80062dc <_dtoa_r+0x99c>
 800626c:	9b07      	ldr	r3, [sp, #28]
 800626e:	2b02      	cmp	r3, #2
 8006270:	dd34      	ble.n	80062dc <_dtoa_r+0x99c>
 8006272:	9b04      	ldr	r3, [sp, #16]
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	9b01      	ldr	r3, [sp, #4]
 8006278:	b963      	cbnz	r3, 8006294 <_dtoa_r+0x954>
 800627a:	4631      	mov	r1, r6
 800627c:	2205      	movs	r2, #5
 800627e:	4620      	mov	r0, r4
 8006280:	f000 fab2 	bl	80067e8 <__multadd>
 8006284:	4601      	mov	r1, r0
 8006286:	4606      	mov	r6, r0
 8006288:	4650      	mov	r0, sl
 800628a:	f000 fd11 	bl	8006cb0 <__mcmp>
 800628e:	2800      	cmp	r0, #0
 8006290:	f73f adbb 	bgt.w	8005e0a <_dtoa_r+0x4ca>
 8006294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006296:	9d00      	ldr	r5, [sp, #0]
 8006298:	ea6f 0b03 	mvn.w	fp, r3
 800629c:	f04f 0800 	mov.w	r8, #0
 80062a0:	4631      	mov	r1, r6
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 fa7e 	bl	80067a4 <_Bfree>
 80062a8:	2f00      	cmp	r7, #0
 80062aa:	f43f aeab 	beq.w	8006004 <_dtoa_r+0x6c4>
 80062ae:	f1b8 0f00 	cmp.w	r8, #0
 80062b2:	d005      	beq.n	80062c0 <_dtoa_r+0x980>
 80062b4:	45b8      	cmp	r8, r7
 80062b6:	d003      	beq.n	80062c0 <_dtoa_r+0x980>
 80062b8:	4641      	mov	r1, r8
 80062ba:	4620      	mov	r0, r4
 80062bc:	f000 fa72 	bl	80067a4 <_Bfree>
 80062c0:	4639      	mov	r1, r7
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 fa6e 	bl	80067a4 <_Bfree>
 80062c8:	e69c      	b.n	8006004 <_dtoa_r+0x6c4>
 80062ca:	2600      	movs	r6, #0
 80062cc:	4637      	mov	r7, r6
 80062ce:	e7e1      	b.n	8006294 <_dtoa_r+0x954>
 80062d0:	46bb      	mov	fp, r7
 80062d2:	4637      	mov	r7, r6
 80062d4:	e599      	b.n	8005e0a <_dtoa_r+0x4ca>
 80062d6:	bf00      	nop
 80062d8:	40240000 	.word	0x40240000
 80062dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 80c8 	beq.w	8006474 <_dtoa_r+0xb34>
 80062e4:	9b04      	ldr	r3, [sp, #16]
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	2d00      	cmp	r5, #0
 80062ea:	dd05      	ble.n	80062f8 <_dtoa_r+0x9b8>
 80062ec:	4639      	mov	r1, r7
 80062ee:	462a      	mov	r2, r5
 80062f0:	4620      	mov	r0, r4
 80062f2:	f000 fc71 	bl	8006bd8 <__lshift>
 80062f6:	4607      	mov	r7, r0
 80062f8:	f1b8 0f00 	cmp.w	r8, #0
 80062fc:	d05b      	beq.n	80063b6 <_dtoa_r+0xa76>
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	4620      	mov	r0, r4
 8006302:	f000 fa0f 	bl	8006724 <_Balloc>
 8006306:	4605      	mov	r5, r0
 8006308:	b928      	cbnz	r0, 8006316 <_dtoa_r+0x9d6>
 800630a:	4b83      	ldr	r3, [pc, #524]	; (8006518 <_dtoa_r+0xbd8>)
 800630c:	4602      	mov	r2, r0
 800630e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006312:	f7ff bb2e 	b.w	8005972 <_dtoa_r+0x32>
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	3202      	adds	r2, #2
 800631a:	0092      	lsls	r2, r2, #2
 800631c:	f107 010c 	add.w	r1, r7, #12
 8006320:	300c      	adds	r0, #12
 8006322:	f002 f94d 	bl	80085c0 <memcpy>
 8006326:	2201      	movs	r2, #1
 8006328:	4629      	mov	r1, r5
 800632a:	4620      	mov	r0, r4
 800632c:	f000 fc54 	bl	8006bd8 <__lshift>
 8006330:	9b00      	ldr	r3, [sp, #0]
 8006332:	3301      	adds	r3, #1
 8006334:	9304      	str	r3, [sp, #16]
 8006336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800633a:	4413      	add	r3, r2
 800633c:	9308      	str	r3, [sp, #32]
 800633e:	9b02      	ldr	r3, [sp, #8]
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	46b8      	mov	r8, r7
 8006346:	9306      	str	r3, [sp, #24]
 8006348:	4607      	mov	r7, r0
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	4631      	mov	r1, r6
 800634e:	3b01      	subs	r3, #1
 8006350:	4650      	mov	r0, sl
 8006352:	9301      	str	r3, [sp, #4]
 8006354:	f7ff fa6c 	bl	8005830 <quorem>
 8006358:	4641      	mov	r1, r8
 800635a:	9002      	str	r0, [sp, #8]
 800635c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006360:	4650      	mov	r0, sl
 8006362:	f000 fca5 	bl	8006cb0 <__mcmp>
 8006366:	463a      	mov	r2, r7
 8006368:	9005      	str	r0, [sp, #20]
 800636a:	4631      	mov	r1, r6
 800636c:	4620      	mov	r0, r4
 800636e:	f000 fcbb 	bl	8006ce8 <__mdiff>
 8006372:	68c2      	ldr	r2, [r0, #12]
 8006374:	4605      	mov	r5, r0
 8006376:	bb02      	cbnz	r2, 80063ba <_dtoa_r+0xa7a>
 8006378:	4601      	mov	r1, r0
 800637a:	4650      	mov	r0, sl
 800637c:	f000 fc98 	bl	8006cb0 <__mcmp>
 8006380:	4602      	mov	r2, r0
 8006382:	4629      	mov	r1, r5
 8006384:	4620      	mov	r0, r4
 8006386:	9209      	str	r2, [sp, #36]	; 0x24
 8006388:	f000 fa0c 	bl	80067a4 <_Bfree>
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006390:	9d04      	ldr	r5, [sp, #16]
 8006392:	ea43 0102 	orr.w	r1, r3, r2
 8006396:	9b06      	ldr	r3, [sp, #24]
 8006398:	4319      	orrs	r1, r3
 800639a:	d110      	bne.n	80063be <_dtoa_r+0xa7e>
 800639c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80063a0:	d029      	beq.n	80063f6 <_dtoa_r+0xab6>
 80063a2:	9b05      	ldr	r3, [sp, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	dd02      	ble.n	80063ae <_dtoa_r+0xa6e>
 80063a8:	9b02      	ldr	r3, [sp, #8]
 80063aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80063ae:	9b01      	ldr	r3, [sp, #4]
 80063b0:	f883 9000 	strb.w	r9, [r3]
 80063b4:	e774      	b.n	80062a0 <_dtoa_r+0x960>
 80063b6:	4638      	mov	r0, r7
 80063b8:	e7ba      	b.n	8006330 <_dtoa_r+0x9f0>
 80063ba:	2201      	movs	r2, #1
 80063bc:	e7e1      	b.n	8006382 <_dtoa_r+0xa42>
 80063be:	9b05      	ldr	r3, [sp, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	db04      	blt.n	80063ce <_dtoa_r+0xa8e>
 80063c4:	9907      	ldr	r1, [sp, #28]
 80063c6:	430b      	orrs	r3, r1
 80063c8:	9906      	ldr	r1, [sp, #24]
 80063ca:	430b      	orrs	r3, r1
 80063cc:	d120      	bne.n	8006410 <_dtoa_r+0xad0>
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	dded      	ble.n	80063ae <_dtoa_r+0xa6e>
 80063d2:	4651      	mov	r1, sl
 80063d4:	2201      	movs	r2, #1
 80063d6:	4620      	mov	r0, r4
 80063d8:	f000 fbfe 	bl	8006bd8 <__lshift>
 80063dc:	4631      	mov	r1, r6
 80063de:	4682      	mov	sl, r0
 80063e0:	f000 fc66 	bl	8006cb0 <__mcmp>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	dc03      	bgt.n	80063f0 <_dtoa_r+0xab0>
 80063e8:	d1e1      	bne.n	80063ae <_dtoa_r+0xa6e>
 80063ea:	f019 0f01 	tst.w	r9, #1
 80063ee:	d0de      	beq.n	80063ae <_dtoa_r+0xa6e>
 80063f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80063f4:	d1d8      	bne.n	80063a8 <_dtoa_r+0xa68>
 80063f6:	9a01      	ldr	r2, [sp, #4]
 80063f8:	2339      	movs	r3, #57	; 0x39
 80063fa:	7013      	strb	r3, [r2, #0]
 80063fc:	462b      	mov	r3, r5
 80063fe:	461d      	mov	r5, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006406:	2a39      	cmp	r2, #57	; 0x39
 8006408:	d06c      	beq.n	80064e4 <_dtoa_r+0xba4>
 800640a:	3201      	adds	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	e747      	b.n	80062a0 <_dtoa_r+0x960>
 8006410:	2a00      	cmp	r2, #0
 8006412:	dd07      	ble.n	8006424 <_dtoa_r+0xae4>
 8006414:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006418:	d0ed      	beq.n	80063f6 <_dtoa_r+0xab6>
 800641a:	9a01      	ldr	r2, [sp, #4]
 800641c:	f109 0301 	add.w	r3, r9, #1
 8006420:	7013      	strb	r3, [r2, #0]
 8006422:	e73d      	b.n	80062a0 <_dtoa_r+0x960>
 8006424:	9b04      	ldr	r3, [sp, #16]
 8006426:	9a08      	ldr	r2, [sp, #32]
 8006428:	f803 9c01 	strb.w	r9, [r3, #-1]
 800642c:	4293      	cmp	r3, r2
 800642e:	d043      	beq.n	80064b8 <_dtoa_r+0xb78>
 8006430:	4651      	mov	r1, sl
 8006432:	2300      	movs	r3, #0
 8006434:	220a      	movs	r2, #10
 8006436:	4620      	mov	r0, r4
 8006438:	f000 f9d6 	bl	80067e8 <__multadd>
 800643c:	45b8      	cmp	r8, r7
 800643e:	4682      	mov	sl, r0
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	f04f 020a 	mov.w	r2, #10
 8006448:	4641      	mov	r1, r8
 800644a:	4620      	mov	r0, r4
 800644c:	d107      	bne.n	800645e <_dtoa_r+0xb1e>
 800644e:	f000 f9cb 	bl	80067e8 <__multadd>
 8006452:	4680      	mov	r8, r0
 8006454:	4607      	mov	r7, r0
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	3301      	adds	r3, #1
 800645a:	9304      	str	r3, [sp, #16]
 800645c:	e775      	b.n	800634a <_dtoa_r+0xa0a>
 800645e:	f000 f9c3 	bl	80067e8 <__multadd>
 8006462:	4639      	mov	r1, r7
 8006464:	4680      	mov	r8, r0
 8006466:	2300      	movs	r3, #0
 8006468:	220a      	movs	r2, #10
 800646a:	4620      	mov	r0, r4
 800646c:	f000 f9bc 	bl	80067e8 <__multadd>
 8006470:	4607      	mov	r7, r0
 8006472:	e7f0      	b.n	8006456 <_dtoa_r+0xb16>
 8006474:	9b04      	ldr	r3, [sp, #16]
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	9d00      	ldr	r5, [sp, #0]
 800647a:	4631      	mov	r1, r6
 800647c:	4650      	mov	r0, sl
 800647e:	f7ff f9d7 	bl	8005830 <quorem>
 8006482:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006486:	9b00      	ldr	r3, [sp, #0]
 8006488:	f805 9b01 	strb.w	r9, [r5], #1
 800648c:	1aea      	subs	r2, r5, r3
 800648e:	9b01      	ldr	r3, [sp, #4]
 8006490:	4293      	cmp	r3, r2
 8006492:	dd07      	ble.n	80064a4 <_dtoa_r+0xb64>
 8006494:	4651      	mov	r1, sl
 8006496:	2300      	movs	r3, #0
 8006498:	220a      	movs	r2, #10
 800649a:	4620      	mov	r0, r4
 800649c:	f000 f9a4 	bl	80067e8 <__multadd>
 80064a0:	4682      	mov	sl, r0
 80064a2:	e7ea      	b.n	800647a <_dtoa_r+0xb3a>
 80064a4:	9b01      	ldr	r3, [sp, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	bfc8      	it	gt
 80064aa:	461d      	movgt	r5, r3
 80064ac:	9b00      	ldr	r3, [sp, #0]
 80064ae:	bfd8      	it	le
 80064b0:	2501      	movle	r5, #1
 80064b2:	441d      	add	r5, r3
 80064b4:	f04f 0800 	mov.w	r8, #0
 80064b8:	4651      	mov	r1, sl
 80064ba:	2201      	movs	r2, #1
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 fb8b 	bl	8006bd8 <__lshift>
 80064c2:	4631      	mov	r1, r6
 80064c4:	4682      	mov	sl, r0
 80064c6:	f000 fbf3 	bl	8006cb0 <__mcmp>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	dc96      	bgt.n	80063fc <_dtoa_r+0xabc>
 80064ce:	d102      	bne.n	80064d6 <_dtoa_r+0xb96>
 80064d0:	f019 0f01 	tst.w	r9, #1
 80064d4:	d192      	bne.n	80063fc <_dtoa_r+0xabc>
 80064d6:	462b      	mov	r3, r5
 80064d8:	461d      	mov	r5, r3
 80064da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064de:	2a30      	cmp	r2, #48	; 0x30
 80064e0:	d0fa      	beq.n	80064d8 <_dtoa_r+0xb98>
 80064e2:	e6dd      	b.n	80062a0 <_dtoa_r+0x960>
 80064e4:	9a00      	ldr	r2, [sp, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d189      	bne.n	80063fe <_dtoa_r+0xabe>
 80064ea:	f10b 0b01 	add.w	fp, fp, #1
 80064ee:	2331      	movs	r3, #49	; 0x31
 80064f0:	e796      	b.n	8006420 <_dtoa_r+0xae0>
 80064f2:	4b0a      	ldr	r3, [pc, #40]	; (800651c <_dtoa_r+0xbdc>)
 80064f4:	f7ff ba99 	b.w	8005a2a <_dtoa_r+0xea>
 80064f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f47f aa6d 	bne.w	80059da <_dtoa_r+0x9a>
 8006500:	4b07      	ldr	r3, [pc, #28]	; (8006520 <_dtoa_r+0xbe0>)
 8006502:	f7ff ba92 	b.w	8005a2a <_dtoa_r+0xea>
 8006506:	9b01      	ldr	r3, [sp, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	dcb5      	bgt.n	8006478 <_dtoa_r+0xb38>
 800650c:	9b07      	ldr	r3, [sp, #28]
 800650e:	2b02      	cmp	r3, #2
 8006510:	f73f aeb1 	bgt.w	8006276 <_dtoa_r+0x936>
 8006514:	e7b0      	b.n	8006478 <_dtoa_r+0xb38>
 8006516:	bf00      	nop
 8006518:	08008fbd 	.word	0x08008fbd
 800651c:	08008f18 	.word	0x08008f18
 8006520:	08008f41 	.word	0x08008f41

08006524 <_free_r>:
 8006524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006526:	2900      	cmp	r1, #0
 8006528:	d044      	beq.n	80065b4 <_free_r+0x90>
 800652a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800652e:	9001      	str	r0, [sp, #4]
 8006530:	2b00      	cmp	r3, #0
 8006532:	f1a1 0404 	sub.w	r4, r1, #4
 8006536:	bfb8      	it	lt
 8006538:	18e4      	addlt	r4, r4, r3
 800653a:	f000 f8e7 	bl	800670c <__malloc_lock>
 800653e:	4a1e      	ldr	r2, [pc, #120]	; (80065b8 <_free_r+0x94>)
 8006540:	9801      	ldr	r0, [sp, #4]
 8006542:	6813      	ldr	r3, [r2, #0]
 8006544:	b933      	cbnz	r3, 8006554 <_free_r+0x30>
 8006546:	6063      	str	r3, [r4, #4]
 8006548:	6014      	str	r4, [r2, #0]
 800654a:	b003      	add	sp, #12
 800654c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006550:	f000 b8e2 	b.w	8006718 <__malloc_unlock>
 8006554:	42a3      	cmp	r3, r4
 8006556:	d908      	bls.n	800656a <_free_r+0x46>
 8006558:	6825      	ldr	r5, [r4, #0]
 800655a:	1961      	adds	r1, r4, r5
 800655c:	428b      	cmp	r3, r1
 800655e:	bf01      	itttt	eq
 8006560:	6819      	ldreq	r1, [r3, #0]
 8006562:	685b      	ldreq	r3, [r3, #4]
 8006564:	1949      	addeq	r1, r1, r5
 8006566:	6021      	streq	r1, [r4, #0]
 8006568:	e7ed      	b.n	8006546 <_free_r+0x22>
 800656a:	461a      	mov	r2, r3
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	b10b      	cbz	r3, 8006574 <_free_r+0x50>
 8006570:	42a3      	cmp	r3, r4
 8006572:	d9fa      	bls.n	800656a <_free_r+0x46>
 8006574:	6811      	ldr	r1, [r2, #0]
 8006576:	1855      	adds	r5, r2, r1
 8006578:	42a5      	cmp	r5, r4
 800657a:	d10b      	bne.n	8006594 <_free_r+0x70>
 800657c:	6824      	ldr	r4, [r4, #0]
 800657e:	4421      	add	r1, r4
 8006580:	1854      	adds	r4, r2, r1
 8006582:	42a3      	cmp	r3, r4
 8006584:	6011      	str	r1, [r2, #0]
 8006586:	d1e0      	bne.n	800654a <_free_r+0x26>
 8006588:	681c      	ldr	r4, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	6053      	str	r3, [r2, #4]
 800658e:	440c      	add	r4, r1
 8006590:	6014      	str	r4, [r2, #0]
 8006592:	e7da      	b.n	800654a <_free_r+0x26>
 8006594:	d902      	bls.n	800659c <_free_r+0x78>
 8006596:	230c      	movs	r3, #12
 8006598:	6003      	str	r3, [r0, #0]
 800659a:	e7d6      	b.n	800654a <_free_r+0x26>
 800659c:	6825      	ldr	r5, [r4, #0]
 800659e:	1961      	adds	r1, r4, r5
 80065a0:	428b      	cmp	r3, r1
 80065a2:	bf04      	itt	eq
 80065a4:	6819      	ldreq	r1, [r3, #0]
 80065a6:	685b      	ldreq	r3, [r3, #4]
 80065a8:	6063      	str	r3, [r4, #4]
 80065aa:	bf04      	itt	eq
 80065ac:	1949      	addeq	r1, r1, r5
 80065ae:	6021      	streq	r1, [r4, #0]
 80065b0:	6054      	str	r4, [r2, #4]
 80065b2:	e7ca      	b.n	800654a <_free_r+0x26>
 80065b4:	b003      	add	sp, #12
 80065b6:	bd30      	pop	{r4, r5, pc}
 80065b8:	20000474 	.word	0x20000474

080065bc <malloc>:
 80065bc:	4b02      	ldr	r3, [pc, #8]	; (80065c8 <malloc+0xc>)
 80065be:	4601      	mov	r1, r0
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	f000 b823 	b.w	800660c <_malloc_r>
 80065c6:	bf00      	nop
 80065c8:	20000064 	.word	0x20000064

080065cc <sbrk_aligned>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4e0e      	ldr	r6, [pc, #56]	; (8006608 <sbrk_aligned+0x3c>)
 80065d0:	460c      	mov	r4, r1
 80065d2:	6831      	ldr	r1, [r6, #0]
 80065d4:	4605      	mov	r5, r0
 80065d6:	b911      	cbnz	r1, 80065de <sbrk_aligned+0x12>
 80065d8:	f001 ffe2 	bl	80085a0 <_sbrk_r>
 80065dc:	6030      	str	r0, [r6, #0]
 80065de:	4621      	mov	r1, r4
 80065e0:	4628      	mov	r0, r5
 80065e2:	f001 ffdd 	bl	80085a0 <_sbrk_r>
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	d00a      	beq.n	8006600 <sbrk_aligned+0x34>
 80065ea:	1cc4      	adds	r4, r0, #3
 80065ec:	f024 0403 	bic.w	r4, r4, #3
 80065f0:	42a0      	cmp	r0, r4
 80065f2:	d007      	beq.n	8006604 <sbrk_aligned+0x38>
 80065f4:	1a21      	subs	r1, r4, r0
 80065f6:	4628      	mov	r0, r5
 80065f8:	f001 ffd2 	bl	80085a0 <_sbrk_r>
 80065fc:	3001      	adds	r0, #1
 80065fe:	d101      	bne.n	8006604 <sbrk_aligned+0x38>
 8006600:	f04f 34ff 	mov.w	r4, #4294967295
 8006604:	4620      	mov	r0, r4
 8006606:	bd70      	pop	{r4, r5, r6, pc}
 8006608:	20000478 	.word	0x20000478

0800660c <_malloc_r>:
 800660c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006610:	1ccd      	adds	r5, r1, #3
 8006612:	f025 0503 	bic.w	r5, r5, #3
 8006616:	3508      	adds	r5, #8
 8006618:	2d0c      	cmp	r5, #12
 800661a:	bf38      	it	cc
 800661c:	250c      	movcc	r5, #12
 800661e:	2d00      	cmp	r5, #0
 8006620:	4607      	mov	r7, r0
 8006622:	db01      	blt.n	8006628 <_malloc_r+0x1c>
 8006624:	42a9      	cmp	r1, r5
 8006626:	d905      	bls.n	8006634 <_malloc_r+0x28>
 8006628:	230c      	movs	r3, #12
 800662a:	603b      	str	r3, [r7, #0]
 800662c:	2600      	movs	r6, #0
 800662e:	4630      	mov	r0, r6
 8006630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006634:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006708 <_malloc_r+0xfc>
 8006638:	f000 f868 	bl	800670c <__malloc_lock>
 800663c:	f8d8 3000 	ldr.w	r3, [r8]
 8006640:	461c      	mov	r4, r3
 8006642:	bb5c      	cbnz	r4, 800669c <_malloc_r+0x90>
 8006644:	4629      	mov	r1, r5
 8006646:	4638      	mov	r0, r7
 8006648:	f7ff ffc0 	bl	80065cc <sbrk_aligned>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	4604      	mov	r4, r0
 8006650:	d155      	bne.n	80066fe <_malloc_r+0xf2>
 8006652:	f8d8 4000 	ldr.w	r4, [r8]
 8006656:	4626      	mov	r6, r4
 8006658:	2e00      	cmp	r6, #0
 800665a:	d145      	bne.n	80066e8 <_malloc_r+0xdc>
 800665c:	2c00      	cmp	r4, #0
 800665e:	d048      	beq.n	80066f2 <_malloc_r+0xe6>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	4631      	mov	r1, r6
 8006664:	4638      	mov	r0, r7
 8006666:	eb04 0903 	add.w	r9, r4, r3
 800666a:	f001 ff99 	bl	80085a0 <_sbrk_r>
 800666e:	4581      	cmp	r9, r0
 8006670:	d13f      	bne.n	80066f2 <_malloc_r+0xe6>
 8006672:	6821      	ldr	r1, [r4, #0]
 8006674:	1a6d      	subs	r5, r5, r1
 8006676:	4629      	mov	r1, r5
 8006678:	4638      	mov	r0, r7
 800667a:	f7ff ffa7 	bl	80065cc <sbrk_aligned>
 800667e:	3001      	adds	r0, #1
 8006680:	d037      	beq.n	80066f2 <_malloc_r+0xe6>
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	442b      	add	r3, r5
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	f8d8 3000 	ldr.w	r3, [r8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d038      	beq.n	8006702 <_malloc_r+0xf6>
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	42a2      	cmp	r2, r4
 8006694:	d12b      	bne.n	80066ee <_malloc_r+0xe2>
 8006696:	2200      	movs	r2, #0
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	e00f      	b.n	80066bc <_malloc_r+0xb0>
 800669c:	6822      	ldr	r2, [r4, #0]
 800669e:	1b52      	subs	r2, r2, r5
 80066a0:	d41f      	bmi.n	80066e2 <_malloc_r+0xd6>
 80066a2:	2a0b      	cmp	r2, #11
 80066a4:	d917      	bls.n	80066d6 <_malloc_r+0xca>
 80066a6:	1961      	adds	r1, r4, r5
 80066a8:	42a3      	cmp	r3, r4
 80066aa:	6025      	str	r5, [r4, #0]
 80066ac:	bf18      	it	ne
 80066ae:	6059      	strne	r1, [r3, #4]
 80066b0:	6863      	ldr	r3, [r4, #4]
 80066b2:	bf08      	it	eq
 80066b4:	f8c8 1000 	streq.w	r1, [r8]
 80066b8:	5162      	str	r2, [r4, r5]
 80066ba:	604b      	str	r3, [r1, #4]
 80066bc:	4638      	mov	r0, r7
 80066be:	f104 060b 	add.w	r6, r4, #11
 80066c2:	f000 f829 	bl	8006718 <__malloc_unlock>
 80066c6:	f026 0607 	bic.w	r6, r6, #7
 80066ca:	1d23      	adds	r3, r4, #4
 80066cc:	1af2      	subs	r2, r6, r3
 80066ce:	d0ae      	beq.n	800662e <_malloc_r+0x22>
 80066d0:	1b9b      	subs	r3, r3, r6
 80066d2:	50a3      	str	r3, [r4, r2]
 80066d4:	e7ab      	b.n	800662e <_malloc_r+0x22>
 80066d6:	42a3      	cmp	r3, r4
 80066d8:	6862      	ldr	r2, [r4, #4]
 80066da:	d1dd      	bne.n	8006698 <_malloc_r+0x8c>
 80066dc:	f8c8 2000 	str.w	r2, [r8]
 80066e0:	e7ec      	b.n	80066bc <_malloc_r+0xb0>
 80066e2:	4623      	mov	r3, r4
 80066e4:	6864      	ldr	r4, [r4, #4]
 80066e6:	e7ac      	b.n	8006642 <_malloc_r+0x36>
 80066e8:	4634      	mov	r4, r6
 80066ea:	6876      	ldr	r6, [r6, #4]
 80066ec:	e7b4      	b.n	8006658 <_malloc_r+0x4c>
 80066ee:	4613      	mov	r3, r2
 80066f0:	e7cc      	b.n	800668c <_malloc_r+0x80>
 80066f2:	230c      	movs	r3, #12
 80066f4:	603b      	str	r3, [r7, #0]
 80066f6:	4638      	mov	r0, r7
 80066f8:	f000 f80e 	bl	8006718 <__malloc_unlock>
 80066fc:	e797      	b.n	800662e <_malloc_r+0x22>
 80066fe:	6025      	str	r5, [r4, #0]
 8006700:	e7dc      	b.n	80066bc <_malloc_r+0xb0>
 8006702:	605b      	str	r3, [r3, #4]
 8006704:	deff      	udf	#255	; 0xff
 8006706:	bf00      	nop
 8006708:	20000474 	.word	0x20000474

0800670c <__malloc_lock>:
 800670c:	4801      	ldr	r0, [pc, #4]	; (8006714 <__malloc_lock+0x8>)
 800670e:	f7ff b886 	b.w	800581e <__retarget_lock_acquire_recursive>
 8006712:	bf00      	nop
 8006714:	20000470 	.word	0x20000470

08006718 <__malloc_unlock>:
 8006718:	4801      	ldr	r0, [pc, #4]	; (8006720 <__malloc_unlock+0x8>)
 800671a:	f7ff b881 	b.w	8005820 <__retarget_lock_release_recursive>
 800671e:	bf00      	nop
 8006720:	20000470 	.word	0x20000470

08006724 <_Balloc>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	69c6      	ldr	r6, [r0, #28]
 8006728:	4604      	mov	r4, r0
 800672a:	460d      	mov	r5, r1
 800672c:	b976      	cbnz	r6, 800674c <_Balloc+0x28>
 800672e:	2010      	movs	r0, #16
 8006730:	f7ff ff44 	bl	80065bc <malloc>
 8006734:	4602      	mov	r2, r0
 8006736:	61e0      	str	r0, [r4, #28]
 8006738:	b920      	cbnz	r0, 8006744 <_Balloc+0x20>
 800673a:	4b18      	ldr	r3, [pc, #96]	; (800679c <_Balloc+0x78>)
 800673c:	4818      	ldr	r0, [pc, #96]	; (80067a0 <_Balloc+0x7c>)
 800673e:	216b      	movs	r1, #107	; 0x6b
 8006740:	f001 ff56 	bl	80085f0 <__assert_func>
 8006744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006748:	6006      	str	r6, [r0, #0]
 800674a:	60c6      	str	r6, [r0, #12]
 800674c:	69e6      	ldr	r6, [r4, #28]
 800674e:	68f3      	ldr	r3, [r6, #12]
 8006750:	b183      	cbz	r3, 8006774 <_Balloc+0x50>
 8006752:	69e3      	ldr	r3, [r4, #28]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800675a:	b9b8      	cbnz	r0, 800678c <_Balloc+0x68>
 800675c:	2101      	movs	r1, #1
 800675e:	fa01 f605 	lsl.w	r6, r1, r5
 8006762:	1d72      	adds	r2, r6, #5
 8006764:	0092      	lsls	r2, r2, #2
 8006766:	4620      	mov	r0, r4
 8006768:	f001 ff60 	bl	800862c <_calloc_r>
 800676c:	b160      	cbz	r0, 8006788 <_Balloc+0x64>
 800676e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006772:	e00e      	b.n	8006792 <_Balloc+0x6e>
 8006774:	2221      	movs	r2, #33	; 0x21
 8006776:	2104      	movs	r1, #4
 8006778:	4620      	mov	r0, r4
 800677a:	f001 ff57 	bl	800862c <_calloc_r>
 800677e:	69e3      	ldr	r3, [r4, #28]
 8006780:	60f0      	str	r0, [r6, #12]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e4      	bne.n	8006752 <_Balloc+0x2e>
 8006788:	2000      	movs	r0, #0
 800678a:	bd70      	pop	{r4, r5, r6, pc}
 800678c:	6802      	ldr	r2, [r0, #0]
 800678e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006792:	2300      	movs	r3, #0
 8006794:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006798:	e7f7      	b.n	800678a <_Balloc+0x66>
 800679a:	bf00      	nop
 800679c:	08008f4e 	.word	0x08008f4e
 80067a0:	08008fce 	.word	0x08008fce

080067a4 <_Bfree>:
 80067a4:	b570      	push	{r4, r5, r6, lr}
 80067a6:	69c6      	ldr	r6, [r0, #28]
 80067a8:	4605      	mov	r5, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	b976      	cbnz	r6, 80067cc <_Bfree+0x28>
 80067ae:	2010      	movs	r0, #16
 80067b0:	f7ff ff04 	bl	80065bc <malloc>
 80067b4:	4602      	mov	r2, r0
 80067b6:	61e8      	str	r0, [r5, #28]
 80067b8:	b920      	cbnz	r0, 80067c4 <_Bfree+0x20>
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <_Bfree+0x3c>)
 80067bc:	4809      	ldr	r0, [pc, #36]	; (80067e4 <_Bfree+0x40>)
 80067be:	218f      	movs	r1, #143	; 0x8f
 80067c0:	f001 ff16 	bl	80085f0 <__assert_func>
 80067c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067c8:	6006      	str	r6, [r0, #0]
 80067ca:	60c6      	str	r6, [r0, #12]
 80067cc:	b13c      	cbz	r4, 80067de <_Bfree+0x3a>
 80067ce:	69eb      	ldr	r3, [r5, #28]
 80067d0:	6862      	ldr	r2, [r4, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067d8:	6021      	str	r1, [r4, #0]
 80067da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	08008f4e 	.word	0x08008f4e
 80067e4:	08008fce 	.word	0x08008fce

080067e8 <__multadd>:
 80067e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067ec:	690d      	ldr	r5, [r1, #16]
 80067ee:	4607      	mov	r7, r0
 80067f0:	460c      	mov	r4, r1
 80067f2:	461e      	mov	r6, r3
 80067f4:	f101 0c14 	add.w	ip, r1, #20
 80067f8:	2000      	movs	r0, #0
 80067fa:	f8dc 3000 	ldr.w	r3, [ip]
 80067fe:	b299      	uxth	r1, r3
 8006800:	fb02 6101 	mla	r1, r2, r1, r6
 8006804:	0c1e      	lsrs	r6, r3, #16
 8006806:	0c0b      	lsrs	r3, r1, #16
 8006808:	fb02 3306 	mla	r3, r2, r6, r3
 800680c:	b289      	uxth	r1, r1
 800680e:	3001      	adds	r0, #1
 8006810:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006814:	4285      	cmp	r5, r0
 8006816:	f84c 1b04 	str.w	r1, [ip], #4
 800681a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800681e:	dcec      	bgt.n	80067fa <__multadd+0x12>
 8006820:	b30e      	cbz	r6, 8006866 <__multadd+0x7e>
 8006822:	68a3      	ldr	r3, [r4, #8]
 8006824:	42ab      	cmp	r3, r5
 8006826:	dc19      	bgt.n	800685c <__multadd+0x74>
 8006828:	6861      	ldr	r1, [r4, #4]
 800682a:	4638      	mov	r0, r7
 800682c:	3101      	adds	r1, #1
 800682e:	f7ff ff79 	bl	8006724 <_Balloc>
 8006832:	4680      	mov	r8, r0
 8006834:	b928      	cbnz	r0, 8006842 <__multadd+0x5a>
 8006836:	4602      	mov	r2, r0
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <__multadd+0x84>)
 800683a:	480d      	ldr	r0, [pc, #52]	; (8006870 <__multadd+0x88>)
 800683c:	21ba      	movs	r1, #186	; 0xba
 800683e:	f001 fed7 	bl	80085f0 <__assert_func>
 8006842:	6922      	ldr	r2, [r4, #16]
 8006844:	3202      	adds	r2, #2
 8006846:	f104 010c 	add.w	r1, r4, #12
 800684a:	0092      	lsls	r2, r2, #2
 800684c:	300c      	adds	r0, #12
 800684e:	f001 feb7 	bl	80085c0 <memcpy>
 8006852:	4621      	mov	r1, r4
 8006854:	4638      	mov	r0, r7
 8006856:	f7ff ffa5 	bl	80067a4 <_Bfree>
 800685a:	4644      	mov	r4, r8
 800685c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006860:	3501      	adds	r5, #1
 8006862:	615e      	str	r6, [r3, #20]
 8006864:	6125      	str	r5, [r4, #16]
 8006866:	4620      	mov	r0, r4
 8006868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800686c:	08008fbd 	.word	0x08008fbd
 8006870:	08008fce 	.word	0x08008fce

08006874 <__s2b>:
 8006874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006878:	460c      	mov	r4, r1
 800687a:	4615      	mov	r5, r2
 800687c:	461f      	mov	r7, r3
 800687e:	2209      	movs	r2, #9
 8006880:	3308      	adds	r3, #8
 8006882:	4606      	mov	r6, r0
 8006884:	fb93 f3f2 	sdiv	r3, r3, r2
 8006888:	2100      	movs	r1, #0
 800688a:	2201      	movs	r2, #1
 800688c:	429a      	cmp	r2, r3
 800688e:	db09      	blt.n	80068a4 <__s2b+0x30>
 8006890:	4630      	mov	r0, r6
 8006892:	f7ff ff47 	bl	8006724 <_Balloc>
 8006896:	b940      	cbnz	r0, 80068aa <__s2b+0x36>
 8006898:	4602      	mov	r2, r0
 800689a:	4b19      	ldr	r3, [pc, #100]	; (8006900 <__s2b+0x8c>)
 800689c:	4819      	ldr	r0, [pc, #100]	; (8006904 <__s2b+0x90>)
 800689e:	21d3      	movs	r1, #211	; 0xd3
 80068a0:	f001 fea6 	bl	80085f0 <__assert_func>
 80068a4:	0052      	lsls	r2, r2, #1
 80068a6:	3101      	adds	r1, #1
 80068a8:	e7f0      	b.n	800688c <__s2b+0x18>
 80068aa:	9b08      	ldr	r3, [sp, #32]
 80068ac:	6143      	str	r3, [r0, #20]
 80068ae:	2d09      	cmp	r5, #9
 80068b0:	f04f 0301 	mov.w	r3, #1
 80068b4:	6103      	str	r3, [r0, #16]
 80068b6:	dd16      	ble.n	80068e6 <__s2b+0x72>
 80068b8:	f104 0909 	add.w	r9, r4, #9
 80068bc:	46c8      	mov	r8, r9
 80068be:	442c      	add	r4, r5
 80068c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80068c4:	4601      	mov	r1, r0
 80068c6:	3b30      	subs	r3, #48	; 0x30
 80068c8:	220a      	movs	r2, #10
 80068ca:	4630      	mov	r0, r6
 80068cc:	f7ff ff8c 	bl	80067e8 <__multadd>
 80068d0:	45a0      	cmp	r8, r4
 80068d2:	d1f5      	bne.n	80068c0 <__s2b+0x4c>
 80068d4:	f1a5 0408 	sub.w	r4, r5, #8
 80068d8:	444c      	add	r4, r9
 80068da:	1b2d      	subs	r5, r5, r4
 80068dc:	1963      	adds	r3, r4, r5
 80068de:	42bb      	cmp	r3, r7
 80068e0:	db04      	blt.n	80068ec <__s2b+0x78>
 80068e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068e6:	340a      	adds	r4, #10
 80068e8:	2509      	movs	r5, #9
 80068ea:	e7f6      	b.n	80068da <__s2b+0x66>
 80068ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068f0:	4601      	mov	r1, r0
 80068f2:	3b30      	subs	r3, #48	; 0x30
 80068f4:	220a      	movs	r2, #10
 80068f6:	4630      	mov	r0, r6
 80068f8:	f7ff ff76 	bl	80067e8 <__multadd>
 80068fc:	e7ee      	b.n	80068dc <__s2b+0x68>
 80068fe:	bf00      	nop
 8006900:	08008fbd 	.word	0x08008fbd
 8006904:	08008fce 	.word	0x08008fce

08006908 <__hi0bits>:
 8006908:	0c03      	lsrs	r3, r0, #16
 800690a:	041b      	lsls	r3, r3, #16
 800690c:	b9d3      	cbnz	r3, 8006944 <__hi0bits+0x3c>
 800690e:	0400      	lsls	r0, r0, #16
 8006910:	2310      	movs	r3, #16
 8006912:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006916:	bf04      	itt	eq
 8006918:	0200      	lsleq	r0, r0, #8
 800691a:	3308      	addeq	r3, #8
 800691c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006920:	bf04      	itt	eq
 8006922:	0100      	lsleq	r0, r0, #4
 8006924:	3304      	addeq	r3, #4
 8006926:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800692a:	bf04      	itt	eq
 800692c:	0080      	lsleq	r0, r0, #2
 800692e:	3302      	addeq	r3, #2
 8006930:	2800      	cmp	r0, #0
 8006932:	db05      	blt.n	8006940 <__hi0bits+0x38>
 8006934:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006938:	f103 0301 	add.w	r3, r3, #1
 800693c:	bf08      	it	eq
 800693e:	2320      	moveq	r3, #32
 8006940:	4618      	mov	r0, r3
 8006942:	4770      	bx	lr
 8006944:	2300      	movs	r3, #0
 8006946:	e7e4      	b.n	8006912 <__hi0bits+0xa>

08006948 <__lo0bits>:
 8006948:	6803      	ldr	r3, [r0, #0]
 800694a:	f013 0207 	ands.w	r2, r3, #7
 800694e:	d00c      	beq.n	800696a <__lo0bits+0x22>
 8006950:	07d9      	lsls	r1, r3, #31
 8006952:	d422      	bmi.n	800699a <__lo0bits+0x52>
 8006954:	079a      	lsls	r2, r3, #30
 8006956:	bf49      	itett	mi
 8006958:	085b      	lsrmi	r3, r3, #1
 800695a:	089b      	lsrpl	r3, r3, #2
 800695c:	6003      	strmi	r3, [r0, #0]
 800695e:	2201      	movmi	r2, #1
 8006960:	bf5c      	itt	pl
 8006962:	6003      	strpl	r3, [r0, #0]
 8006964:	2202      	movpl	r2, #2
 8006966:	4610      	mov	r0, r2
 8006968:	4770      	bx	lr
 800696a:	b299      	uxth	r1, r3
 800696c:	b909      	cbnz	r1, 8006972 <__lo0bits+0x2a>
 800696e:	0c1b      	lsrs	r3, r3, #16
 8006970:	2210      	movs	r2, #16
 8006972:	b2d9      	uxtb	r1, r3
 8006974:	b909      	cbnz	r1, 800697a <__lo0bits+0x32>
 8006976:	3208      	adds	r2, #8
 8006978:	0a1b      	lsrs	r3, r3, #8
 800697a:	0719      	lsls	r1, r3, #28
 800697c:	bf04      	itt	eq
 800697e:	091b      	lsreq	r3, r3, #4
 8006980:	3204      	addeq	r2, #4
 8006982:	0799      	lsls	r1, r3, #30
 8006984:	bf04      	itt	eq
 8006986:	089b      	lsreq	r3, r3, #2
 8006988:	3202      	addeq	r2, #2
 800698a:	07d9      	lsls	r1, r3, #31
 800698c:	d403      	bmi.n	8006996 <__lo0bits+0x4e>
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	f102 0201 	add.w	r2, r2, #1
 8006994:	d003      	beq.n	800699e <__lo0bits+0x56>
 8006996:	6003      	str	r3, [r0, #0]
 8006998:	e7e5      	b.n	8006966 <__lo0bits+0x1e>
 800699a:	2200      	movs	r2, #0
 800699c:	e7e3      	b.n	8006966 <__lo0bits+0x1e>
 800699e:	2220      	movs	r2, #32
 80069a0:	e7e1      	b.n	8006966 <__lo0bits+0x1e>
	...

080069a4 <__i2b>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	460c      	mov	r4, r1
 80069a8:	2101      	movs	r1, #1
 80069aa:	f7ff febb 	bl	8006724 <_Balloc>
 80069ae:	4602      	mov	r2, r0
 80069b0:	b928      	cbnz	r0, 80069be <__i2b+0x1a>
 80069b2:	4b05      	ldr	r3, [pc, #20]	; (80069c8 <__i2b+0x24>)
 80069b4:	4805      	ldr	r0, [pc, #20]	; (80069cc <__i2b+0x28>)
 80069b6:	f240 1145 	movw	r1, #325	; 0x145
 80069ba:	f001 fe19 	bl	80085f0 <__assert_func>
 80069be:	2301      	movs	r3, #1
 80069c0:	6144      	str	r4, [r0, #20]
 80069c2:	6103      	str	r3, [r0, #16]
 80069c4:	bd10      	pop	{r4, pc}
 80069c6:	bf00      	nop
 80069c8:	08008fbd 	.word	0x08008fbd
 80069cc:	08008fce 	.word	0x08008fce

080069d0 <__multiply>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	4691      	mov	r9, r2
 80069d6:	690a      	ldr	r2, [r1, #16]
 80069d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069dc:	429a      	cmp	r2, r3
 80069de:	bfb8      	it	lt
 80069e0:	460b      	movlt	r3, r1
 80069e2:	460c      	mov	r4, r1
 80069e4:	bfbc      	itt	lt
 80069e6:	464c      	movlt	r4, r9
 80069e8:	4699      	movlt	r9, r3
 80069ea:	6927      	ldr	r7, [r4, #16]
 80069ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80069f0:	68a3      	ldr	r3, [r4, #8]
 80069f2:	6861      	ldr	r1, [r4, #4]
 80069f4:	eb07 060a 	add.w	r6, r7, sl
 80069f8:	42b3      	cmp	r3, r6
 80069fa:	b085      	sub	sp, #20
 80069fc:	bfb8      	it	lt
 80069fe:	3101      	addlt	r1, #1
 8006a00:	f7ff fe90 	bl	8006724 <_Balloc>
 8006a04:	b930      	cbnz	r0, 8006a14 <__multiply+0x44>
 8006a06:	4602      	mov	r2, r0
 8006a08:	4b44      	ldr	r3, [pc, #272]	; (8006b1c <__multiply+0x14c>)
 8006a0a:	4845      	ldr	r0, [pc, #276]	; (8006b20 <__multiply+0x150>)
 8006a0c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006a10:	f001 fdee 	bl	80085f0 <__assert_func>
 8006a14:	f100 0514 	add.w	r5, r0, #20
 8006a18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4543      	cmp	r3, r8
 8006a22:	d321      	bcc.n	8006a68 <__multiply+0x98>
 8006a24:	f104 0314 	add.w	r3, r4, #20
 8006a28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a2c:	f109 0314 	add.w	r3, r9, #20
 8006a30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a34:	9202      	str	r2, [sp, #8]
 8006a36:	1b3a      	subs	r2, r7, r4
 8006a38:	3a15      	subs	r2, #21
 8006a3a:	f022 0203 	bic.w	r2, r2, #3
 8006a3e:	3204      	adds	r2, #4
 8006a40:	f104 0115 	add.w	r1, r4, #21
 8006a44:	428f      	cmp	r7, r1
 8006a46:	bf38      	it	cc
 8006a48:	2204      	movcc	r2, #4
 8006a4a:	9201      	str	r2, [sp, #4]
 8006a4c:	9a02      	ldr	r2, [sp, #8]
 8006a4e:	9303      	str	r3, [sp, #12]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d80c      	bhi.n	8006a6e <__multiply+0x9e>
 8006a54:	2e00      	cmp	r6, #0
 8006a56:	dd03      	ble.n	8006a60 <__multiply+0x90>
 8006a58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d05b      	beq.n	8006b18 <__multiply+0x148>
 8006a60:	6106      	str	r6, [r0, #16]
 8006a62:	b005      	add	sp, #20
 8006a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a68:	f843 2b04 	str.w	r2, [r3], #4
 8006a6c:	e7d8      	b.n	8006a20 <__multiply+0x50>
 8006a6e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a72:	f1ba 0f00 	cmp.w	sl, #0
 8006a76:	d024      	beq.n	8006ac2 <__multiply+0xf2>
 8006a78:	f104 0e14 	add.w	lr, r4, #20
 8006a7c:	46a9      	mov	r9, r5
 8006a7e:	f04f 0c00 	mov.w	ip, #0
 8006a82:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006a86:	f8d9 1000 	ldr.w	r1, [r9]
 8006a8a:	fa1f fb82 	uxth.w	fp, r2
 8006a8e:	b289      	uxth	r1, r1
 8006a90:	fb0a 110b 	mla	r1, sl, fp, r1
 8006a94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a98:	f8d9 2000 	ldr.w	r2, [r9]
 8006a9c:	4461      	add	r1, ip
 8006a9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006aa2:	fb0a c20b 	mla	r2, sl, fp, ip
 8006aa6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006aaa:	b289      	uxth	r1, r1
 8006aac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ab0:	4577      	cmp	r7, lr
 8006ab2:	f849 1b04 	str.w	r1, [r9], #4
 8006ab6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006aba:	d8e2      	bhi.n	8006a82 <__multiply+0xb2>
 8006abc:	9a01      	ldr	r2, [sp, #4]
 8006abe:	f845 c002 	str.w	ip, [r5, r2]
 8006ac2:	9a03      	ldr	r2, [sp, #12]
 8006ac4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006ac8:	3304      	adds	r3, #4
 8006aca:	f1b9 0f00 	cmp.w	r9, #0
 8006ace:	d021      	beq.n	8006b14 <__multiply+0x144>
 8006ad0:	6829      	ldr	r1, [r5, #0]
 8006ad2:	f104 0c14 	add.w	ip, r4, #20
 8006ad6:	46ae      	mov	lr, r5
 8006ad8:	f04f 0a00 	mov.w	sl, #0
 8006adc:	f8bc b000 	ldrh.w	fp, [ip]
 8006ae0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006ae4:	fb09 220b 	mla	r2, r9, fp, r2
 8006ae8:	4452      	add	r2, sl
 8006aea:	b289      	uxth	r1, r1
 8006aec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006af0:	f84e 1b04 	str.w	r1, [lr], #4
 8006af4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006af8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006afc:	f8be 1000 	ldrh.w	r1, [lr]
 8006b00:	fb09 110a 	mla	r1, r9, sl, r1
 8006b04:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006b08:	4567      	cmp	r7, ip
 8006b0a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b0e:	d8e5      	bhi.n	8006adc <__multiply+0x10c>
 8006b10:	9a01      	ldr	r2, [sp, #4]
 8006b12:	50a9      	str	r1, [r5, r2]
 8006b14:	3504      	adds	r5, #4
 8006b16:	e799      	b.n	8006a4c <__multiply+0x7c>
 8006b18:	3e01      	subs	r6, #1
 8006b1a:	e79b      	b.n	8006a54 <__multiply+0x84>
 8006b1c:	08008fbd 	.word	0x08008fbd
 8006b20:	08008fce 	.word	0x08008fce

08006b24 <__pow5mult>:
 8006b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b28:	4615      	mov	r5, r2
 8006b2a:	f012 0203 	ands.w	r2, r2, #3
 8006b2e:	4606      	mov	r6, r0
 8006b30:	460f      	mov	r7, r1
 8006b32:	d007      	beq.n	8006b44 <__pow5mult+0x20>
 8006b34:	4c25      	ldr	r4, [pc, #148]	; (8006bcc <__pow5mult+0xa8>)
 8006b36:	3a01      	subs	r2, #1
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b3e:	f7ff fe53 	bl	80067e8 <__multadd>
 8006b42:	4607      	mov	r7, r0
 8006b44:	10ad      	asrs	r5, r5, #2
 8006b46:	d03d      	beq.n	8006bc4 <__pow5mult+0xa0>
 8006b48:	69f4      	ldr	r4, [r6, #28]
 8006b4a:	b97c      	cbnz	r4, 8006b6c <__pow5mult+0x48>
 8006b4c:	2010      	movs	r0, #16
 8006b4e:	f7ff fd35 	bl	80065bc <malloc>
 8006b52:	4602      	mov	r2, r0
 8006b54:	61f0      	str	r0, [r6, #28]
 8006b56:	b928      	cbnz	r0, 8006b64 <__pow5mult+0x40>
 8006b58:	4b1d      	ldr	r3, [pc, #116]	; (8006bd0 <__pow5mult+0xac>)
 8006b5a:	481e      	ldr	r0, [pc, #120]	; (8006bd4 <__pow5mult+0xb0>)
 8006b5c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006b60:	f001 fd46 	bl	80085f0 <__assert_func>
 8006b64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b68:	6004      	str	r4, [r0, #0]
 8006b6a:	60c4      	str	r4, [r0, #12]
 8006b6c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006b70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b74:	b94c      	cbnz	r4, 8006b8a <__pow5mult+0x66>
 8006b76:	f240 2171 	movw	r1, #625	; 0x271
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f7ff ff12 	bl	80069a4 <__i2b>
 8006b80:	2300      	movs	r3, #0
 8006b82:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b86:	4604      	mov	r4, r0
 8006b88:	6003      	str	r3, [r0, #0]
 8006b8a:	f04f 0900 	mov.w	r9, #0
 8006b8e:	07eb      	lsls	r3, r5, #31
 8006b90:	d50a      	bpl.n	8006ba8 <__pow5mult+0x84>
 8006b92:	4639      	mov	r1, r7
 8006b94:	4622      	mov	r2, r4
 8006b96:	4630      	mov	r0, r6
 8006b98:	f7ff ff1a 	bl	80069d0 <__multiply>
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	f7ff fdff 	bl	80067a4 <_Bfree>
 8006ba6:	4647      	mov	r7, r8
 8006ba8:	106d      	asrs	r5, r5, #1
 8006baa:	d00b      	beq.n	8006bc4 <__pow5mult+0xa0>
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	b938      	cbnz	r0, 8006bc0 <__pow5mult+0x9c>
 8006bb0:	4622      	mov	r2, r4
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	f7ff ff0b 	bl	80069d0 <__multiply>
 8006bba:	6020      	str	r0, [r4, #0]
 8006bbc:	f8c0 9000 	str.w	r9, [r0]
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	e7e4      	b.n	8006b8e <__pow5mult+0x6a>
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bca:	bf00      	nop
 8006bcc:	08009118 	.word	0x08009118
 8006bd0:	08008f4e 	.word	0x08008f4e
 8006bd4:	08008fce 	.word	0x08008fce

08006bd8 <__lshift>:
 8006bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bdc:	460c      	mov	r4, r1
 8006bde:	6849      	ldr	r1, [r1, #4]
 8006be0:	6923      	ldr	r3, [r4, #16]
 8006be2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006be6:	68a3      	ldr	r3, [r4, #8]
 8006be8:	4607      	mov	r7, r0
 8006bea:	4691      	mov	r9, r2
 8006bec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bf0:	f108 0601 	add.w	r6, r8, #1
 8006bf4:	42b3      	cmp	r3, r6
 8006bf6:	db0b      	blt.n	8006c10 <__lshift+0x38>
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f7ff fd93 	bl	8006724 <_Balloc>
 8006bfe:	4605      	mov	r5, r0
 8006c00:	b948      	cbnz	r0, 8006c16 <__lshift+0x3e>
 8006c02:	4602      	mov	r2, r0
 8006c04:	4b28      	ldr	r3, [pc, #160]	; (8006ca8 <__lshift+0xd0>)
 8006c06:	4829      	ldr	r0, [pc, #164]	; (8006cac <__lshift+0xd4>)
 8006c08:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006c0c:	f001 fcf0 	bl	80085f0 <__assert_func>
 8006c10:	3101      	adds	r1, #1
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	e7ee      	b.n	8006bf4 <__lshift+0x1c>
 8006c16:	2300      	movs	r3, #0
 8006c18:	f100 0114 	add.w	r1, r0, #20
 8006c1c:	f100 0210 	add.w	r2, r0, #16
 8006c20:	4618      	mov	r0, r3
 8006c22:	4553      	cmp	r3, sl
 8006c24:	db33      	blt.n	8006c8e <__lshift+0xb6>
 8006c26:	6920      	ldr	r0, [r4, #16]
 8006c28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c2c:	f104 0314 	add.w	r3, r4, #20
 8006c30:	f019 091f 	ands.w	r9, r9, #31
 8006c34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c3c:	d02b      	beq.n	8006c96 <__lshift+0xbe>
 8006c3e:	f1c9 0e20 	rsb	lr, r9, #32
 8006c42:	468a      	mov	sl, r1
 8006c44:	2200      	movs	r2, #0
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	fa00 f009 	lsl.w	r0, r0, r9
 8006c4c:	4310      	orrs	r0, r2
 8006c4e:	f84a 0b04 	str.w	r0, [sl], #4
 8006c52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c56:	459c      	cmp	ip, r3
 8006c58:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c5c:	d8f3      	bhi.n	8006c46 <__lshift+0x6e>
 8006c5e:	ebac 0304 	sub.w	r3, ip, r4
 8006c62:	3b15      	subs	r3, #21
 8006c64:	f023 0303 	bic.w	r3, r3, #3
 8006c68:	3304      	adds	r3, #4
 8006c6a:	f104 0015 	add.w	r0, r4, #21
 8006c6e:	4584      	cmp	ip, r0
 8006c70:	bf38      	it	cc
 8006c72:	2304      	movcc	r3, #4
 8006c74:	50ca      	str	r2, [r1, r3]
 8006c76:	b10a      	cbz	r2, 8006c7c <__lshift+0xa4>
 8006c78:	f108 0602 	add.w	r6, r8, #2
 8006c7c:	3e01      	subs	r6, #1
 8006c7e:	4638      	mov	r0, r7
 8006c80:	612e      	str	r6, [r5, #16]
 8006c82:	4621      	mov	r1, r4
 8006c84:	f7ff fd8e 	bl	80067a4 <_Bfree>
 8006c88:	4628      	mov	r0, r5
 8006c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c92:	3301      	adds	r3, #1
 8006c94:	e7c5      	b.n	8006c22 <__lshift+0x4a>
 8006c96:	3904      	subs	r1, #4
 8006c98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ca0:	459c      	cmp	ip, r3
 8006ca2:	d8f9      	bhi.n	8006c98 <__lshift+0xc0>
 8006ca4:	e7ea      	b.n	8006c7c <__lshift+0xa4>
 8006ca6:	bf00      	nop
 8006ca8:	08008fbd 	.word	0x08008fbd
 8006cac:	08008fce 	.word	0x08008fce

08006cb0 <__mcmp>:
 8006cb0:	b530      	push	{r4, r5, lr}
 8006cb2:	6902      	ldr	r2, [r0, #16]
 8006cb4:	690c      	ldr	r4, [r1, #16]
 8006cb6:	1b12      	subs	r2, r2, r4
 8006cb8:	d10e      	bne.n	8006cd8 <__mcmp+0x28>
 8006cba:	f100 0314 	add.w	r3, r0, #20
 8006cbe:	3114      	adds	r1, #20
 8006cc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006cc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006cc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006ccc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006cd0:	42a5      	cmp	r5, r4
 8006cd2:	d003      	beq.n	8006cdc <__mcmp+0x2c>
 8006cd4:	d305      	bcc.n	8006ce2 <__mcmp+0x32>
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	4610      	mov	r0, r2
 8006cda:	bd30      	pop	{r4, r5, pc}
 8006cdc:	4283      	cmp	r3, r0
 8006cde:	d3f3      	bcc.n	8006cc8 <__mcmp+0x18>
 8006ce0:	e7fa      	b.n	8006cd8 <__mcmp+0x28>
 8006ce2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce6:	e7f7      	b.n	8006cd8 <__mcmp+0x28>

08006ce8 <__mdiff>:
 8006ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	460c      	mov	r4, r1
 8006cee:	4606      	mov	r6, r0
 8006cf0:	4611      	mov	r1, r2
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	4690      	mov	r8, r2
 8006cf6:	f7ff ffdb 	bl	8006cb0 <__mcmp>
 8006cfa:	1e05      	subs	r5, r0, #0
 8006cfc:	d110      	bne.n	8006d20 <__mdiff+0x38>
 8006cfe:	4629      	mov	r1, r5
 8006d00:	4630      	mov	r0, r6
 8006d02:	f7ff fd0f 	bl	8006724 <_Balloc>
 8006d06:	b930      	cbnz	r0, 8006d16 <__mdiff+0x2e>
 8006d08:	4b3a      	ldr	r3, [pc, #232]	; (8006df4 <__mdiff+0x10c>)
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	f240 2137 	movw	r1, #567	; 0x237
 8006d10:	4839      	ldr	r0, [pc, #228]	; (8006df8 <__mdiff+0x110>)
 8006d12:	f001 fc6d 	bl	80085f0 <__assert_func>
 8006d16:	2301      	movs	r3, #1
 8006d18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d20:	bfa4      	itt	ge
 8006d22:	4643      	movge	r3, r8
 8006d24:	46a0      	movge	r8, r4
 8006d26:	4630      	mov	r0, r6
 8006d28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d2c:	bfa6      	itte	ge
 8006d2e:	461c      	movge	r4, r3
 8006d30:	2500      	movge	r5, #0
 8006d32:	2501      	movlt	r5, #1
 8006d34:	f7ff fcf6 	bl	8006724 <_Balloc>
 8006d38:	b920      	cbnz	r0, 8006d44 <__mdiff+0x5c>
 8006d3a:	4b2e      	ldr	r3, [pc, #184]	; (8006df4 <__mdiff+0x10c>)
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	f240 2145 	movw	r1, #581	; 0x245
 8006d42:	e7e5      	b.n	8006d10 <__mdiff+0x28>
 8006d44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d48:	6926      	ldr	r6, [r4, #16]
 8006d4a:	60c5      	str	r5, [r0, #12]
 8006d4c:	f104 0914 	add.w	r9, r4, #20
 8006d50:	f108 0514 	add.w	r5, r8, #20
 8006d54:	f100 0e14 	add.w	lr, r0, #20
 8006d58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006d5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d60:	f108 0210 	add.w	r2, r8, #16
 8006d64:	46f2      	mov	sl, lr
 8006d66:	2100      	movs	r1, #0
 8006d68:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006d70:	fa11 f88b 	uxtah	r8, r1, fp
 8006d74:	b299      	uxth	r1, r3
 8006d76:	0c1b      	lsrs	r3, r3, #16
 8006d78:	eba8 0801 	sub.w	r8, r8, r1
 8006d7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d80:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d84:	fa1f f888 	uxth.w	r8, r8
 8006d88:	1419      	asrs	r1, r3, #16
 8006d8a:	454e      	cmp	r6, r9
 8006d8c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d90:	f84a 3b04 	str.w	r3, [sl], #4
 8006d94:	d8e8      	bhi.n	8006d68 <__mdiff+0x80>
 8006d96:	1b33      	subs	r3, r6, r4
 8006d98:	3b15      	subs	r3, #21
 8006d9a:	f023 0303 	bic.w	r3, r3, #3
 8006d9e:	3304      	adds	r3, #4
 8006da0:	3415      	adds	r4, #21
 8006da2:	42a6      	cmp	r6, r4
 8006da4:	bf38      	it	cc
 8006da6:	2304      	movcc	r3, #4
 8006da8:	441d      	add	r5, r3
 8006daa:	4473      	add	r3, lr
 8006dac:	469e      	mov	lr, r3
 8006dae:	462e      	mov	r6, r5
 8006db0:	4566      	cmp	r6, ip
 8006db2:	d30e      	bcc.n	8006dd2 <__mdiff+0xea>
 8006db4:	f10c 0203 	add.w	r2, ip, #3
 8006db8:	1b52      	subs	r2, r2, r5
 8006dba:	f022 0203 	bic.w	r2, r2, #3
 8006dbe:	3d03      	subs	r5, #3
 8006dc0:	45ac      	cmp	ip, r5
 8006dc2:	bf38      	it	cc
 8006dc4:	2200      	movcc	r2, #0
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006dcc:	b17a      	cbz	r2, 8006dee <__mdiff+0x106>
 8006dce:	6107      	str	r7, [r0, #16]
 8006dd0:	e7a4      	b.n	8006d1c <__mdiff+0x34>
 8006dd2:	f856 8b04 	ldr.w	r8, [r6], #4
 8006dd6:	fa11 f288 	uxtah	r2, r1, r8
 8006dda:	1414      	asrs	r4, r2, #16
 8006ddc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006de0:	b292      	uxth	r2, r2
 8006de2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006de6:	f84e 2b04 	str.w	r2, [lr], #4
 8006dea:	1421      	asrs	r1, r4, #16
 8006dec:	e7e0      	b.n	8006db0 <__mdiff+0xc8>
 8006dee:	3f01      	subs	r7, #1
 8006df0:	e7ea      	b.n	8006dc8 <__mdiff+0xe0>
 8006df2:	bf00      	nop
 8006df4:	08008fbd 	.word	0x08008fbd
 8006df8:	08008fce 	.word	0x08008fce

08006dfc <__ulp>:
 8006dfc:	b082      	sub	sp, #8
 8006dfe:	ed8d 0b00 	vstr	d0, [sp]
 8006e02:	9a01      	ldr	r2, [sp, #4]
 8006e04:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <__ulp+0x48>)
 8006e06:	4013      	ands	r3, r2
 8006e08:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	dc08      	bgt.n	8006e22 <__ulp+0x26>
 8006e10:	425b      	negs	r3, r3
 8006e12:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006e16:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e1a:	da04      	bge.n	8006e26 <__ulp+0x2a>
 8006e1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006e20:	4113      	asrs	r3, r2
 8006e22:	2200      	movs	r2, #0
 8006e24:	e008      	b.n	8006e38 <__ulp+0x3c>
 8006e26:	f1a2 0314 	sub.w	r3, r2, #20
 8006e2a:	2b1e      	cmp	r3, #30
 8006e2c:	bfda      	itte	le
 8006e2e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006e32:	40da      	lsrle	r2, r3
 8006e34:	2201      	movgt	r2, #1
 8006e36:	2300      	movs	r3, #0
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4610      	mov	r0, r2
 8006e3c:	ec41 0b10 	vmov	d0, r0, r1
 8006e40:	b002      	add	sp, #8
 8006e42:	4770      	bx	lr
 8006e44:	7ff00000 	.word	0x7ff00000

08006e48 <__b2d>:
 8006e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4c:	6906      	ldr	r6, [r0, #16]
 8006e4e:	f100 0814 	add.w	r8, r0, #20
 8006e52:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006e56:	1f37      	subs	r7, r6, #4
 8006e58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	f7ff fd53 	bl	8006908 <__hi0bits>
 8006e62:	f1c0 0320 	rsb	r3, r0, #32
 8006e66:	280a      	cmp	r0, #10
 8006e68:	600b      	str	r3, [r1, #0]
 8006e6a:	491b      	ldr	r1, [pc, #108]	; (8006ed8 <__b2d+0x90>)
 8006e6c:	dc15      	bgt.n	8006e9a <__b2d+0x52>
 8006e6e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006e72:	fa22 f30c 	lsr.w	r3, r2, ip
 8006e76:	45b8      	cmp	r8, r7
 8006e78:	ea43 0501 	orr.w	r5, r3, r1
 8006e7c:	bf34      	ite	cc
 8006e7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006e82:	2300      	movcs	r3, #0
 8006e84:	3015      	adds	r0, #21
 8006e86:	fa02 f000 	lsl.w	r0, r2, r0
 8006e8a:	fa23 f30c 	lsr.w	r3, r3, ip
 8006e8e:	4303      	orrs	r3, r0
 8006e90:	461c      	mov	r4, r3
 8006e92:	ec45 4b10 	vmov	d0, r4, r5
 8006e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e9a:	45b8      	cmp	r8, r7
 8006e9c:	bf3a      	itte	cc
 8006e9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006ea2:	f1a6 0708 	subcc.w	r7, r6, #8
 8006ea6:	2300      	movcs	r3, #0
 8006ea8:	380b      	subs	r0, #11
 8006eaa:	d012      	beq.n	8006ed2 <__b2d+0x8a>
 8006eac:	f1c0 0120 	rsb	r1, r0, #32
 8006eb0:	fa23 f401 	lsr.w	r4, r3, r1
 8006eb4:	4082      	lsls	r2, r0
 8006eb6:	4322      	orrs	r2, r4
 8006eb8:	4547      	cmp	r7, r8
 8006eba:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006ebe:	bf8c      	ite	hi
 8006ec0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006ec4:	2200      	movls	r2, #0
 8006ec6:	4083      	lsls	r3, r0
 8006ec8:	40ca      	lsrs	r2, r1
 8006eca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	e7de      	b.n	8006e90 <__b2d+0x48>
 8006ed2:	ea42 0501 	orr.w	r5, r2, r1
 8006ed6:	e7db      	b.n	8006e90 <__b2d+0x48>
 8006ed8:	3ff00000 	.word	0x3ff00000

08006edc <__d2b>:
 8006edc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ee0:	460f      	mov	r7, r1
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	ec59 8b10 	vmov	r8, r9, d0
 8006ee8:	4616      	mov	r6, r2
 8006eea:	f7ff fc1b 	bl	8006724 <_Balloc>
 8006eee:	4604      	mov	r4, r0
 8006ef0:	b930      	cbnz	r0, 8006f00 <__d2b+0x24>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	4b24      	ldr	r3, [pc, #144]	; (8006f88 <__d2b+0xac>)
 8006ef6:	4825      	ldr	r0, [pc, #148]	; (8006f8c <__d2b+0xb0>)
 8006ef8:	f240 310f 	movw	r1, #783	; 0x30f
 8006efc:	f001 fb78 	bl	80085f0 <__assert_func>
 8006f00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f08:	bb2d      	cbnz	r5, 8006f56 <__d2b+0x7a>
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	f1b8 0300 	subs.w	r3, r8, #0
 8006f10:	d026      	beq.n	8006f60 <__d2b+0x84>
 8006f12:	4668      	mov	r0, sp
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	f7ff fd17 	bl	8006948 <__lo0bits>
 8006f1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f1e:	b1e8      	cbz	r0, 8006f5c <__d2b+0x80>
 8006f20:	f1c0 0320 	rsb	r3, r0, #32
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	40c2      	lsrs	r2, r0
 8006f2c:	6163      	str	r3, [r4, #20]
 8006f2e:	9201      	str	r2, [sp, #4]
 8006f30:	9b01      	ldr	r3, [sp, #4]
 8006f32:	61a3      	str	r3, [r4, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf14      	ite	ne
 8006f38:	2202      	movne	r2, #2
 8006f3a:	2201      	moveq	r2, #1
 8006f3c:	6122      	str	r2, [r4, #16]
 8006f3e:	b1bd      	cbz	r5, 8006f70 <__d2b+0x94>
 8006f40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f44:	4405      	add	r5, r0
 8006f46:	603d      	str	r5, [r7, #0]
 8006f48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f4c:	6030      	str	r0, [r6, #0]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	b003      	add	sp, #12
 8006f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f5a:	e7d6      	b.n	8006f0a <__d2b+0x2e>
 8006f5c:	6161      	str	r1, [r4, #20]
 8006f5e:	e7e7      	b.n	8006f30 <__d2b+0x54>
 8006f60:	a801      	add	r0, sp, #4
 8006f62:	f7ff fcf1 	bl	8006948 <__lo0bits>
 8006f66:	9b01      	ldr	r3, [sp, #4]
 8006f68:	6163      	str	r3, [r4, #20]
 8006f6a:	3020      	adds	r0, #32
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	e7e5      	b.n	8006f3c <__d2b+0x60>
 8006f70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f78:	6038      	str	r0, [r7, #0]
 8006f7a:	6918      	ldr	r0, [r3, #16]
 8006f7c:	f7ff fcc4 	bl	8006908 <__hi0bits>
 8006f80:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f84:	e7e2      	b.n	8006f4c <__d2b+0x70>
 8006f86:	bf00      	nop
 8006f88:	08008fbd 	.word	0x08008fbd
 8006f8c:	08008fce 	.word	0x08008fce

08006f90 <__ratio>:
 8006f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	4688      	mov	r8, r1
 8006f96:	4669      	mov	r1, sp
 8006f98:	4681      	mov	r9, r0
 8006f9a:	f7ff ff55 	bl	8006e48 <__b2d>
 8006f9e:	a901      	add	r1, sp, #4
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	ec55 4b10 	vmov	r4, r5, d0
 8006fa6:	f7ff ff4f 	bl	8006e48 <__b2d>
 8006faa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006fb2:	eba3 0c02 	sub.w	ip, r3, r2
 8006fb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006fc0:	ec51 0b10 	vmov	r0, r1, d0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bfd6      	itet	le
 8006fc8:	460a      	movle	r2, r1
 8006fca:	462a      	movgt	r2, r5
 8006fcc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006fd0:	468b      	mov	fp, r1
 8006fd2:	462f      	mov	r7, r5
 8006fd4:	bfd4      	ite	le
 8006fd6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006fda:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006fde:	4620      	mov	r0, r4
 8006fe0:	ee10 2a10 	vmov	r2, s0
 8006fe4:	465b      	mov	r3, fp
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	f7f9 fc38 	bl	800085c <__aeabi_ddiv>
 8006fec:	ec41 0b10 	vmov	d0, r0, r1
 8006ff0:	b003      	add	sp, #12
 8006ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ff6 <__copybits>:
 8006ff6:	3901      	subs	r1, #1
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	1149      	asrs	r1, r1, #5
 8006ffc:	6914      	ldr	r4, [r2, #16]
 8006ffe:	3101      	adds	r1, #1
 8007000:	f102 0314 	add.w	r3, r2, #20
 8007004:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007008:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800700c:	1f05      	subs	r5, r0, #4
 800700e:	42a3      	cmp	r3, r4
 8007010:	d30c      	bcc.n	800702c <__copybits+0x36>
 8007012:	1aa3      	subs	r3, r4, r2
 8007014:	3b11      	subs	r3, #17
 8007016:	f023 0303 	bic.w	r3, r3, #3
 800701a:	3211      	adds	r2, #17
 800701c:	42a2      	cmp	r2, r4
 800701e:	bf88      	it	hi
 8007020:	2300      	movhi	r3, #0
 8007022:	4418      	add	r0, r3
 8007024:	2300      	movs	r3, #0
 8007026:	4288      	cmp	r0, r1
 8007028:	d305      	bcc.n	8007036 <__copybits+0x40>
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007030:	f845 6f04 	str.w	r6, [r5, #4]!
 8007034:	e7eb      	b.n	800700e <__copybits+0x18>
 8007036:	f840 3b04 	str.w	r3, [r0], #4
 800703a:	e7f4      	b.n	8007026 <__copybits+0x30>

0800703c <__any_on>:
 800703c:	f100 0214 	add.w	r2, r0, #20
 8007040:	6900      	ldr	r0, [r0, #16]
 8007042:	114b      	asrs	r3, r1, #5
 8007044:	4298      	cmp	r0, r3
 8007046:	b510      	push	{r4, lr}
 8007048:	db11      	blt.n	800706e <__any_on+0x32>
 800704a:	dd0a      	ble.n	8007062 <__any_on+0x26>
 800704c:	f011 011f 	ands.w	r1, r1, #31
 8007050:	d007      	beq.n	8007062 <__any_on+0x26>
 8007052:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007056:	fa24 f001 	lsr.w	r0, r4, r1
 800705a:	fa00 f101 	lsl.w	r1, r0, r1
 800705e:	428c      	cmp	r4, r1
 8007060:	d10b      	bne.n	800707a <__any_on+0x3e>
 8007062:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007066:	4293      	cmp	r3, r2
 8007068:	d803      	bhi.n	8007072 <__any_on+0x36>
 800706a:	2000      	movs	r0, #0
 800706c:	bd10      	pop	{r4, pc}
 800706e:	4603      	mov	r3, r0
 8007070:	e7f7      	b.n	8007062 <__any_on+0x26>
 8007072:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007076:	2900      	cmp	r1, #0
 8007078:	d0f5      	beq.n	8007066 <__any_on+0x2a>
 800707a:	2001      	movs	r0, #1
 800707c:	e7f6      	b.n	800706c <__any_on+0x30>

0800707e <sulp>:
 800707e:	b570      	push	{r4, r5, r6, lr}
 8007080:	4604      	mov	r4, r0
 8007082:	460d      	mov	r5, r1
 8007084:	ec45 4b10 	vmov	d0, r4, r5
 8007088:	4616      	mov	r6, r2
 800708a:	f7ff feb7 	bl	8006dfc <__ulp>
 800708e:	ec51 0b10 	vmov	r0, r1, d0
 8007092:	b17e      	cbz	r6, 80070b4 <sulp+0x36>
 8007094:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007098:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800709c:	2b00      	cmp	r3, #0
 800709e:	dd09      	ble.n	80070b4 <sulp+0x36>
 80070a0:	051b      	lsls	r3, r3, #20
 80070a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80070a6:	2400      	movs	r4, #0
 80070a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80070ac:	4622      	mov	r2, r4
 80070ae:	462b      	mov	r3, r5
 80070b0:	f7f9 faaa 	bl	8000608 <__aeabi_dmul>
 80070b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080070b8 <_strtod_l>:
 80070b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070bc:	ed2d 8b02 	vpush	{d8}
 80070c0:	b09b      	sub	sp, #108	; 0x6c
 80070c2:	4604      	mov	r4, r0
 80070c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80070c6:	2200      	movs	r2, #0
 80070c8:	9216      	str	r2, [sp, #88]	; 0x58
 80070ca:	460d      	mov	r5, r1
 80070cc:	f04f 0800 	mov.w	r8, #0
 80070d0:	f04f 0900 	mov.w	r9, #0
 80070d4:	460a      	mov	r2, r1
 80070d6:	9215      	str	r2, [sp, #84]	; 0x54
 80070d8:	7811      	ldrb	r1, [r2, #0]
 80070da:	292b      	cmp	r1, #43	; 0x2b
 80070dc:	d04c      	beq.n	8007178 <_strtod_l+0xc0>
 80070de:	d83a      	bhi.n	8007156 <_strtod_l+0x9e>
 80070e0:	290d      	cmp	r1, #13
 80070e2:	d834      	bhi.n	800714e <_strtod_l+0x96>
 80070e4:	2908      	cmp	r1, #8
 80070e6:	d834      	bhi.n	8007152 <_strtod_l+0x9a>
 80070e8:	2900      	cmp	r1, #0
 80070ea:	d03d      	beq.n	8007168 <_strtod_l+0xb0>
 80070ec:	2200      	movs	r2, #0
 80070ee:	920a      	str	r2, [sp, #40]	; 0x28
 80070f0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80070f2:	7832      	ldrb	r2, [r6, #0]
 80070f4:	2a30      	cmp	r2, #48	; 0x30
 80070f6:	f040 80b4 	bne.w	8007262 <_strtod_l+0x1aa>
 80070fa:	7872      	ldrb	r2, [r6, #1]
 80070fc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007100:	2a58      	cmp	r2, #88	; 0x58
 8007102:	d170      	bne.n	80071e6 <_strtod_l+0x12e>
 8007104:	9302      	str	r3, [sp, #8]
 8007106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	ab16      	add	r3, sp, #88	; 0x58
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	4a8e      	ldr	r2, [pc, #568]	; (8007348 <_strtod_l+0x290>)
 8007110:	ab17      	add	r3, sp, #92	; 0x5c
 8007112:	a915      	add	r1, sp, #84	; 0x54
 8007114:	4620      	mov	r0, r4
 8007116:	f001 fb07 	bl	8008728 <__gethex>
 800711a:	f010 070f 	ands.w	r7, r0, #15
 800711e:	4605      	mov	r5, r0
 8007120:	d005      	beq.n	800712e <_strtod_l+0x76>
 8007122:	2f06      	cmp	r7, #6
 8007124:	d12a      	bne.n	800717c <_strtod_l+0xc4>
 8007126:	3601      	adds	r6, #1
 8007128:	2300      	movs	r3, #0
 800712a:	9615      	str	r6, [sp, #84]	; 0x54
 800712c:	930a      	str	r3, [sp, #40]	; 0x28
 800712e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 857f 	bne.w	8007c34 <_strtod_l+0xb7c>
 8007136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007138:	b1db      	cbz	r3, 8007172 <_strtod_l+0xba>
 800713a:	4642      	mov	r2, r8
 800713c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007140:	ec43 2b10 	vmov	d0, r2, r3
 8007144:	b01b      	add	sp, #108	; 0x6c
 8007146:	ecbd 8b02 	vpop	{d8}
 800714a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800714e:	2920      	cmp	r1, #32
 8007150:	d1cc      	bne.n	80070ec <_strtod_l+0x34>
 8007152:	3201      	adds	r2, #1
 8007154:	e7bf      	b.n	80070d6 <_strtod_l+0x1e>
 8007156:	292d      	cmp	r1, #45	; 0x2d
 8007158:	d1c8      	bne.n	80070ec <_strtod_l+0x34>
 800715a:	2101      	movs	r1, #1
 800715c:	910a      	str	r1, [sp, #40]	; 0x28
 800715e:	1c51      	adds	r1, r2, #1
 8007160:	9115      	str	r1, [sp, #84]	; 0x54
 8007162:	7852      	ldrb	r2, [r2, #1]
 8007164:	2a00      	cmp	r2, #0
 8007166:	d1c3      	bne.n	80070f0 <_strtod_l+0x38>
 8007168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800716a:	9515      	str	r5, [sp, #84]	; 0x54
 800716c:	2b00      	cmp	r3, #0
 800716e:	f040 855f 	bne.w	8007c30 <_strtod_l+0xb78>
 8007172:	4642      	mov	r2, r8
 8007174:	464b      	mov	r3, r9
 8007176:	e7e3      	b.n	8007140 <_strtod_l+0x88>
 8007178:	2100      	movs	r1, #0
 800717a:	e7ef      	b.n	800715c <_strtod_l+0xa4>
 800717c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800717e:	b13a      	cbz	r2, 8007190 <_strtod_l+0xd8>
 8007180:	2135      	movs	r1, #53	; 0x35
 8007182:	a818      	add	r0, sp, #96	; 0x60
 8007184:	f7ff ff37 	bl	8006ff6 <__copybits>
 8007188:	9916      	ldr	r1, [sp, #88]	; 0x58
 800718a:	4620      	mov	r0, r4
 800718c:	f7ff fb0a 	bl	80067a4 <_Bfree>
 8007190:	3f01      	subs	r7, #1
 8007192:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007194:	2f04      	cmp	r7, #4
 8007196:	d806      	bhi.n	80071a6 <_strtod_l+0xee>
 8007198:	e8df f007 	tbb	[pc, r7]
 800719c:	201d0314 	.word	0x201d0314
 80071a0:	14          	.byte	0x14
 80071a1:	00          	.byte	0x00
 80071a2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80071a6:	05e9      	lsls	r1, r5, #23
 80071a8:	bf48      	it	mi
 80071aa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80071ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071b2:	0d1b      	lsrs	r3, r3, #20
 80071b4:	051b      	lsls	r3, r3, #20
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1b9      	bne.n	800712e <_strtod_l+0x76>
 80071ba:	f7fe fb05 	bl	80057c8 <__errno>
 80071be:	2322      	movs	r3, #34	; 0x22
 80071c0:	6003      	str	r3, [r0, #0]
 80071c2:	e7b4      	b.n	800712e <_strtod_l+0x76>
 80071c4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80071c8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80071cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80071d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80071d4:	e7e7      	b.n	80071a6 <_strtod_l+0xee>
 80071d6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007350 <_strtod_l+0x298>
 80071da:	e7e4      	b.n	80071a6 <_strtod_l+0xee>
 80071dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80071e0:	f04f 38ff 	mov.w	r8, #4294967295
 80071e4:	e7df      	b.n	80071a6 <_strtod_l+0xee>
 80071e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	9215      	str	r2, [sp, #84]	; 0x54
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	2b30      	cmp	r3, #48	; 0x30
 80071f0:	d0f9      	beq.n	80071e6 <_strtod_l+0x12e>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d09b      	beq.n	800712e <_strtod_l+0x76>
 80071f6:	2301      	movs	r3, #1
 80071f8:	f04f 0a00 	mov.w	sl, #0
 80071fc:	9304      	str	r3, [sp, #16]
 80071fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007200:	930b      	str	r3, [sp, #44]	; 0x2c
 8007202:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007206:	46d3      	mov	fp, sl
 8007208:	220a      	movs	r2, #10
 800720a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800720c:	7806      	ldrb	r6, [r0, #0]
 800720e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007212:	b2d9      	uxtb	r1, r3
 8007214:	2909      	cmp	r1, #9
 8007216:	d926      	bls.n	8007266 <_strtod_l+0x1ae>
 8007218:	494c      	ldr	r1, [pc, #304]	; (800734c <_strtod_l+0x294>)
 800721a:	2201      	movs	r2, #1
 800721c:	f001 f98c 	bl	8008538 <strncmp>
 8007220:	2800      	cmp	r0, #0
 8007222:	d030      	beq.n	8007286 <_strtod_l+0x1ce>
 8007224:	2000      	movs	r0, #0
 8007226:	4632      	mov	r2, r6
 8007228:	9005      	str	r0, [sp, #20]
 800722a:	465e      	mov	r6, fp
 800722c:	4603      	mov	r3, r0
 800722e:	2a65      	cmp	r2, #101	; 0x65
 8007230:	d001      	beq.n	8007236 <_strtod_l+0x17e>
 8007232:	2a45      	cmp	r2, #69	; 0x45
 8007234:	d113      	bne.n	800725e <_strtod_l+0x1a6>
 8007236:	b91e      	cbnz	r6, 8007240 <_strtod_l+0x188>
 8007238:	9a04      	ldr	r2, [sp, #16]
 800723a:	4302      	orrs	r2, r0
 800723c:	d094      	beq.n	8007168 <_strtod_l+0xb0>
 800723e:	2600      	movs	r6, #0
 8007240:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007242:	1c6a      	adds	r2, r5, #1
 8007244:	9215      	str	r2, [sp, #84]	; 0x54
 8007246:	786a      	ldrb	r2, [r5, #1]
 8007248:	2a2b      	cmp	r2, #43	; 0x2b
 800724a:	d074      	beq.n	8007336 <_strtod_l+0x27e>
 800724c:	2a2d      	cmp	r2, #45	; 0x2d
 800724e:	d078      	beq.n	8007342 <_strtod_l+0x28a>
 8007250:	f04f 0c00 	mov.w	ip, #0
 8007254:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007258:	2909      	cmp	r1, #9
 800725a:	d97f      	bls.n	800735c <_strtod_l+0x2a4>
 800725c:	9515      	str	r5, [sp, #84]	; 0x54
 800725e:	2700      	movs	r7, #0
 8007260:	e09e      	b.n	80073a0 <_strtod_l+0x2e8>
 8007262:	2300      	movs	r3, #0
 8007264:	e7c8      	b.n	80071f8 <_strtod_l+0x140>
 8007266:	f1bb 0f08 	cmp.w	fp, #8
 800726a:	bfd8      	it	le
 800726c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800726e:	f100 0001 	add.w	r0, r0, #1
 8007272:	bfda      	itte	le
 8007274:	fb02 3301 	mlale	r3, r2, r1, r3
 8007278:	9309      	strle	r3, [sp, #36]	; 0x24
 800727a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800727e:	f10b 0b01 	add.w	fp, fp, #1
 8007282:	9015      	str	r0, [sp, #84]	; 0x54
 8007284:	e7c1      	b.n	800720a <_strtod_l+0x152>
 8007286:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	9215      	str	r2, [sp, #84]	; 0x54
 800728c:	785a      	ldrb	r2, [r3, #1]
 800728e:	f1bb 0f00 	cmp.w	fp, #0
 8007292:	d037      	beq.n	8007304 <_strtod_l+0x24c>
 8007294:	9005      	str	r0, [sp, #20]
 8007296:	465e      	mov	r6, fp
 8007298:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800729c:	2b09      	cmp	r3, #9
 800729e:	d912      	bls.n	80072c6 <_strtod_l+0x20e>
 80072a0:	2301      	movs	r3, #1
 80072a2:	e7c4      	b.n	800722e <_strtod_l+0x176>
 80072a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	9215      	str	r2, [sp, #84]	; 0x54
 80072aa:	785a      	ldrb	r2, [r3, #1]
 80072ac:	3001      	adds	r0, #1
 80072ae:	2a30      	cmp	r2, #48	; 0x30
 80072b0:	d0f8      	beq.n	80072a4 <_strtod_l+0x1ec>
 80072b2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80072b6:	2b08      	cmp	r3, #8
 80072b8:	f200 84c1 	bhi.w	8007c3e <_strtod_l+0xb86>
 80072bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072be:	9005      	str	r0, [sp, #20]
 80072c0:	2000      	movs	r0, #0
 80072c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80072c4:	4606      	mov	r6, r0
 80072c6:	3a30      	subs	r2, #48	; 0x30
 80072c8:	f100 0301 	add.w	r3, r0, #1
 80072cc:	d014      	beq.n	80072f8 <_strtod_l+0x240>
 80072ce:	9905      	ldr	r1, [sp, #20]
 80072d0:	4419      	add	r1, r3
 80072d2:	9105      	str	r1, [sp, #20]
 80072d4:	4633      	mov	r3, r6
 80072d6:	eb00 0c06 	add.w	ip, r0, r6
 80072da:	210a      	movs	r1, #10
 80072dc:	4563      	cmp	r3, ip
 80072de:	d113      	bne.n	8007308 <_strtod_l+0x250>
 80072e0:	1833      	adds	r3, r6, r0
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	f106 0601 	add.w	r6, r6, #1
 80072e8:	4406      	add	r6, r0
 80072ea:	dc1a      	bgt.n	8007322 <_strtod_l+0x26a>
 80072ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072ee:	230a      	movs	r3, #10
 80072f0:	fb03 2301 	mla	r3, r3, r1, r2
 80072f4:	9309      	str	r3, [sp, #36]	; 0x24
 80072f6:	2300      	movs	r3, #0
 80072f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072fa:	1c51      	adds	r1, r2, #1
 80072fc:	9115      	str	r1, [sp, #84]	; 0x54
 80072fe:	7852      	ldrb	r2, [r2, #1]
 8007300:	4618      	mov	r0, r3
 8007302:	e7c9      	b.n	8007298 <_strtod_l+0x1e0>
 8007304:	4658      	mov	r0, fp
 8007306:	e7d2      	b.n	80072ae <_strtod_l+0x1f6>
 8007308:	2b08      	cmp	r3, #8
 800730a:	f103 0301 	add.w	r3, r3, #1
 800730e:	dc03      	bgt.n	8007318 <_strtod_l+0x260>
 8007310:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007312:	434f      	muls	r7, r1
 8007314:	9709      	str	r7, [sp, #36]	; 0x24
 8007316:	e7e1      	b.n	80072dc <_strtod_l+0x224>
 8007318:	2b10      	cmp	r3, #16
 800731a:	bfd8      	it	le
 800731c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007320:	e7dc      	b.n	80072dc <_strtod_l+0x224>
 8007322:	2e10      	cmp	r6, #16
 8007324:	bfdc      	itt	le
 8007326:	230a      	movle	r3, #10
 8007328:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800732c:	e7e3      	b.n	80072f6 <_strtod_l+0x23e>
 800732e:	2300      	movs	r3, #0
 8007330:	9305      	str	r3, [sp, #20]
 8007332:	2301      	movs	r3, #1
 8007334:	e780      	b.n	8007238 <_strtod_l+0x180>
 8007336:	f04f 0c00 	mov.w	ip, #0
 800733a:	1caa      	adds	r2, r5, #2
 800733c:	9215      	str	r2, [sp, #84]	; 0x54
 800733e:	78aa      	ldrb	r2, [r5, #2]
 8007340:	e788      	b.n	8007254 <_strtod_l+0x19c>
 8007342:	f04f 0c01 	mov.w	ip, #1
 8007346:	e7f8      	b.n	800733a <_strtod_l+0x282>
 8007348:	08009128 	.word	0x08009128
 800734c:	08009124 	.word	0x08009124
 8007350:	7ff00000 	.word	0x7ff00000
 8007354:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007356:	1c51      	adds	r1, r2, #1
 8007358:	9115      	str	r1, [sp, #84]	; 0x54
 800735a:	7852      	ldrb	r2, [r2, #1]
 800735c:	2a30      	cmp	r2, #48	; 0x30
 800735e:	d0f9      	beq.n	8007354 <_strtod_l+0x29c>
 8007360:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007364:	2908      	cmp	r1, #8
 8007366:	f63f af7a 	bhi.w	800725e <_strtod_l+0x1a6>
 800736a:	3a30      	subs	r2, #48	; 0x30
 800736c:	9208      	str	r2, [sp, #32]
 800736e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007370:	920c      	str	r2, [sp, #48]	; 0x30
 8007372:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007374:	1c57      	adds	r7, r2, #1
 8007376:	9715      	str	r7, [sp, #84]	; 0x54
 8007378:	7852      	ldrb	r2, [r2, #1]
 800737a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800737e:	f1be 0f09 	cmp.w	lr, #9
 8007382:	d938      	bls.n	80073f6 <_strtod_l+0x33e>
 8007384:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007386:	1a7f      	subs	r7, r7, r1
 8007388:	2f08      	cmp	r7, #8
 800738a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800738e:	dc03      	bgt.n	8007398 <_strtod_l+0x2e0>
 8007390:	9908      	ldr	r1, [sp, #32]
 8007392:	428f      	cmp	r7, r1
 8007394:	bfa8      	it	ge
 8007396:	460f      	movge	r7, r1
 8007398:	f1bc 0f00 	cmp.w	ip, #0
 800739c:	d000      	beq.n	80073a0 <_strtod_l+0x2e8>
 800739e:	427f      	negs	r7, r7
 80073a0:	2e00      	cmp	r6, #0
 80073a2:	d14f      	bne.n	8007444 <_strtod_l+0x38c>
 80073a4:	9904      	ldr	r1, [sp, #16]
 80073a6:	4301      	orrs	r1, r0
 80073a8:	f47f aec1 	bne.w	800712e <_strtod_l+0x76>
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f47f aedb 	bne.w	8007168 <_strtod_l+0xb0>
 80073b2:	2a69      	cmp	r2, #105	; 0x69
 80073b4:	d029      	beq.n	800740a <_strtod_l+0x352>
 80073b6:	dc26      	bgt.n	8007406 <_strtod_l+0x34e>
 80073b8:	2a49      	cmp	r2, #73	; 0x49
 80073ba:	d026      	beq.n	800740a <_strtod_l+0x352>
 80073bc:	2a4e      	cmp	r2, #78	; 0x4e
 80073be:	f47f aed3 	bne.w	8007168 <_strtod_l+0xb0>
 80073c2:	499b      	ldr	r1, [pc, #620]	; (8007630 <_strtod_l+0x578>)
 80073c4:	a815      	add	r0, sp, #84	; 0x54
 80073c6:	f001 fbef 	bl	8008ba8 <__match>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	f43f aecc 	beq.w	8007168 <_strtod_l+0xb0>
 80073d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b28      	cmp	r3, #40	; 0x28
 80073d6:	d12f      	bne.n	8007438 <_strtod_l+0x380>
 80073d8:	4996      	ldr	r1, [pc, #600]	; (8007634 <_strtod_l+0x57c>)
 80073da:	aa18      	add	r2, sp, #96	; 0x60
 80073dc:	a815      	add	r0, sp, #84	; 0x54
 80073de:	f001 fbf7 	bl	8008bd0 <__hexnan>
 80073e2:	2805      	cmp	r0, #5
 80073e4:	d128      	bne.n	8007438 <_strtod_l+0x380>
 80073e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80073ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80073f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80073f4:	e69b      	b.n	800712e <_strtod_l+0x76>
 80073f6:	9f08      	ldr	r7, [sp, #32]
 80073f8:	210a      	movs	r1, #10
 80073fa:	fb01 2107 	mla	r1, r1, r7, r2
 80073fe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007402:	9208      	str	r2, [sp, #32]
 8007404:	e7b5      	b.n	8007372 <_strtod_l+0x2ba>
 8007406:	2a6e      	cmp	r2, #110	; 0x6e
 8007408:	e7d9      	b.n	80073be <_strtod_l+0x306>
 800740a:	498b      	ldr	r1, [pc, #556]	; (8007638 <_strtod_l+0x580>)
 800740c:	a815      	add	r0, sp, #84	; 0x54
 800740e:	f001 fbcb 	bl	8008ba8 <__match>
 8007412:	2800      	cmp	r0, #0
 8007414:	f43f aea8 	beq.w	8007168 <_strtod_l+0xb0>
 8007418:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800741a:	4988      	ldr	r1, [pc, #544]	; (800763c <_strtod_l+0x584>)
 800741c:	3b01      	subs	r3, #1
 800741e:	a815      	add	r0, sp, #84	; 0x54
 8007420:	9315      	str	r3, [sp, #84]	; 0x54
 8007422:	f001 fbc1 	bl	8008ba8 <__match>
 8007426:	b910      	cbnz	r0, 800742e <_strtod_l+0x376>
 8007428:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800742a:	3301      	adds	r3, #1
 800742c:	9315      	str	r3, [sp, #84]	; 0x54
 800742e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800764c <_strtod_l+0x594>
 8007432:	f04f 0800 	mov.w	r8, #0
 8007436:	e67a      	b.n	800712e <_strtod_l+0x76>
 8007438:	4881      	ldr	r0, [pc, #516]	; (8007640 <_strtod_l+0x588>)
 800743a:	f001 f8d1 	bl	80085e0 <nan>
 800743e:	ec59 8b10 	vmov	r8, r9, d0
 8007442:	e674      	b.n	800712e <_strtod_l+0x76>
 8007444:	9b05      	ldr	r3, [sp, #20]
 8007446:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007448:	1afb      	subs	r3, r7, r3
 800744a:	f1bb 0f00 	cmp.w	fp, #0
 800744e:	bf08      	it	eq
 8007450:	46b3      	moveq	fp, r6
 8007452:	2e10      	cmp	r6, #16
 8007454:	9308      	str	r3, [sp, #32]
 8007456:	4635      	mov	r5, r6
 8007458:	bfa8      	it	ge
 800745a:	2510      	movge	r5, #16
 800745c:	f7f9 f85a 	bl	8000514 <__aeabi_ui2d>
 8007460:	2e09      	cmp	r6, #9
 8007462:	4680      	mov	r8, r0
 8007464:	4689      	mov	r9, r1
 8007466:	dd13      	ble.n	8007490 <_strtod_l+0x3d8>
 8007468:	4b76      	ldr	r3, [pc, #472]	; (8007644 <_strtod_l+0x58c>)
 800746a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800746e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007472:	f7f9 f8c9 	bl	8000608 <__aeabi_dmul>
 8007476:	4680      	mov	r8, r0
 8007478:	4650      	mov	r0, sl
 800747a:	4689      	mov	r9, r1
 800747c:	f7f9 f84a 	bl	8000514 <__aeabi_ui2d>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4640      	mov	r0, r8
 8007486:	4649      	mov	r1, r9
 8007488:	f7f8 ff08 	bl	800029c <__adddf3>
 800748c:	4680      	mov	r8, r0
 800748e:	4689      	mov	r9, r1
 8007490:	2e0f      	cmp	r6, #15
 8007492:	dc38      	bgt.n	8007506 <_strtod_l+0x44e>
 8007494:	9b08      	ldr	r3, [sp, #32]
 8007496:	2b00      	cmp	r3, #0
 8007498:	f43f ae49 	beq.w	800712e <_strtod_l+0x76>
 800749c:	dd24      	ble.n	80074e8 <_strtod_l+0x430>
 800749e:	2b16      	cmp	r3, #22
 80074a0:	dc0b      	bgt.n	80074ba <_strtod_l+0x402>
 80074a2:	4968      	ldr	r1, [pc, #416]	; (8007644 <_strtod_l+0x58c>)
 80074a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ac:	4642      	mov	r2, r8
 80074ae:	464b      	mov	r3, r9
 80074b0:	f7f9 f8aa 	bl	8000608 <__aeabi_dmul>
 80074b4:	4680      	mov	r8, r0
 80074b6:	4689      	mov	r9, r1
 80074b8:	e639      	b.n	800712e <_strtod_l+0x76>
 80074ba:	9a08      	ldr	r2, [sp, #32]
 80074bc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80074c0:	4293      	cmp	r3, r2
 80074c2:	db20      	blt.n	8007506 <_strtod_l+0x44e>
 80074c4:	4c5f      	ldr	r4, [pc, #380]	; (8007644 <_strtod_l+0x58c>)
 80074c6:	f1c6 060f 	rsb	r6, r6, #15
 80074ca:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80074ce:	4642      	mov	r2, r8
 80074d0:	464b      	mov	r3, r9
 80074d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d6:	f7f9 f897 	bl	8000608 <__aeabi_dmul>
 80074da:	9b08      	ldr	r3, [sp, #32]
 80074dc:	1b9e      	subs	r6, r3, r6
 80074de:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80074e2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074e6:	e7e3      	b.n	80074b0 <_strtod_l+0x3f8>
 80074e8:	9b08      	ldr	r3, [sp, #32]
 80074ea:	3316      	adds	r3, #22
 80074ec:	db0b      	blt.n	8007506 <_strtod_l+0x44e>
 80074ee:	9b05      	ldr	r3, [sp, #20]
 80074f0:	1bdf      	subs	r7, r3, r7
 80074f2:	4b54      	ldr	r3, [pc, #336]	; (8007644 <_strtod_l+0x58c>)
 80074f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80074f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074fc:	4640      	mov	r0, r8
 80074fe:	4649      	mov	r1, r9
 8007500:	f7f9 f9ac 	bl	800085c <__aeabi_ddiv>
 8007504:	e7d6      	b.n	80074b4 <_strtod_l+0x3fc>
 8007506:	9b08      	ldr	r3, [sp, #32]
 8007508:	1b75      	subs	r5, r6, r5
 800750a:	441d      	add	r5, r3
 800750c:	2d00      	cmp	r5, #0
 800750e:	dd70      	ble.n	80075f2 <_strtod_l+0x53a>
 8007510:	f015 030f 	ands.w	r3, r5, #15
 8007514:	d00a      	beq.n	800752c <_strtod_l+0x474>
 8007516:	494b      	ldr	r1, [pc, #300]	; (8007644 <_strtod_l+0x58c>)
 8007518:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800751c:	4642      	mov	r2, r8
 800751e:	464b      	mov	r3, r9
 8007520:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007524:	f7f9 f870 	bl	8000608 <__aeabi_dmul>
 8007528:	4680      	mov	r8, r0
 800752a:	4689      	mov	r9, r1
 800752c:	f035 050f 	bics.w	r5, r5, #15
 8007530:	d04d      	beq.n	80075ce <_strtod_l+0x516>
 8007532:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007536:	dd22      	ble.n	800757e <_strtod_l+0x4c6>
 8007538:	2500      	movs	r5, #0
 800753a:	46ab      	mov	fp, r5
 800753c:	9509      	str	r5, [sp, #36]	; 0x24
 800753e:	9505      	str	r5, [sp, #20]
 8007540:	2322      	movs	r3, #34	; 0x22
 8007542:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800764c <_strtod_l+0x594>
 8007546:	6023      	str	r3, [r4, #0]
 8007548:	f04f 0800 	mov.w	r8, #0
 800754c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	f43f aded 	beq.w	800712e <_strtod_l+0x76>
 8007554:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007556:	4620      	mov	r0, r4
 8007558:	f7ff f924 	bl	80067a4 <_Bfree>
 800755c:	9905      	ldr	r1, [sp, #20]
 800755e:	4620      	mov	r0, r4
 8007560:	f7ff f920 	bl	80067a4 <_Bfree>
 8007564:	4659      	mov	r1, fp
 8007566:	4620      	mov	r0, r4
 8007568:	f7ff f91c 	bl	80067a4 <_Bfree>
 800756c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800756e:	4620      	mov	r0, r4
 8007570:	f7ff f918 	bl	80067a4 <_Bfree>
 8007574:	4629      	mov	r1, r5
 8007576:	4620      	mov	r0, r4
 8007578:	f7ff f914 	bl	80067a4 <_Bfree>
 800757c:	e5d7      	b.n	800712e <_strtod_l+0x76>
 800757e:	4b32      	ldr	r3, [pc, #200]	; (8007648 <_strtod_l+0x590>)
 8007580:	9304      	str	r3, [sp, #16]
 8007582:	2300      	movs	r3, #0
 8007584:	112d      	asrs	r5, r5, #4
 8007586:	4640      	mov	r0, r8
 8007588:	4649      	mov	r1, r9
 800758a:	469a      	mov	sl, r3
 800758c:	2d01      	cmp	r5, #1
 800758e:	dc21      	bgt.n	80075d4 <_strtod_l+0x51c>
 8007590:	b10b      	cbz	r3, 8007596 <_strtod_l+0x4de>
 8007592:	4680      	mov	r8, r0
 8007594:	4689      	mov	r9, r1
 8007596:	492c      	ldr	r1, [pc, #176]	; (8007648 <_strtod_l+0x590>)
 8007598:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800759c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80075a0:	4642      	mov	r2, r8
 80075a2:	464b      	mov	r3, r9
 80075a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075a8:	f7f9 f82e 	bl	8000608 <__aeabi_dmul>
 80075ac:	4b27      	ldr	r3, [pc, #156]	; (800764c <_strtod_l+0x594>)
 80075ae:	460a      	mov	r2, r1
 80075b0:	400b      	ands	r3, r1
 80075b2:	4927      	ldr	r1, [pc, #156]	; (8007650 <_strtod_l+0x598>)
 80075b4:	428b      	cmp	r3, r1
 80075b6:	4680      	mov	r8, r0
 80075b8:	d8be      	bhi.n	8007538 <_strtod_l+0x480>
 80075ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80075be:	428b      	cmp	r3, r1
 80075c0:	bf86      	itte	hi
 80075c2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007654 <_strtod_l+0x59c>
 80075c6:	f04f 38ff 	movhi.w	r8, #4294967295
 80075ca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80075ce:	2300      	movs	r3, #0
 80075d0:	9304      	str	r3, [sp, #16]
 80075d2:	e07b      	b.n	80076cc <_strtod_l+0x614>
 80075d4:	07ea      	lsls	r2, r5, #31
 80075d6:	d505      	bpl.n	80075e4 <_strtod_l+0x52c>
 80075d8:	9b04      	ldr	r3, [sp, #16]
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f7f9 f813 	bl	8000608 <__aeabi_dmul>
 80075e2:	2301      	movs	r3, #1
 80075e4:	9a04      	ldr	r2, [sp, #16]
 80075e6:	3208      	adds	r2, #8
 80075e8:	f10a 0a01 	add.w	sl, sl, #1
 80075ec:	106d      	asrs	r5, r5, #1
 80075ee:	9204      	str	r2, [sp, #16]
 80075f0:	e7cc      	b.n	800758c <_strtod_l+0x4d4>
 80075f2:	d0ec      	beq.n	80075ce <_strtod_l+0x516>
 80075f4:	426d      	negs	r5, r5
 80075f6:	f015 020f 	ands.w	r2, r5, #15
 80075fa:	d00a      	beq.n	8007612 <_strtod_l+0x55a>
 80075fc:	4b11      	ldr	r3, [pc, #68]	; (8007644 <_strtod_l+0x58c>)
 80075fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007602:	4640      	mov	r0, r8
 8007604:	4649      	mov	r1, r9
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f7f9 f927 	bl	800085c <__aeabi_ddiv>
 800760e:	4680      	mov	r8, r0
 8007610:	4689      	mov	r9, r1
 8007612:	112d      	asrs	r5, r5, #4
 8007614:	d0db      	beq.n	80075ce <_strtod_l+0x516>
 8007616:	2d1f      	cmp	r5, #31
 8007618:	dd1e      	ble.n	8007658 <_strtod_l+0x5a0>
 800761a:	2500      	movs	r5, #0
 800761c:	46ab      	mov	fp, r5
 800761e:	9509      	str	r5, [sp, #36]	; 0x24
 8007620:	9505      	str	r5, [sp, #20]
 8007622:	2322      	movs	r3, #34	; 0x22
 8007624:	f04f 0800 	mov.w	r8, #0
 8007628:	f04f 0900 	mov.w	r9, #0
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	e78d      	b.n	800754c <_strtod_l+0x494>
 8007630:	08008f15 	.word	0x08008f15
 8007634:	0800913c 	.word	0x0800913c
 8007638:	08008f0d 	.word	0x08008f0d
 800763c:	08008f44 	.word	0x08008f44
 8007640:	080092cd 	.word	0x080092cd
 8007644:	08009050 	.word	0x08009050
 8007648:	08009028 	.word	0x08009028
 800764c:	7ff00000 	.word	0x7ff00000
 8007650:	7ca00000 	.word	0x7ca00000
 8007654:	7fefffff 	.word	0x7fefffff
 8007658:	f015 0310 	ands.w	r3, r5, #16
 800765c:	bf18      	it	ne
 800765e:	236a      	movne	r3, #106	; 0x6a
 8007660:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007a04 <_strtod_l+0x94c>
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	4640      	mov	r0, r8
 8007668:	4649      	mov	r1, r9
 800766a:	2300      	movs	r3, #0
 800766c:	07ea      	lsls	r2, r5, #31
 800766e:	d504      	bpl.n	800767a <_strtod_l+0x5c2>
 8007670:	e9da 2300 	ldrd	r2, r3, [sl]
 8007674:	f7f8 ffc8 	bl	8000608 <__aeabi_dmul>
 8007678:	2301      	movs	r3, #1
 800767a:	106d      	asrs	r5, r5, #1
 800767c:	f10a 0a08 	add.w	sl, sl, #8
 8007680:	d1f4      	bne.n	800766c <_strtod_l+0x5b4>
 8007682:	b10b      	cbz	r3, 8007688 <_strtod_l+0x5d0>
 8007684:	4680      	mov	r8, r0
 8007686:	4689      	mov	r9, r1
 8007688:	9b04      	ldr	r3, [sp, #16]
 800768a:	b1bb      	cbz	r3, 80076bc <_strtod_l+0x604>
 800768c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007690:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007694:	2b00      	cmp	r3, #0
 8007696:	4649      	mov	r1, r9
 8007698:	dd10      	ble.n	80076bc <_strtod_l+0x604>
 800769a:	2b1f      	cmp	r3, #31
 800769c:	f340 811e 	ble.w	80078dc <_strtod_l+0x824>
 80076a0:	2b34      	cmp	r3, #52	; 0x34
 80076a2:	bfde      	ittt	le
 80076a4:	f04f 33ff 	movle.w	r3, #4294967295
 80076a8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80076ac:	4093      	lslle	r3, r2
 80076ae:	f04f 0800 	mov.w	r8, #0
 80076b2:	bfcc      	ite	gt
 80076b4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80076b8:	ea03 0901 	andle.w	r9, r3, r1
 80076bc:	2200      	movs	r2, #0
 80076be:	2300      	movs	r3, #0
 80076c0:	4640      	mov	r0, r8
 80076c2:	4649      	mov	r1, r9
 80076c4:	f7f9 fa08 	bl	8000ad8 <__aeabi_dcmpeq>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d1a6      	bne.n	800761a <_strtod_l+0x562>
 80076cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076d2:	4633      	mov	r3, r6
 80076d4:	465a      	mov	r2, fp
 80076d6:	4620      	mov	r0, r4
 80076d8:	f7ff f8cc 	bl	8006874 <__s2b>
 80076dc:	9009      	str	r0, [sp, #36]	; 0x24
 80076de:	2800      	cmp	r0, #0
 80076e0:	f43f af2a 	beq.w	8007538 <_strtod_l+0x480>
 80076e4:	9a08      	ldr	r2, [sp, #32]
 80076e6:	9b05      	ldr	r3, [sp, #20]
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	eba3 0307 	sub.w	r3, r3, r7
 80076ee:	bfa8      	it	ge
 80076f0:	2300      	movge	r3, #0
 80076f2:	930c      	str	r3, [sp, #48]	; 0x30
 80076f4:	2500      	movs	r5, #0
 80076f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076fa:	9312      	str	r3, [sp, #72]	; 0x48
 80076fc:	46ab      	mov	fp, r5
 80076fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007700:	4620      	mov	r0, r4
 8007702:	6859      	ldr	r1, [r3, #4]
 8007704:	f7ff f80e 	bl	8006724 <_Balloc>
 8007708:	9005      	str	r0, [sp, #20]
 800770a:	2800      	cmp	r0, #0
 800770c:	f43f af18 	beq.w	8007540 <_strtod_l+0x488>
 8007710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	3202      	adds	r2, #2
 8007716:	f103 010c 	add.w	r1, r3, #12
 800771a:	0092      	lsls	r2, r2, #2
 800771c:	300c      	adds	r0, #12
 800771e:	f000 ff4f 	bl	80085c0 <memcpy>
 8007722:	ec49 8b10 	vmov	d0, r8, r9
 8007726:	aa18      	add	r2, sp, #96	; 0x60
 8007728:	a917      	add	r1, sp, #92	; 0x5c
 800772a:	4620      	mov	r0, r4
 800772c:	f7ff fbd6 	bl	8006edc <__d2b>
 8007730:	ec49 8b18 	vmov	d8, r8, r9
 8007734:	9016      	str	r0, [sp, #88]	; 0x58
 8007736:	2800      	cmp	r0, #0
 8007738:	f43f af02 	beq.w	8007540 <_strtod_l+0x488>
 800773c:	2101      	movs	r1, #1
 800773e:	4620      	mov	r0, r4
 8007740:	f7ff f930 	bl	80069a4 <__i2b>
 8007744:	4683      	mov	fp, r0
 8007746:	2800      	cmp	r0, #0
 8007748:	f43f aefa 	beq.w	8007540 <_strtod_l+0x488>
 800774c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800774e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007750:	2e00      	cmp	r6, #0
 8007752:	bfab      	itete	ge
 8007754:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007756:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007758:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800775a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800775e:	bfac      	ite	ge
 8007760:	eb06 0a03 	addge.w	sl, r6, r3
 8007764:	1b9f      	sublt	r7, r3, r6
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	1af6      	subs	r6, r6, r3
 800776a:	4416      	add	r6, r2
 800776c:	4ba0      	ldr	r3, [pc, #640]	; (80079f0 <_strtod_l+0x938>)
 800776e:	3e01      	subs	r6, #1
 8007770:	429e      	cmp	r6, r3
 8007772:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007776:	f280 80c4 	bge.w	8007902 <_strtod_l+0x84a>
 800777a:	1b9b      	subs	r3, r3, r6
 800777c:	2b1f      	cmp	r3, #31
 800777e:	eba2 0203 	sub.w	r2, r2, r3
 8007782:	f04f 0101 	mov.w	r1, #1
 8007786:	f300 80b0 	bgt.w	80078ea <_strtod_l+0x832>
 800778a:	fa01 f303 	lsl.w	r3, r1, r3
 800778e:	930e      	str	r3, [sp, #56]	; 0x38
 8007790:	2300      	movs	r3, #0
 8007792:	930d      	str	r3, [sp, #52]	; 0x34
 8007794:	eb0a 0602 	add.w	r6, sl, r2
 8007798:	9b04      	ldr	r3, [sp, #16]
 800779a:	45b2      	cmp	sl, r6
 800779c:	4417      	add	r7, r2
 800779e:	441f      	add	r7, r3
 80077a0:	4653      	mov	r3, sl
 80077a2:	bfa8      	it	ge
 80077a4:	4633      	movge	r3, r6
 80077a6:	42bb      	cmp	r3, r7
 80077a8:	bfa8      	it	ge
 80077aa:	463b      	movge	r3, r7
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	bfc2      	ittt	gt
 80077b0:	1af6      	subgt	r6, r6, r3
 80077b2:	1aff      	subgt	r7, r7, r3
 80077b4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80077b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	dd17      	ble.n	80077ee <_strtod_l+0x736>
 80077be:	4659      	mov	r1, fp
 80077c0:	461a      	mov	r2, r3
 80077c2:	4620      	mov	r0, r4
 80077c4:	f7ff f9ae 	bl	8006b24 <__pow5mult>
 80077c8:	4683      	mov	fp, r0
 80077ca:	2800      	cmp	r0, #0
 80077cc:	f43f aeb8 	beq.w	8007540 <_strtod_l+0x488>
 80077d0:	4601      	mov	r1, r0
 80077d2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80077d4:	4620      	mov	r0, r4
 80077d6:	f7ff f8fb 	bl	80069d0 <__multiply>
 80077da:	900b      	str	r0, [sp, #44]	; 0x2c
 80077dc:	2800      	cmp	r0, #0
 80077de:	f43f aeaf 	beq.w	8007540 <_strtod_l+0x488>
 80077e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80077e4:	4620      	mov	r0, r4
 80077e6:	f7fe ffdd 	bl	80067a4 <_Bfree>
 80077ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077ec:	9316      	str	r3, [sp, #88]	; 0x58
 80077ee:	2e00      	cmp	r6, #0
 80077f0:	f300 808c 	bgt.w	800790c <_strtod_l+0x854>
 80077f4:	9b08      	ldr	r3, [sp, #32]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	dd08      	ble.n	800780c <_strtod_l+0x754>
 80077fa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077fc:	9905      	ldr	r1, [sp, #20]
 80077fe:	4620      	mov	r0, r4
 8007800:	f7ff f990 	bl	8006b24 <__pow5mult>
 8007804:	9005      	str	r0, [sp, #20]
 8007806:	2800      	cmp	r0, #0
 8007808:	f43f ae9a 	beq.w	8007540 <_strtod_l+0x488>
 800780c:	2f00      	cmp	r7, #0
 800780e:	dd08      	ble.n	8007822 <_strtod_l+0x76a>
 8007810:	9905      	ldr	r1, [sp, #20]
 8007812:	463a      	mov	r2, r7
 8007814:	4620      	mov	r0, r4
 8007816:	f7ff f9df 	bl	8006bd8 <__lshift>
 800781a:	9005      	str	r0, [sp, #20]
 800781c:	2800      	cmp	r0, #0
 800781e:	f43f ae8f 	beq.w	8007540 <_strtod_l+0x488>
 8007822:	f1ba 0f00 	cmp.w	sl, #0
 8007826:	dd08      	ble.n	800783a <_strtod_l+0x782>
 8007828:	4659      	mov	r1, fp
 800782a:	4652      	mov	r2, sl
 800782c:	4620      	mov	r0, r4
 800782e:	f7ff f9d3 	bl	8006bd8 <__lshift>
 8007832:	4683      	mov	fp, r0
 8007834:	2800      	cmp	r0, #0
 8007836:	f43f ae83 	beq.w	8007540 <_strtod_l+0x488>
 800783a:	9a05      	ldr	r2, [sp, #20]
 800783c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800783e:	4620      	mov	r0, r4
 8007840:	f7ff fa52 	bl	8006ce8 <__mdiff>
 8007844:	4605      	mov	r5, r0
 8007846:	2800      	cmp	r0, #0
 8007848:	f43f ae7a 	beq.w	8007540 <_strtod_l+0x488>
 800784c:	68c3      	ldr	r3, [r0, #12]
 800784e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007850:	2300      	movs	r3, #0
 8007852:	60c3      	str	r3, [r0, #12]
 8007854:	4659      	mov	r1, fp
 8007856:	f7ff fa2b 	bl	8006cb0 <__mcmp>
 800785a:	2800      	cmp	r0, #0
 800785c:	da60      	bge.n	8007920 <_strtod_l+0x868>
 800785e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007860:	ea53 0308 	orrs.w	r3, r3, r8
 8007864:	f040 8084 	bne.w	8007970 <_strtod_l+0x8b8>
 8007868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800786c:	2b00      	cmp	r3, #0
 800786e:	d17f      	bne.n	8007970 <_strtod_l+0x8b8>
 8007870:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007874:	0d1b      	lsrs	r3, r3, #20
 8007876:	051b      	lsls	r3, r3, #20
 8007878:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800787c:	d978      	bls.n	8007970 <_strtod_l+0x8b8>
 800787e:	696b      	ldr	r3, [r5, #20]
 8007880:	b913      	cbnz	r3, 8007888 <_strtod_l+0x7d0>
 8007882:	692b      	ldr	r3, [r5, #16]
 8007884:	2b01      	cmp	r3, #1
 8007886:	dd73      	ble.n	8007970 <_strtod_l+0x8b8>
 8007888:	4629      	mov	r1, r5
 800788a:	2201      	movs	r2, #1
 800788c:	4620      	mov	r0, r4
 800788e:	f7ff f9a3 	bl	8006bd8 <__lshift>
 8007892:	4659      	mov	r1, fp
 8007894:	4605      	mov	r5, r0
 8007896:	f7ff fa0b 	bl	8006cb0 <__mcmp>
 800789a:	2800      	cmp	r0, #0
 800789c:	dd68      	ble.n	8007970 <_strtod_l+0x8b8>
 800789e:	9904      	ldr	r1, [sp, #16]
 80078a0:	4a54      	ldr	r2, [pc, #336]	; (80079f4 <_strtod_l+0x93c>)
 80078a2:	464b      	mov	r3, r9
 80078a4:	2900      	cmp	r1, #0
 80078a6:	f000 8084 	beq.w	80079b2 <_strtod_l+0x8fa>
 80078aa:	ea02 0109 	and.w	r1, r2, r9
 80078ae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80078b2:	dc7e      	bgt.n	80079b2 <_strtod_l+0x8fa>
 80078b4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80078b8:	f77f aeb3 	ble.w	8007622 <_strtod_l+0x56a>
 80078bc:	4b4e      	ldr	r3, [pc, #312]	; (80079f8 <_strtod_l+0x940>)
 80078be:	4640      	mov	r0, r8
 80078c0:	4649      	mov	r1, r9
 80078c2:	2200      	movs	r2, #0
 80078c4:	f7f8 fea0 	bl	8000608 <__aeabi_dmul>
 80078c8:	4b4a      	ldr	r3, [pc, #296]	; (80079f4 <_strtod_l+0x93c>)
 80078ca:	400b      	ands	r3, r1
 80078cc:	4680      	mov	r8, r0
 80078ce:	4689      	mov	r9, r1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f47f ae3f 	bne.w	8007554 <_strtod_l+0x49c>
 80078d6:	2322      	movs	r3, #34	; 0x22
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	e63b      	b.n	8007554 <_strtod_l+0x49c>
 80078dc:	f04f 32ff 	mov.w	r2, #4294967295
 80078e0:	fa02 f303 	lsl.w	r3, r2, r3
 80078e4:	ea03 0808 	and.w	r8, r3, r8
 80078e8:	e6e8      	b.n	80076bc <_strtod_l+0x604>
 80078ea:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80078ee:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80078f2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80078f6:	36e2      	adds	r6, #226	; 0xe2
 80078f8:	fa01 f306 	lsl.w	r3, r1, r6
 80078fc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007900:	e748      	b.n	8007794 <_strtod_l+0x6dc>
 8007902:	2100      	movs	r1, #0
 8007904:	2301      	movs	r3, #1
 8007906:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800790a:	e743      	b.n	8007794 <_strtod_l+0x6dc>
 800790c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800790e:	4632      	mov	r2, r6
 8007910:	4620      	mov	r0, r4
 8007912:	f7ff f961 	bl	8006bd8 <__lshift>
 8007916:	9016      	str	r0, [sp, #88]	; 0x58
 8007918:	2800      	cmp	r0, #0
 800791a:	f47f af6b 	bne.w	80077f4 <_strtod_l+0x73c>
 800791e:	e60f      	b.n	8007540 <_strtod_l+0x488>
 8007920:	46ca      	mov	sl, r9
 8007922:	d171      	bne.n	8007a08 <_strtod_l+0x950>
 8007924:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007926:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800792a:	b352      	cbz	r2, 8007982 <_strtod_l+0x8ca>
 800792c:	4a33      	ldr	r2, [pc, #204]	; (80079fc <_strtod_l+0x944>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d12a      	bne.n	8007988 <_strtod_l+0x8d0>
 8007932:	9b04      	ldr	r3, [sp, #16]
 8007934:	4641      	mov	r1, r8
 8007936:	b1fb      	cbz	r3, 8007978 <_strtod_l+0x8c0>
 8007938:	4b2e      	ldr	r3, [pc, #184]	; (80079f4 <_strtod_l+0x93c>)
 800793a:	ea09 0303 	and.w	r3, r9, r3
 800793e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007942:	f04f 32ff 	mov.w	r2, #4294967295
 8007946:	d81a      	bhi.n	800797e <_strtod_l+0x8c6>
 8007948:	0d1b      	lsrs	r3, r3, #20
 800794a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800794e:	fa02 f303 	lsl.w	r3, r2, r3
 8007952:	4299      	cmp	r1, r3
 8007954:	d118      	bne.n	8007988 <_strtod_l+0x8d0>
 8007956:	4b2a      	ldr	r3, [pc, #168]	; (8007a00 <_strtod_l+0x948>)
 8007958:	459a      	cmp	sl, r3
 800795a:	d102      	bne.n	8007962 <_strtod_l+0x8aa>
 800795c:	3101      	adds	r1, #1
 800795e:	f43f adef 	beq.w	8007540 <_strtod_l+0x488>
 8007962:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <_strtod_l+0x93c>)
 8007964:	ea0a 0303 	and.w	r3, sl, r3
 8007968:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800796c:	f04f 0800 	mov.w	r8, #0
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d1a2      	bne.n	80078bc <_strtod_l+0x804>
 8007976:	e5ed      	b.n	8007554 <_strtod_l+0x49c>
 8007978:	f04f 33ff 	mov.w	r3, #4294967295
 800797c:	e7e9      	b.n	8007952 <_strtod_l+0x89a>
 800797e:	4613      	mov	r3, r2
 8007980:	e7e7      	b.n	8007952 <_strtod_l+0x89a>
 8007982:	ea53 0308 	orrs.w	r3, r3, r8
 8007986:	d08a      	beq.n	800789e <_strtod_l+0x7e6>
 8007988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800798a:	b1e3      	cbz	r3, 80079c6 <_strtod_l+0x90e>
 800798c:	ea13 0f0a 	tst.w	r3, sl
 8007990:	d0ee      	beq.n	8007970 <_strtod_l+0x8b8>
 8007992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007994:	9a04      	ldr	r2, [sp, #16]
 8007996:	4640      	mov	r0, r8
 8007998:	4649      	mov	r1, r9
 800799a:	b1c3      	cbz	r3, 80079ce <_strtod_l+0x916>
 800799c:	f7ff fb6f 	bl	800707e <sulp>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	ec51 0b18 	vmov	r0, r1, d8
 80079a8:	f7f8 fc78 	bl	800029c <__adddf3>
 80079ac:	4680      	mov	r8, r0
 80079ae:	4689      	mov	r9, r1
 80079b0:	e7de      	b.n	8007970 <_strtod_l+0x8b8>
 80079b2:	4013      	ands	r3, r2
 80079b4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80079b8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80079bc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80079c0:	f04f 38ff 	mov.w	r8, #4294967295
 80079c4:	e7d4      	b.n	8007970 <_strtod_l+0x8b8>
 80079c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079c8:	ea13 0f08 	tst.w	r3, r8
 80079cc:	e7e0      	b.n	8007990 <_strtod_l+0x8d8>
 80079ce:	f7ff fb56 	bl	800707e <sulp>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	ec51 0b18 	vmov	r0, r1, d8
 80079da:	f7f8 fc5d 	bl	8000298 <__aeabi_dsub>
 80079de:	2200      	movs	r2, #0
 80079e0:	2300      	movs	r3, #0
 80079e2:	4680      	mov	r8, r0
 80079e4:	4689      	mov	r9, r1
 80079e6:	f7f9 f877 	bl	8000ad8 <__aeabi_dcmpeq>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	d0c0      	beq.n	8007970 <_strtod_l+0x8b8>
 80079ee:	e618      	b.n	8007622 <_strtod_l+0x56a>
 80079f0:	fffffc02 	.word	0xfffffc02
 80079f4:	7ff00000 	.word	0x7ff00000
 80079f8:	39500000 	.word	0x39500000
 80079fc:	000fffff 	.word	0x000fffff
 8007a00:	7fefffff 	.word	0x7fefffff
 8007a04:	08009150 	.word	0x08009150
 8007a08:	4659      	mov	r1, fp
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f7ff fac0 	bl	8006f90 <__ratio>
 8007a10:	ec57 6b10 	vmov	r6, r7, d0
 8007a14:	ee10 0a10 	vmov	r0, s0
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a1e:	4639      	mov	r1, r7
 8007a20:	f7f9 f86e 	bl	8000b00 <__aeabi_dcmple>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d071      	beq.n	8007b0c <_strtod_l+0xa54>
 8007a28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d17c      	bne.n	8007b28 <_strtod_l+0xa70>
 8007a2e:	f1b8 0f00 	cmp.w	r8, #0
 8007a32:	d15a      	bne.n	8007aea <_strtod_l+0xa32>
 8007a34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d15d      	bne.n	8007af8 <_strtod_l+0xa40>
 8007a3c:	4b90      	ldr	r3, [pc, #576]	; (8007c80 <_strtod_l+0xbc8>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4630      	mov	r0, r6
 8007a42:	4639      	mov	r1, r7
 8007a44:	f7f9 f852 	bl	8000aec <__aeabi_dcmplt>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d15c      	bne.n	8007b06 <_strtod_l+0xa4e>
 8007a4c:	4630      	mov	r0, r6
 8007a4e:	4639      	mov	r1, r7
 8007a50:	4b8c      	ldr	r3, [pc, #560]	; (8007c84 <_strtod_l+0xbcc>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	f7f8 fdd8 	bl	8000608 <__aeabi_dmul>
 8007a58:	4606      	mov	r6, r0
 8007a5a:	460f      	mov	r7, r1
 8007a5c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007a60:	9606      	str	r6, [sp, #24]
 8007a62:	9307      	str	r3, [sp, #28]
 8007a64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a68:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007a6c:	4b86      	ldr	r3, [pc, #536]	; (8007c88 <_strtod_l+0xbd0>)
 8007a6e:	ea0a 0303 	and.w	r3, sl, r3
 8007a72:	930d      	str	r3, [sp, #52]	; 0x34
 8007a74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a76:	4b85      	ldr	r3, [pc, #532]	; (8007c8c <_strtod_l+0xbd4>)
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	f040 8090 	bne.w	8007b9e <_strtod_l+0xae6>
 8007a7e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007a82:	ec49 8b10 	vmov	d0, r8, r9
 8007a86:	f7ff f9b9 	bl	8006dfc <__ulp>
 8007a8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a8e:	ec51 0b10 	vmov	r0, r1, d0
 8007a92:	f7f8 fdb9 	bl	8000608 <__aeabi_dmul>
 8007a96:	4642      	mov	r2, r8
 8007a98:	464b      	mov	r3, r9
 8007a9a:	f7f8 fbff 	bl	800029c <__adddf3>
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	4979      	ldr	r1, [pc, #484]	; (8007c88 <_strtod_l+0xbd0>)
 8007aa2:	4a7b      	ldr	r2, [pc, #492]	; (8007c90 <_strtod_l+0xbd8>)
 8007aa4:	4019      	ands	r1, r3
 8007aa6:	4291      	cmp	r1, r2
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	d944      	bls.n	8007b36 <_strtod_l+0xa7e>
 8007aac:	ee18 2a90 	vmov	r2, s17
 8007ab0:	4b78      	ldr	r3, [pc, #480]	; (8007c94 <_strtod_l+0xbdc>)
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d104      	bne.n	8007ac0 <_strtod_l+0xa08>
 8007ab6:	ee18 3a10 	vmov	r3, s16
 8007aba:	3301      	adds	r3, #1
 8007abc:	f43f ad40 	beq.w	8007540 <_strtod_l+0x488>
 8007ac0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007c94 <_strtod_l+0xbdc>
 8007ac4:	f04f 38ff 	mov.w	r8, #4294967295
 8007ac8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007aca:	4620      	mov	r0, r4
 8007acc:	f7fe fe6a 	bl	80067a4 <_Bfree>
 8007ad0:	9905      	ldr	r1, [sp, #20]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f7fe fe66 	bl	80067a4 <_Bfree>
 8007ad8:	4659      	mov	r1, fp
 8007ada:	4620      	mov	r0, r4
 8007adc:	f7fe fe62 	bl	80067a4 <_Bfree>
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f7fe fe5e 	bl	80067a4 <_Bfree>
 8007ae8:	e609      	b.n	80076fe <_strtod_l+0x646>
 8007aea:	f1b8 0f01 	cmp.w	r8, #1
 8007aee:	d103      	bne.n	8007af8 <_strtod_l+0xa40>
 8007af0:	f1b9 0f00 	cmp.w	r9, #0
 8007af4:	f43f ad95 	beq.w	8007622 <_strtod_l+0x56a>
 8007af8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007c50 <_strtod_l+0xb98>
 8007afc:	4f60      	ldr	r7, [pc, #384]	; (8007c80 <_strtod_l+0xbc8>)
 8007afe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b02:	2600      	movs	r6, #0
 8007b04:	e7ae      	b.n	8007a64 <_strtod_l+0x9ac>
 8007b06:	4f5f      	ldr	r7, [pc, #380]	; (8007c84 <_strtod_l+0xbcc>)
 8007b08:	2600      	movs	r6, #0
 8007b0a:	e7a7      	b.n	8007a5c <_strtod_l+0x9a4>
 8007b0c:	4b5d      	ldr	r3, [pc, #372]	; (8007c84 <_strtod_l+0xbcc>)
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4639      	mov	r1, r7
 8007b12:	2200      	movs	r2, #0
 8007b14:	f7f8 fd78 	bl	8000608 <__aeabi_dmul>
 8007b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	460f      	mov	r7, r1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d09c      	beq.n	8007a5c <_strtod_l+0x9a4>
 8007b22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007b26:	e79d      	b.n	8007a64 <_strtod_l+0x9ac>
 8007b28:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007c58 <_strtod_l+0xba0>
 8007b2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b30:	ec57 6b17 	vmov	r6, r7, d7
 8007b34:	e796      	b.n	8007a64 <_strtod_l+0x9ac>
 8007b36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007b3a:	9b04      	ldr	r3, [sp, #16]
 8007b3c:	46ca      	mov	sl, r9
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1c2      	bne.n	8007ac8 <_strtod_l+0xa10>
 8007b42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b48:	0d1b      	lsrs	r3, r3, #20
 8007b4a:	051b      	lsls	r3, r3, #20
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d1bb      	bne.n	8007ac8 <_strtod_l+0xa10>
 8007b50:	4630      	mov	r0, r6
 8007b52:	4639      	mov	r1, r7
 8007b54:	f7f9 f8b8 	bl	8000cc8 <__aeabi_d2lz>
 8007b58:	f7f8 fd28 	bl	80005ac <__aeabi_l2d>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4630      	mov	r0, r6
 8007b62:	4639      	mov	r1, r7
 8007b64:	f7f8 fb98 	bl	8000298 <__aeabi_dsub>
 8007b68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b6e:	ea43 0308 	orr.w	r3, r3, r8
 8007b72:	4313      	orrs	r3, r2
 8007b74:	4606      	mov	r6, r0
 8007b76:	460f      	mov	r7, r1
 8007b78:	d054      	beq.n	8007c24 <_strtod_l+0xb6c>
 8007b7a:	a339      	add	r3, pc, #228	; (adr r3, 8007c60 <_strtod_l+0xba8>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 ffb4 	bl	8000aec <__aeabi_dcmplt>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	f47f ace5 	bne.w	8007554 <_strtod_l+0x49c>
 8007b8a:	a337      	add	r3, pc, #220	; (adr r3, 8007c68 <_strtod_l+0xbb0>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	4630      	mov	r0, r6
 8007b92:	4639      	mov	r1, r7
 8007b94:	f7f8 ffc8 	bl	8000b28 <__aeabi_dcmpgt>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d095      	beq.n	8007ac8 <_strtod_l+0xa10>
 8007b9c:	e4da      	b.n	8007554 <_strtod_l+0x49c>
 8007b9e:	9b04      	ldr	r3, [sp, #16]
 8007ba0:	b333      	cbz	r3, 8007bf0 <_strtod_l+0xb38>
 8007ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ba4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ba8:	d822      	bhi.n	8007bf0 <_strtod_l+0xb38>
 8007baa:	a331      	add	r3, pc, #196	; (adr r3, 8007c70 <_strtod_l+0xbb8>)
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	4639      	mov	r1, r7
 8007bb4:	f7f8 ffa4 	bl	8000b00 <__aeabi_dcmple>
 8007bb8:	b1a0      	cbz	r0, 8007be4 <_strtod_l+0xb2c>
 8007bba:	4639      	mov	r1, r7
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f7f8 fffb 	bl	8000bb8 <__aeabi_d2uiz>
 8007bc2:	2801      	cmp	r0, #1
 8007bc4:	bf38      	it	cc
 8007bc6:	2001      	movcc	r0, #1
 8007bc8:	f7f8 fca4 	bl	8000514 <__aeabi_ui2d>
 8007bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bce:	4606      	mov	r6, r0
 8007bd0:	460f      	mov	r7, r1
 8007bd2:	bb23      	cbnz	r3, 8007c1e <_strtod_l+0xb66>
 8007bd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bd8:	9010      	str	r0, [sp, #64]	; 0x40
 8007bda:	9311      	str	r3, [sp, #68]	; 0x44
 8007bdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007be0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007be6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007be8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007bec:	1a9b      	subs	r3, r3, r2
 8007bee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bf0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007bf4:	eeb0 0a48 	vmov.f32	s0, s16
 8007bf8:	eef0 0a68 	vmov.f32	s1, s17
 8007bfc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007c00:	f7ff f8fc 	bl	8006dfc <__ulp>
 8007c04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007c08:	ec53 2b10 	vmov	r2, r3, d0
 8007c0c:	f7f8 fcfc 	bl	8000608 <__aeabi_dmul>
 8007c10:	ec53 2b18 	vmov	r2, r3, d8
 8007c14:	f7f8 fb42 	bl	800029c <__adddf3>
 8007c18:	4680      	mov	r8, r0
 8007c1a:	4689      	mov	r9, r1
 8007c1c:	e78d      	b.n	8007b3a <_strtod_l+0xa82>
 8007c1e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007c22:	e7db      	b.n	8007bdc <_strtod_l+0xb24>
 8007c24:	a314      	add	r3, pc, #80	; (adr r3, 8007c78 <_strtod_l+0xbc0>)
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	f7f8 ff5f 	bl	8000aec <__aeabi_dcmplt>
 8007c2e:	e7b3      	b.n	8007b98 <_strtod_l+0xae0>
 8007c30:	2300      	movs	r3, #0
 8007c32:	930a      	str	r3, [sp, #40]	; 0x28
 8007c34:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007c36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007c38:	6013      	str	r3, [r2, #0]
 8007c3a:	f7ff ba7c 	b.w	8007136 <_strtod_l+0x7e>
 8007c3e:	2a65      	cmp	r2, #101	; 0x65
 8007c40:	f43f ab75 	beq.w	800732e <_strtod_l+0x276>
 8007c44:	2a45      	cmp	r2, #69	; 0x45
 8007c46:	f43f ab72 	beq.w	800732e <_strtod_l+0x276>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f7ff bbaa 	b.w	80073a4 <_strtod_l+0x2ec>
 8007c50:	00000000 	.word	0x00000000
 8007c54:	bff00000 	.word	0xbff00000
 8007c58:	00000000 	.word	0x00000000
 8007c5c:	3ff00000 	.word	0x3ff00000
 8007c60:	94a03595 	.word	0x94a03595
 8007c64:	3fdfffff 	.word	0x3fdfffff
 8007c68:	35afe535 	.word	0x35afe535
 8007c6c:	3fe00000 	.word	0x3fe00000
 8007c70:	ffc00000 	.word	0xffc00000
 8007c74:	41dfffff 	.word	0x41dfffff
 8007c78:	94a03595 	.word	0x94a03595
 8007c7c:	3fcfffff 	.word	0x3fcfffff
 8007c80:	3ff00000 	.word	0x3ff00000
 8007c84:	3fe00000 	.word	0x3fe00000
 8007c88:	7ff00000 	.word	0x7ff00000
 8007c8c:	7fe00000 	.word	0x7fe00000
 8007c90:	7c9fffff 	.word	0x7c9fffff
 8007c94:	7fefffff 	.word	0x7fefffff

08007c98 <_strtod_r>:
 8007c98:	4b01      	ldr	r3, [pc, #4]	; (8007ca0 <_strtod_r+0x8>)
 8007c9a:	f7ff ba0d 	b.w	80070b8 <_strtod_l>
 8007c9e:	bf00      	nop
 8007ca0:	20000068 	.word	0x20000068

08007ca4 <_strtol_l.constprop.0>:
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007caa:	d001      	beq.n	8007cb0 <_strtol_l.constprop.0+0xc>
 8007cac:	2b24      	cmp	r3, #36	; 0x24
 8007cae:	d906      	bls.n	8007cbe <_strtol_l.constprop.0+0x1a>
 8007cb0:	f7fd fd8a 	bl	80057c8 <__errno>
 8007cb4:	2316      	movs	r3, #22
 8007cb6:	6003      	str	r3, [r0, #0]
 8007cb8:	2000      	movs	r0, #0
 8007cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007da4 <_strtol_l.constprop.0+0x100>
 8007cc2:	460d      	mov	r5, r1
 8007cc4:	462e      	mov	r6, r5
 8007cc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007cce:	f017 0708 	ands.w	r7, r7, #8
 8007cd2:	d1f7      	bne.n	8007cc4 <_strtol_l.constprop.0+0x20>
 8007cd4:	2c2d      	cmp	r4, #45	; 0x2d
 8007cd6:	d132      	bne.n	8007d3e <_strtol_l.constprop.0+0x9a>
 8007cd8:	782c      	ldrb	r4, [r5, #0]
 8007cda:	2701      	movs	r7, #1
 8007cdc:	1cb5      	adds	r5, r6, #2
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d05b      	beq.n	8007d9a <_strtol_l.constprop.0+0xf6>
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d109      	bne.n	8007cfa <_strtol_l.constprop.0+0x56>
 8007ce6:	2c30      	cmp	r4, #48	; 0x30
 8007ce8:	d107      	bne.n	8007cfa <_strtol_l.constprop.0+0x56>
 8007cea:	782c      	ldrb	r4, [r5, #0]
 8007cec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007cf0:	2c58      	cmp	r4, #88	; 0x58
 8007cf2:	d14d      	bne.n	8007d90 <_strtol_l.constprop.0+0xec>
 8007cf4:	786c      	ldrb	r4, [r5, #1]
 8007cf6:	2310      	movs	r3, #16
 8007cf8:	3502      	adds	r5, #2
 8007cfa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007cfe:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d02:	f04f 0e00 	mov.w	lr, #0
 8007d06:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d0a:	4676      	mov	r6, lr
 8007d0c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d10:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007d14:	f1bc 0f09 	cmp.w	ip, #9
 8007d18:	d816      	bhi.n	8007d48 <_strtol_l.constprop.0+0xa4>
 8007d1a:	4664      	mov	r4, ip
 8007d1c:	42a3      	cmp	r3, r4
 8007d1e:	dd24      	ble.n	8007d6a <_strtol_l.constprop.0+0xc6>
 8007d20:	f1be 3fff 	cmp.w	lr, #4294967295
 8007d24:	d008      	beq.n	8007d38 <_strtol_l.constprop.0+0x94>
 8007d26:	45b1      	cmp	r9, r6
 8007d28:	d31c      	bcc.n	8007d64 <_strtol_l.constprop.0+0xc0>
 8007d2a:	d101      	bne.n	8007d30 <_strtol_l.constprop.0+0x8c>
 8007d2c:	45a2      	cmp	sl, r4
 8007d2e:	db19      	blt.n	8007d64 <_strtol_l.constprop.0+0xc0>
 8007d30:	fb06 4603 	mla	r6, r6, r3, r4
 8007d34:	f04f 0e01 	mov.w	lr, #1
 8007d38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d3c:	e7e8      	b.n	8007d10 <_strtol_l.constprop.0+0x6c>
 8007d3e:	2c2b      	cmp	r4, #43	; 0x2b
 8007d40:	bf04      	itt	eq
 8007d42:	782c      	ldrbeq	r4, [r5, #0]
 8007d44:	1cb5      	addeq	r5, r6, #2
 8007d46:	e7ca      	b.n	8007cde <_strtol_l.constprop.0+0x3a>
 8007d48:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007d4c:	f1bc 0f19 	cmp.w	ip, #25
 8007d50:	d801      	bhi.n	8007d56 <_strtol_l.constprop.0+0xb2>
 8007d52:	3c37      	subs	r4, #55	; 0x37
 8007d54:	e7e2      	b.n	8007d1c <_strtol_l.constprop.0+0x78>
 8007d56:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007d5a:	f1bc 0f19 	cmp.w	ip, #25
 8007d5e:	d804      	bhi.n	8007d6a <_strtol_l.constprop.0+0xc6>
 8007d60:	3c57      	subs	r4, #87	; 0x57
 8007d62:	e7db      	b.n	8007d1c <_strtol_l.constprop.0+0x78>
 8007d64:	f04f 3eff 	mov.w	lr, #4294967295
 8007d68:	e7e6      	b.n	8007d38 <_strtol_l.constprop.0+0x94>
 8007d6a:	f1be 3fff 	cmp.w	lr, #4294967295
 8007d6e:	d105      	bne.n	8007d7c <_strtol_l.constprop.0+0xd8>
 8007d70:	2322      	movs	r3, #34	; 0x22
 8007d72:	6003      	str	r3, [r0, #0]
 8007d74:	4646      	mov	r6, r8
 8007d76:	b942      	cbnz	r2, 8007d8a <_strtol_l.constprop.0+0xe6>
 8007d78:	4630      	mov	r0, r6
 8007d7a:	e79e      	b.n	8007cba <_strtol_l.constprop.0+0x16>
 8007d7c:	b107      	cbz	r7, 8007d80 <_strtol_l.constprop.0+0xdc>
 8007d7e:	4276      	negs	r6, r6
 8007d80:	2a00      	cmp	r2, #0
 8007d82:	d0f9      	beq.n	8007d78 <_strtol_l.constprop.0+0xd4>
 8007d84:	f1be 0f00 	cmp.w	lr, #0
 8007d88:	d000      	beq.n	8007d8c <_strtol_l.constprop.0+0xe8>
 8007d8a:	1e69      	subs	r1, r5, #1
 8007d8c:	6011      	str	r1, [r2, #0]
 8007d8e:	e7f3      	b.n	8007d78 <_strtol_l.constprop.0+0xd4>
 8007d90:	2430      	movs	r4, #48	; 0x30
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1b1      	bne.n	8007cfa <_strtol_l.constprop.0+0x56>
 8007d96:	2308      	movs	r3, #8
 8007d98:	e7af      	b.n	8007cfa <_strtol_l.constprop.0+0x56>
 8007d9a:	2c30      	cmp	r4, #48	; 0x30
 8007d9c:	d0a5      	beq.n	8007cea <_strtol_l.constprop.0+0x46>
 8007d9e:	230a      	movs	r3, #10
 8007da0:	e7ab      	b.n	8007cfa <_strtol_l.constprop.0+0x56>
 8007da2:	bf00      	nop
 8007da4:	08009179 	.word	0x08009179

08007da8 <_strtol_r>:
 8007da8:	f7ff bf7c 	b.w	8007ca4 <_strtol_l.constprop.0>

08007dac <__ssputs_r>:
 8007dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	688e      	ldr	r6, [r1, #8]
 8007db2:	461f      	mov	r7, r3
 8007db4:	42be      	cmp	r6, r7
 8007db6:	680b      	ldr	r3, [r1, #0]
 8007db8:	4682      	mov	sl, r0
 8007dba:	460c      	mov	r4, r1
 8007dbc:	4690      	mov	r8, r2
 8007dbe:	d82c      	bhi.n	8007e1a <__ssputs_r+0x6e>
 8007dc0:	898a      	ldrh	r2, [r1, #12]
 8007dc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007dc6:	d026      	beq.n	8007e16 <__ssputs_r+0x6a>
 8007dc8:	6965      	ldr	r5, [r4, #20]
 8007dca:	6909      	ldr	r1, [r1, #16]
 8007dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dd0:	eba3 0901 	sub.w	r9, r3, r1
 8007dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007dd8:	1c7b      	adds	r3, r7, #1
 8007dda:	444b      	add	r3, r9
 8007ddc:	106d      	asrs	r5, r5, #1
 8007dde:	429d      	cmp	r5, r3
 8007de0:	bf38      	it	cc
 8007de2:	461d      	movcc	r5, r3
 8007de4:	0553      	lsls	r3, r2, #21
 8007de6:	d527      	bpl.n	8007e38 <__ssputs_r+0x8c>
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7fe fc0f 	bl	800660c <_malloc_r>
 8007dee:	4606      	mov	r6, r0
 8007df0:	b360      	cbz	r0, 8007e4c <__ssputs_r+0xa0>
 8007df2:	6921      	ldr	r1, [r4, #16]
 8007df4:	464a      	mov	r2, r9
 8007df6:	f000 fbe3 	bl	80085c0 <memcpy>
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e04:	81a3      	strh	r3, [r4, #12]
 8007e06:	6126      	str	r6, [r4, #16]
 8007e08:	6165      	str	r5, [r4, #20]
 8007e0a:	444e      	add	r6, r9
 8007e0c:	eba5 0509 	sub.w	r5, r5, r9
 8007e10:	6026      	str	r6, [r4, #0]
 8007e12:	60a5      	str	r5, [r4, #8]
 8007e14:	463e      	mov	r6, r7
 8007e16:	42be      	cmp	r6, r7
 8007e18:	d900      	bls.n	8007e1c <__ssputs_r+0x70>
 8007e1a:	463e      	mov	r6, r7
 8007e1c:	6820      	ldr	r0, [r4, #0]
 8007e1e:	4632      	mov	r2, r6
 8007e20:	4641      	mov	r1, r8
 8007e22:	f000 fb6f 	bl	8008504 <memmove>
 8007e26:	68a3      	ldr	r3, [r4, #8]
 8007e28:	1b9b      	subs	r3, r3, r6
 8007e2a:	60a3      	str	r3, [r4, #8]
 8007e2c:	6823      	ldr	r3, [r4, #0]
 8007e2e:	4433      	add	r3, r6
 8007e30:	6023      	str	r3, [r4, #0]
 8007e32:	2000      	movs	r0, #0
 8007e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e38:	462a      	mov	r2, r5
 8007e3a:	f000 ff76 	bl	8008d2a <_realloc_r>
 8007e3e:	4606      	mov	r6, r0
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d1e0      	bne.n	8007e06 <__ssputs_r+0x5a>
 8007e44:	6921      	ldr	r1, [r4, #16]
 8007e46:	4650      	mov	r0, sl
 8007e48:	f7fe fb6c 	bl	8006524 <_free_r>
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	f8ca 3000 	str.w	r3, [sl]
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e58:	81a3      	strh	r3, [r4, #12]
 8007e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e5e:	e7e9      	b.n	8007e34 <__ssputs_r+0x88>

08007e60 <_svfiprintf_r>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	4698      	mov	r8, r3
 8007e66:	898b      	ldrh	r3, [r1, #12]
 8007e68:	061b      	lsls	r3, r3, #24
 8007e6a:	b09d      	sub	sp, #116	; 0x74
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	460d      	mov	r5, r1
 8007e70:	4614      	mov	r4, r2
 8007e72:	d50e      	bpl.n	8007e92 <_svfiprintf_r+0x32>
 8007e74:	690b      	ldr	r3, [r1, #16]
 8007e76:	b963      	cbnz	r3, 8007e92 <_svfiprintf_r+0x32>
 8007e78:	2140      	movs	r1, #64	; 0x40
 8007e7a:	f7fe fbc7 	bl	800660c <_malloc_r>
 8007e7e:	6028      	str	r0, [r5, #0]
 8007e80:	6128      	str	r0, [r5, #16]
 8007e82:	b920      	cbnz	r0, 8007e8e <_svfiprintf_r+0x2e>
 8007e84:	230c      	movs	r3, #12
 8007e86:	603b      	str	r3, [r7, #0]
 8007e88:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8c:	e0d0      	b.n	8008030 <_svfiprintf_r+0x1d0>
 8007e8e:	2340      	movs	r3, #64	; 0x40
 8007e90:	616b      	str	r3, [r5, #20]
 8007e92:	2300      	movs	r3, #0
 8007e94:	9309      	str	r3, [sp, #36]	; 0x24
 8007e96:	2320      	movs	r3, #32
 8007e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ea0:	2330      	movs	r3, #48	; 0x30
 8007ea2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008048 <_svfiprintf_r+0x1e8>
 8007ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eaa:	f04f 0901 	mov.w	r9, #1
 8007eae:	4623      	mov	r3, r4
 8007eb0:	469a      	mov	sl, r3
 8007eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007eb6:	b10a      	cbz	r2, 8007ebc <_svfiprintf_r+0x5c>
 8007eb8:	2a25      	cmp	r2, #37	; 0x25
 8007eba:	d1f9      	bne.n	8007eb0 <_svfiprintf_r+0x50>
 8007ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8007ec0:	d00b      	beq.n	8007eda <_svfiprintf_r+0x7a>
 8007ec2:	465b      	mov	r3, fp
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	4638      	mov	r0, r7
 8007eca:	f7ff ff6f 	bl	8007dac <__ssputs_r>
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f000 80a9 	beq.w	8008026 <_svfiprintf_r+0x1c6>
 8007ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ed6:	445a      	add	r2, fp
 8007ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8007eda:	f89a 3000 	ldrb.w	r3, [sl]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 80a1 	beq.w	8008026 <_svfiprintf_r+0x1c6>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eee:	f10a 0a01 	add.w	sl, sl, #1
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	9307      	str	r3, [sp, #28]
 8007ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007efa:	931a      	str	r3, [sp, #104]	; 0x68
 8007efc:	4654      	mov	r4, sl
 8007efe:	2205      	movs	r2, #5
 8007f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f04:	4850      	ldr	r0, [pc, #320]	; (8008048 <_svfiprintf_r+0x1e8>)
 8007f06:	f7f8 f96b 	bl	80001e0 <memchr>
 8007f0a:	9a04      	ldr	r2, [sp, #16]
 8007f0c:	b9d8      	cbnz	r0, 8007f46 <_svfiprintf_r+0xe6>
 8007f0e:	06d0      	lsls	r0, r2, #27
 8007f10:	bf44      	itt	mi
 8007f12:	2320      	movmi	r3, #32
 8007f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f18:	0711      	lsls	r1, r2, #28
 8007f1a:	bf44      	itt	mi
 8007f1c:	232b      	movmi	r3, #43	; 0x2b
 8007f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f22:	f89a 3000 	ldrb.w	r3, [sl]
 8007f26:	2b2a      	cmp	r3, #42	; 0x2a
 8007f28:	d015      	beq.n	8007f56 <_svfiprintf_r+0xf6>
 8007f2a:	9a07      	ldr	r2, [sp, #28]
 8007f2c:	4654      	mov	r4, sl
 8007f2e:	2000      	movs	r0, #0
 8007f30:	f04f 0c0a 	mov.w	ip, #10
 8007f34:	4621      	mov	r1, r4
 8007f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f3a:	3b30      	subs	r3, #48	; 0x30
 8007f3c:	2b09      	cmp	r3, #9
 8007f3e:	d94d      	bls.n	8007fdc <_svfiprintf_r+0x17c>
 8007f40:	b1b0      	cbz	r0, 8007f70 <_svfiprintf_r+0x110>
 8007f42:	9207      	str	r2, [sp, #28]
 8007f44:	e014      	b.n	8007f70 <_svfiprintf_r+0x110>
 8007f46:	eba0 0308 	sub.w	r3, r0, r8
 8007f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	9304      	str	r3, [sp, #16]
 8007f52:	46a2      	mov	sl, r4
 8007f54:	e7d2      	b.n	8007efc <_svfiprintf_r+0x9c>
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	1d19      	adds	r1, r3, #4
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	9103      	str	r1, [sp, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bfbb      	ittet	lt
 8007f62:	425b      	neglt	r3, r3
 8007f64:	f042 0202 	orrlt.w	r2, r2, #2
 8007f68:	9307      	strge	r3, [sp, #28]
 8007f6a:	9307      	strlt	r3, [sp, #28]
 8007f6c:	bfb8      	it	lt
 8007f6e:	9204      	strlt	r2, [sp, #16]
 8007f70:	7823      	ldrb	r3, [r4, #0]
 8007f72:	2b2e      	cmp	r3, #46	; 0x2e
 8007f74:	d10c      	bne.n	8007f90 <_svfiprintf_r+0x130>
 8007f76:	7863      	ldrb	r3, [r4, #1]
 8007f78:	2b2a      	cmp	r3, #42	; 0x2a
 8007f7a:	d134      	bne.n	8007fe6 <_svfiprintf_r+0x186>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	1d1a      	adds	r2, r3, #4
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	9203      	str	r2, [sp, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bfb8      	it	lt
 8007f88:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f8c:	3402      	adds	r4, #2
 8007f8e:	9305      	str	r3, [sp, #20]
 8007f90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008058 <_svfiprintf_r+0x1f8>
 8007f94:	7821      	ldrb	r1, [r4, #0]
 8007f96:	2203      	movs	r2, #3
 8007f98:	4650      	mov	r0, sl
 8007f9a:	f7f8 f921 	bl	80001e0 <memchr>
 8007f9e:	b138      	cbz	r0, 8007fb0 <_svfiprintf_r+0x150>
 8007fa0:	9b04      	ldr	r3, [sp, #16]
 8007fa2:	eba0 000a 	sub.w	r0, r0, sl
 8007fa6:	2240      	movs	r2, #64	; 0x40
 8007fa8:	4082      	lsls	r2, r0
 8007faa:	4313      	orrs	r3, r2
 8007fac:	3401      	adds	r4, #1
 8007fae:	9304      	str	r3, [sp, #16]
 8007fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb4:	4825      	ldr	r0, [pc, #148]	; (800804c <_svfiprintf_r+0x1ec>)
 8007fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fba:	2206      	movs	r2, #6
 8007fbc:	f7f8 f910 	bl	80001e0 <memchr>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d038      	beq.n	8008036 <_svfiprintf_r+0x1d6>
 8007fc4:	4b22      	ldr	r3, [pc, #136]	; (8008050 <_svfiprintf_r+0x1f0>)
 8007fc6:	bb1b      	cbnz	r3, 8008010 <_svfiprintf_r+0x1b0>
 8007fc8:	9b03      	ldr	r3, [sp, #12]
 8007fca:	3307      	adds	r3, #7
 8007fcc:	f023 0307 	bic.w	r3, r3, #7
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	9303      	str	r3, [sp, #12]
 8007fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd6:	4433      	add	r3, r6
 8007fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fda:	e768      	b.n	8007eae <_svfiprintf_r+0x4e>
 8007fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	2001      	movs	r0, #1
 8007fe4:	e7a6      	b.n	8007f34 <_svfiprintf_r+0xd4>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	3401      	adds	r4, #1
 8007fea:	9305      	str	r3, [sp, #20]
 8007fec:	4619      	mov	r1, r3
 8007fee:	f04f 0c0a 	mov.w	ip, #10
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ff8:	3a30      	subs	r2, #48	; 0x30
 8007ffa:	2a09      	cmp	r2, #9
 8007ffc:	d903      	bls.n	8008006 <_svfiprintf_r+0x1a6>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0c6      	beq.n	8007f90 <_svfiprintf_r+0x130>
 8008002:	9105      	str	r1, [sp, #20]
 8008004:	e7c4      	b.n	8007f90 <_svfiprintf_r+0x130>
 8008006:	fb0c 2101 	mla	r1, ip, r1, r2
 800800a:	4604      	mov	r4, r0
 800800c:	2301      	movs	r3, #1
 800800e:	e7f0      	b.n	8007ff2 <_svfiprintf_r+0x192>
 8008010:	ab03      	add	r3, sp, #12
 8008012:	9300      	str	r3, [sp, #0]
 8008014:	462a      	mov	r2, r5
 8008016:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <_svfiprintf_r+0x1f4>)
 8008018:	a904      	add	r1, sp, #16
 800801a:	4638      	mov	r0, r7
 800801c:	f7fc fad6 	bl	80045cc <_printf_float>
 8008020:	1c42      	adds	r2, r0, #1
 8008022:	4606      	mov	r6, r0
 8008024:	d1d6      	bne.n	8007fd4 <_svfiprintf_r+0x174>
 8008026:	89ab      	ldrh	r3, [r5, #12]
 8008028:	065b      	lsls	r3, r3, #25
 800802a:	f53f af2d 	bmi.w	8007e88 <_svfiprintf_r+0x28>
 800802e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008030:	b01d      	add	sp, #116	; 0x74
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008036:	ab03      	add	r3, sp, #12
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	462a      	mov	r2, r5
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <_svfiprintf_r+0x1f4>)
 800803e:	a904      	add	r1, sp, #16
 8008040:	4638      	mov	r0, r7
 8008042:	f7fc fd67 	bl	8004b14 <_printf_i>
 8008046:	e7eb      	b.n	8008020 <_svfiprintf_r+0x1c0>
 8008048:	08009279 	.word	0x08009279
 800804c:	08009283 	.word	0x08009283
 8008050:	080045cd 	.word	0x080045cd
 8008054:	08007dad 	.word	0x08007dad
 8008058:	0800927f 	.word	0x0800927f

0800805c <__sfputc_r>:
 800805c:	6893      	ldr	r3, [r2, #8]
 800805e:	3b01      	subs	r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	b410      	push	{r4}
 8008064:	6093      	str	r3, [r2, #8]
 8008066:	da08      	bge.n	800807a <__sfputc_r+0x1e>
 8008068:	6994      	ldr	r4, [r2, #24]
 800806a:	42a3      	cmp	r3, r4
 800806c:	db01      	blt.n	8008072 <__sfputc_r+0x16>
 800806e:	290a      	cmp	r1, #10
 8008070:	d103      	bne.n	800807a <__sfputc_r+0x1e>
 8008072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008076:	f7fd bac0 	b.w	80055fa <__swbuf_r>
 800807a:	6813      	ldr	r3, [r2, #0]
 800807c:	1c58      	adds	r0, r3, #1
 800807e:	6010      	str	r0, [r2, #0]
 8008080:	7019      	strb	r1, [r3, #0]
 8008082:	4608      	mov	r0, r1
 8008084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008088:	4770      	bx	lr

0800808a <__sfputs_r>:
 800808a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808c:	4606      	mov	r6, r0
 800808e:	460f      	mov	r7, r1
 8008090:	4614      	mov	r4, r2
 8008092:	18d5      	adds	r5, r2, r3
 8008094:	42ac      	cmp	r4, r5
 8008096:	d101      	bne.n	800809c <__sfputs_r+0x12>
 8008098:	2000      	movs	r0, #0
 800809a:	e007      	b.n	80080ac <__sfputs_r+0x22>
 800809c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a0:	463a      	mov	r2, r7
 80080a2:	4630      	mov	r0, r6
 80080a4:	f7ff ffda 	bl	800805c <__sfputc_r>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d1f3      	bne.n	8008094 <__sfputs_r+0xa>
 80080ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080b0 <_vfiprintf_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	460d      	mov	r5, r1
 80080b6:	b09d      	sub	sp, #116	; 0x74
 80080b8:	4614      	mov	r4, r2
 80080ba:	4698      	mov	r8, r3
 80080bc:	4606      	mov	r6, r0
 80080be:	b118      	cbz	r0, 80080c8 <_vfiprintf_r+0x18>
 80080c0:	6a03      	ldr	r3, [r0, #32]
 80080c2:	b90b      	cbnz	r3, 80080c8 <_vfiprintf_r+0x18>
 80080c4:	f7fd f8e4 	bl	8005290 <__sinit>
 80080c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ca:	07d9      	lsls	r1, r3, #31
 80080cc:	d405      	bmi.n	80080da <_vfiprintf_r+0x2a>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	059a      	lsls	r2, r3, #22
 80080d2:	d402      	bmi.n	80080da <_vfiprintf_r+0x2a>
 80080d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080d6:	f7fd fba2 	bl	800581e <__retarget_lock_acquire_recursive>
 80080da:	89ab      	ldrh	r3, [r5, #12]
 80080dc:	071b      	lsls	r3, r3, #28
 80080de:	d501      	bpl.n	80080e4 <_vfiprintf_r+0x34>
 80080e0:	692b      	ldr	r3, [r5, #16]
 80080e2:	b99b      	cbnz	r3, 800810c <_vfiprintf_r+0x5c>
 80080e4:	4629      	mov	r1, r5
 80080e6:	4630      	mov	r0, r6
 80080e8:	f7fd fac4 	bl	8005674 <__swsetup_r>
 80080ec:	b170      	cbz	r0, 800810c <_vfiprintf_r+0x5c>
 80080ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080f0:	07dc      	lsls	r4, r3, #31
 80080f2:	d504      	bpl.n	80080fe <_vfiprintf_r+0x4e>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	b01d      	add	sp, #116	; 0x74
 80080fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fe:	89ab      	ldrh	r3, [r5, #12]
 8008100:	0598      	lsls	r0, r3, #22
 8008102:	d4f7      	bmi.n	80080f4 <_vfiprintf_r+0x44>
 8008104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008106:	f7fd fb8b 	bl	8005820 <__retarget_lock_release_recursive>
 800810a:	e7f3      	b.n	80080f4 <_vfiprintf_r+0x44>
 800810c:	2300      	movs	r3, #0
 800810e:	9309      	str	r3, [sp, #36]	; 0x24
 8008110:	2320      	movs	r3, #32
 8008112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008116:	f8cd 800c 	str.w	r8, [sp, #12]
 800811a:	2330      	movs	r3, #48	; 0x30
 800811c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80082d0 <_vfiprintf_r+0x220>
 8008120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008124:	f04f 0901 	mov.w	r9, #1
 8008128:	4623      	mov	r3, r4
 800812a:	469a      	mov	sl, r3
 800812c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008130:	b10a      	cbz	r2, 8008136 <_vfiprintf_r+0x86>
 8008132:	2a25      	cmp	r2, #37	; 0x25
 8008134:	d1f9      	bne.n	800812a <_vfiprintf_r+0x7a>
 8008136:	ebba 0b04 	subs.w	fp, sl, r4
 800813a:	d00b      	beq.n	8008154 <_vfiprintf_r+0xa4>
 800813c:	465b      	mov	r3, fp
 800813e:	4622      	mov	r2, r4
 8008140:	4629      	mov	r1, r5
 8008142:	4630      	mov	r0, r6
 8008144:	f7ff ffa1 	bl	800808a <__sfputs_r>
 8008148:	3001      	adds	r0, #1
 800814a:	f000 80a9 	beq.w	80082a0 <_vfiprintf_r+0x1f0>
 800814e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008150:	445a      	add	r2, fp
 8008152:	9209      	str	r2, [sp, #36]	; 0x24
 8008154:	f89a 3000 	ldrb.w	r3, [sl]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f000 80a1 	beq.w	80082a0 <_vfiprintf_r+0x1f0>
 800815e:	2300      	movs	r3, #0
 8008160:	f04f 32ff 	mov.w	r2, #4294967295
 8008164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008168:	f10a 0a01 	add.w	sl, sl, #1
 800816c:	9304      	str	r3, [sp, #16]
 800816e:	9307      	str	r3, [sp, #28]
 8008170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008174:	931a      	str	r3, [sp, #104]	; 0x68
 8008176:	4654      	mov	r4, sl
 8008178:	2205      	movs	r2, #5
 800817a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817e:	4854      	ldr	r0, [pc, #336]	; (80082d0 <_vfiprintf_r+0x220>)
 8008180:	f7f8 f82e 	bl	80001e0 <memchr>
 8008184:	9a04      	ldr	r2, [sp, #16]
 8008186:	b9d8      	cbnz	r0, 80081c0 <_vfiprintf_r+0x110>
 8008188:	06d1      	lsls	r1, r2, #27
 800818a:	bf44      	itt	mi
 800818c:	2320      	movmi	r3, #32
 800818e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008192:	0713      	lsls	r3, r2, #28
 8008194:	bf44      	itt	mi
 8008196:	232b      	movmi	r3, #43	; 0x2b
 8008198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800819c:	f89a 3000 	ldrb.w	r3, [sl]
 80081a0:	2b2a      	cmp	r3, #42	; 0x2a
 80081a2:	d015      	beq.n	80081d0 <_vfiprintf_r+0x120>
 80081a4:	9a07      	ldr	r2, [sp, #28]
 80081a6:	4654      	mov	r4, sl
 80081a8:	2000      	movs	r0, #0
 80081aa:	f04f 0c0a 	mov.w	ip, #10
 80081ae:	4621      	mov	r1, r4
 80081b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081b4:	3b30      	subs	r3, #48	; 0x30
 80081b6:	2b09      	cmp	r3, #9
 80081b8:	d94d      	bls.n	8008256 <_vfiprintf_r+0x1a6>
 80081ba:	b1b0      	cbz	r0, 80081ea <_vfiprintf_r+0x13a>
 80081bc:	9207      	str	r2, [sp, #28]
 80081be:	e014      	b.n	80081ea <_vfiprintf_r+0x13a>
 80081c0:	eba0 0308 	sub.w	r3, r0, r8
 80081c4:	fa09 f303 	lsl.w	r3, r9, r3
 80081c8:	4313      	orrs	r3, r2
 80081ca:	9304      	str	r3, [sp, #16]
 80081cc:	46a2      	mov	sl, r4
 80081ce:	e7d2      	b.n	8008176 <_vfiprintf_r+0xc6>
 80081d0:	9b03      	ldr	r3, [sp, #12]
 80081d2:	1d19      	adds	r1, r3, #4
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	9103      	str	r1, [sp, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	bfbb      	ittet	lt
 80081dc:	425b      	neglt	r3, r3
 80081de:	f042 0202 	orrlt.w	r2, r2, #2
 80081e2:	9307      	strge	r3, [sp, #28]
 80081e4:	9307      	strlt	r3, [sp, #28]
 80081e6:	bfb8      	it	lt
 80081e8:	9204      	strlt	r2, [sp, #16]
 80081ea:	7823      	ldrb	r3, [r4, #0]
 80081ec:	2b2e      	cmp	r3, #46	; 0x2e
 80081ee:	d10c      	bne.n	800820a <_vfiprintf_r+0x15a>
 80081f0:	7863      	ldrb	r3, [r4, #1]
 80081f2:	2b2a      	cmp	r3, #42	; 0x2a
 80081f4:	d134      	bne.n	8008260 <_vfiprintf_r+0x1b0>
 80081f6:	9b03      	ldr	r3, [sp, #12]
 80081f8:	1d1a      	adds	r2, r3, #4
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	9203      	str	r2, [sp, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	bfb8      	it	lt
 8008202:	f04f 33ff 	movlt.w	r3, #4294967295
 8008206:	3402      	adds	r4, #2
 8008208:	9305      	str	r3, [sp, #20]
 800820a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80082e0 <_vfiprintf_r+0x230>
 800820e:	7821      	ldrb	r1, [r4, #0]
 8008210:	2203      	movs	r2, #3
 8008212:	4650      	mov	r0, sl
 8008214:	f7f7 ffe4 	bl	80001e0 <memchr>
 8008218:	b138      	cbz	r0, 800822a <_vfiprintf_r+0x17a>
 800821a:	9b04      	ldr	r3, [sp, #16]
 800821c:	eba0 000a 	sub.w	r0, r0, sl
 8008220:	2240      	movs	r2, #64	; 0x40
 8008222:	4082      	lsls	r2, r0
 8008224:	4313      	orrs	r3, r2
 8008226:	3401      	adds	r4, #1
 8008228:	9304      	str	r3, [sp, #16]
 800822a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822e:	4829      	ldr	r0, [pc, #164]	; (80082d4 <_vfiprintf_r+0x224>)
 8008230:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008234:	2206      	movs	r2, #6
 8008236:	f7f7 ffd3 	bl	80001e0 <memchr>
 800823a:	2800      	cmp	r0, #0
 800823c:	d03f      	beq.n	80082be <_vfiprintf_r+0x20e>
 800823e:	4b26      	ldr	r3, [pc, #152]	; (80082d8 <_vfiprintf_r+0x228>)
 8008240:	bb1b      	cbnz	r3, 800828a <_vfiprintf_r+0x1da>
 8008242:	9b03      	ldr	r3, [sp, #12]
 8008244:	3307      	adds	r3, #7
 8008246:	f023 0307 	bic.w	r3, r3, #7
 800824a:	3308      	adds	r3, #8
 800824c:	9303      	str	r3, [sp, #12]
 800824e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008250:	443b      	add	r3, r7
 8008252:	9309      	str	r3, [sp, #36]	; 0x24
 8008254:	e768      	b.n	8008128 <_vfiprintf_r+0x78>
 8008256:	fb0c 3202 	mla	r2, ip, r2, r3
 800825a:	460c      	mov	r4, r1
 800825c:	2001      	movs	r0, #1
 800825e:	e7a6      	b.n	80081ae <_vfiprintf_r+0xfe>
 8008260:	2300      	movs	r3, #0
 8008262:	3401      	adds	r4, #1
 8008264:	9305      	str	r3, [sp, #20]
 8008266:	4619      	mov	r1, r3
 8008268:	f04f 0c0a 	mov.w	ip, #10
 800826c:	4620      	mov	r0, r4
 800826e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008272:	3a30      	subs	r2, #48	; 0x30
 8008274:	2a09      	cmp	r2, #9
 8008276:	d903      	bls.n	8008280 <_vfiprintf_r+0x1d0>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0c6      	beq.n	800820a <_vfiprintf_r+0x15a>
 800827c:	9105      	str	r1, [sp, #20]
 800827e:	e7c4      	b.n	800820a <_vfiprintf_r+0x15a>
 8008280:	fb0c 2101 	mla	r1, ip, r1, r2
 8008284:	4604      	mov	r4, r0
 8008286:	2301      	movs	r3, #1
 8008288:	e7f0      	b.n	800826c <_vfiprintf_r+0x1bc>
 800828a:	ab03      	add	r3, sp, #12
 800828c:	9300      	str	r3, [sp, #0]
 800828e:	462a      	mov	r2, r5
 8008290:	4b12      	ldr	r3, [pc, #72]	; (80082dc <_vfiprintf_r+0x22c>)
 8008292:	a904      	add	r1, sp, #16
 8008294:	4630      	mov	r0, r6
 8008296:	f7fc f999 	bl	80045cc <_printf_float>
 800829a:	4607      	mov	r7, r0
 800829c:	1c78      	adds	r0, r7, #1
 800829e:	d1d6      	bne.n	800824e <_vfiprintf_r+0x19e>
 80082a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082a2:	07d9      	lsls	r1, r3, #31
 80082a4:	d405      	bmi.n	80082b2 <_vfiprintf_r+0x202>
 80082a6:	89ab      	ldrh	r3, [r5, #12]
 80082a8:	059a      	lsls	r2, r3, #22
 80082aa:	d402      	bmi.n	80082b2 <_vfiprintf_r+0x202>
 80082ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082ae:	f7fd fab7 	bl	8005820 <__retarget_lock_release_recursive>
 80082b2:	89ab      	ldrh	r3, [r5, #12]
 80082b4:	065b      	lsls	r3, r3, #25
 80082b6:	f53f af1d 	bmi.w	80080f4 <_vfiprintf_r+0x44>
 80082ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082bc:	e71c      	b.n	80080f8 <_vfiprintf_r+0x48>
 80082be:	ab03      	add	r3, sp, #12
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	462a      	mov	r2, r5
 80082c4:	4b05      	ldr	r3, [pc, #20]	; (80082dc <_vfiprintf_r+0x22c>)
 80082c6:	a904      	add	r1, sp, #16
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7fc fc23 	bl	8004b14 <_printf_i>
 80082ce:	e7e4      	b.n	800829a <_vfiprintf_r+0x1ea>
 80082d0:	08009279 	.word	0x08009279
 80082d4:	08009283 	.word	0x08009283
 80082d8:	080045cd 	.word	0x080045cd
 80082dc:	0800808b 	.word	0x0800808b
 80082e0:	0800927f 	.word	0x0800927f

080082e4 <__sflush_r>:
 80082e4:	898a      	ldrh	r2, [r1, #12]
 80082e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ea:	4605      	mov	r5, r0
 80082ec:	0710      	lsls	r0, r2, #28
 80082ee:	460c      	mov	r4, r1
 80082f0:	d458      	bmi.n	80083a4 <__sflush_r+0xc0>
 80082f2:	684b      	ldr	r3, [r1, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dc05      	bgt.n	8008304 <__sflush_r+0x20>
 80082f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dc02      	bgt.n	8008304 <__sflush_r+0x20>
 80082fe:	2000      	movs	r0, #0
 8008300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008306:	2e00      	cmp	r6, #0
 8008308:	d0f9      	beq.n	80082fe <__sflush_r+0x1a>
 800830a:	2300      	movs	r3, #0
 800830c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008310:	682f      	ldr	r7, [r5, #0]
 8008312:	6a21      	ldr	r1, [r4, #32]
 8008314:	602b      	str	r3, [r5, #0]
 8008316:	d032      	beq.n	800837e <__sflush_r+0x9a>
 8008318:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	075a      	lsls	r2, r3, #29
 800831e:	d505      	bpl.n	800832c <__sflush_r+0x48>
 8008320:	6863      	ldr	r3, [r4, #4]
 8008322:	1ac0      	subs	r0, r0, r3
 8008324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008326:	b10b      	cbz	r3, 800832c <__sflush_r+0x48>
 8008328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800832a:	1ac0      	subs	r0, r0, r3
 800832c:	2300      	movs	r3, #0
 800832e:	4602      	mov	r2, r0
 8008330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008332:	6a21      	ldr	r1, [r4, #32]
 8008334:	4628      	mov	r0, r5
 8008336:	47b0      	blx	r6
 8008338:	1c43      	adds	r3, r0, #1
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	d106      	bne.n	800834c <__sflush_r+0x68>
 800833e:	6829      	ldr	r1, [r5, #0]
 8008340:	291d      	cmp	r1, #29
 8008342:	d82b      	bhi.n	800839c <__sflush_r+0xb8>
 8008344:	4a29      	ldr	r2, [pc, #164]	; (80083ec <__sflush_r+0x108>)
 8008346:	410a      	asrs	r2, r1
 8008348:	07d6      	lsls	r6, r2, #31
 800834a:	d427      	bmi.n	800839c <__sflush_r+0xb8>
 800834c:	2200      	movs	r2, #0
 800834e:	6062      	str	r2, [r4, #4]
 8008350:	04d9      	lsls	r1, r3, #19
 8008352:	6922      	ldr	r2, [r4, #16]
 8008354:	6022      	str	r2, [r4, #0]
 8008356:	d504      	bpl.n	8008362 <__sflush_r+0x7e>
 8008358:	1c42      	adds	r2, r0, #1
 800835a:	d101      	bne.n	8008360 <__sflush_r+0x7c>
 800835c:	682b      	ldr	r3, [r5, #0]
 800835e:	b903      	cbnz	r3, 8008362 <__sflush_r+0x7e>
 8008360:	6560      	str	r0, [r4, #84]	; 0x54
 8008362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008364:	602f      	str	r7, [r5, #0]
 8008366:	2900      	cmp	r1, #0
 8008368:	d0c9      	beq.n	80082fe <__sflush_r+0x1a>
 800836a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800836e:	4299      	cmp	r1, r3
 8008370:	d002      	beq.n	8008378 <__sflush_r+0x94>
 8008372:	4628      	mov	r0, r5
 8008374:	f7fe f8d6 	bl	8006524 <_free_r>
 8008378:	2000      	movs	r0, #0
 800837a:	6360      	str	r0, [r4, #52]	; 0x34
 800837c:	e7c0      	b.n	8008300 <__sflush_r+0x1c>
 800837e:	2301      	movs	r3, #1
 8008380:	4628      	mov	r0, r5
 8008382:	47b0      	blx	r6
 8008384:	1c41      	adds	r1, r0, #1
 8008386:	d1c8      	bne.n	800831a <__sflush_r+0x36>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0c5      	beq.n	800831a <__sflush_r+0x36>
 800838e:	2b1d      	cmp	r3, #29
 8008390:	d001      	beq.n	8008396 <__sflush_r+0xb2>
 8008392:	2b16      	cmp	r3, #22
 8008394:	d101      	bne.n	800839a <__sflush_r+0xb6>
 8008396:	602f      	str	r7, [r5, #0]
 8008398:	e7b1      	b.n	80082fe <__sflush_r+0x1a>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	e7ad      	b.n	8008300 <__sflush_r+0x1c>
 80083a4:	690f      	ldr	r7, [r1, #16]
 80083a6:	2f00      	cmp	r7, #0
 80083a8:	d0a9      	beq.n	80082fe <__sflush_r+0x1a>
 80083aa:	0793      	lsls	r3, r2, #30
 80083ac:	680e      	ldr	r6, [r1, #0]
 80083ae:	bf08      	it	eq
 80083b0:	694b      	ldreq	r3, [r1, #20]
 80083b2:	600f      	str	r7, [r1, #0]
 80083b4:	bf18      	it	ne
 80083b6:	2300      	movne	r3, #0
 80083b8:	eba6 0807 	sub.w	r8, r6, r7
 80083bc:	608b      	str	r3, [r1, #8]
 80083be:	f1b8 0f00 	cmp.w	r8, #0
 80083c2:	dd9c      	ble.n	80082fe <__sflush_r+0x1a>
 80083c4:	6a21      	ldr	r1, [r4, #32]
 80083c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083c8:	4643      	mov	r3, r8
 80083ca:	463a      	mov	r2, r7
 80083cc:	4628      	mov	r0, r5
 80083ce:	47b0      	blx	r6
 80083d0:	2800      	cmp	r0, #0
 80083d2:	dc06      	bgt.n	80083e2 <__sflush_r+0xfe>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083da:	81a3      	strh	r3, [r4, #12]
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	e78e      	b.n	8008300 <__sflush_r+0x1c>
 80083e2:	4407      	add	r7, r0
 80083e4:	eba8 0800 	sub.w	r8, r8, r0
 80083e8:	e7e9      	b.n	80083be <__sflush_r+0xda>
 80083ea:	bf00      	nop
 80083ec:	dfbffffe 	.word	0xdfbffffe

080083f0 <_fflush_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	690b      	ldr	r3, [r1, #16]
 80083f4:	4605      	mov	r5, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	b913      	cbnz	r3, 8008400 <_fflush_r+0x10>
 80083fa:	2500      	movs	r5, #0
 80083fc:	4628      	mov	r0, r5
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	b118      	cbz	r0, 800840a <_fflush_r+0x1a>
 8008402:	6a03      	ldr	r3, [r0, #32]
 8008404:	b90b      	cbnz	r3, 800840a <_fflush_r+0x1a>
 8008406:	f7fc ff43 	bl	8005290 <__sinit>
 800840a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0f3      	beq.n	80083fa <_fflush_r+0xa>
 8008412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008414:	07d0      	lsls	r0, r2, #31
 8008416:	d404      	bmi.n	8008422 <_fflush_r+0x32>
 8008418:	0599      	lsls	r1, r3, #22
 800841a:	d402      	bmi.n	8008422 <_fflush_r+0x32>
 800841c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800841e:	f7fd f9fe 	bl	800581e <__retarget_lock_acquire_recursive>
 8008422:	4628      	mov	r0, r5
 8008424:	4621      	mov	r1, r4
 8008426:	f7ff ff5d 	bl	80082e4 <__sflush_r>
 800842a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800842c:	07da      	lsls	r2, r3, #31
 800842e:	4605      	mov	r5, r0
 8008430:	d4e4      	bmi.n	80083fc <_fflush_r+0xc>
 8008432:	89a3      	ldrh	r3, [r4, #12]
 8008434:	059b      	lsls	r3, r3, #22
 8008436:	d4e1      	bmi.n	80083fc <_fflush_r+0xc>
 8008438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800843a:	f7fd f9f1 	bl	8005820 <__retarget_lock_release_recursive>
 800843e:	e7dd      	b.n	80083fc <_fflush_r+0xc>

08008440 <__swhatbuf_r>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	460c      	mov	r4, r1
 8008444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008448:	2900      	cmp	r1, #0
 800844a:	b096      	sub	sp, #88	; 0x58
 800844c:	4615      	mov	r5, r2
 800844e:	461e      	mov	r6, r3
 8008450:	da0d      	bge.n	800846e <__swhatbuf_r+0x2e>
 8008452:	89a3      	ldrh	r3, [r4, #12]
 8008454:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008458:	f04f 0100 	mov.w	r1, #0
 800845c:	bf0c      	ite	eq
 800845e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008462:	2340      	movne	r3, #64	; 0x40
 8008464:	2000      	movs	r0, #0
 8008466:	6031      	str	r1, [r6, #0]
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	b016      	add	sp, #88	; 0x58
 800846c:	bd70      	pop	{r4, r5, r6, pc}
 800846e:	466a      	mov	r2, sp
 8008470:	f000 f874 	bl	800855c <_fstat_r>
 8008474:	2800      	cmp	r0, #0
 8008476:	dbec      	blt.n	8008452 <__swhatbuf_r+0x12>
 8008478:	9901      	ldr	r1, [sp, #4]
 800847a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800847e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008482:	4259      	negs	r1, r3
 8008484:	4159      	adcs	r1, r3
 8008486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800848a:	e7eb      	b.n	8008464 <__swhatbuf_r+0x24>

0800848c <__smakebuf_r>:
 800848c:	898b      	ldrh	r3, [r1, #12]
 800848e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008490:	079d      	lsls	r5, r3, #30
 8008492:	4606      	mov	r6, r0
 8008494:	460c      	mov	r4, r1
 8008496:	d507      	bpl.n	80084a8 <__smakebuf_r+0x1c>
 8008498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	6123      	str	r3, [r4, #16]
 80084a0:	2301      	movs	r3, #1
 80084a2:	6163      	str	r3, [r4, #20]
 80084a4:	b002      	add	sp, #8
 80084a6:	bd70      	pop	{r4, r5, r6, pc}
 80084a8:	ab01      	add	r3, sp, #4
 80084aa:	466a      	mov	r2, sp
 80084ac:	f7ff ffc8 	bl	8008440 <__swhatbuf_r>
 80084b0:	9900      	ldr	r1, [sp, #0]
 80084b2:	4605      	mov	r5, r0
 80084b4:	4630      	mov	r0, r6
 80084b6:	f7fe f8a9 	bl	800660c <_malloc_r>
 80084ba:	b948      	cbnz	r0, 80084d0 <__smakebuf_r+0x44>
 80084bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084c0:	059a      	lsls	r2, r3, #22
 80084c2:	d4ef      	bmi.n	80084a4 <__smakebuf_r+0x18>
 80084c4:	f023 0303 	bic.w	r3, r3, #3
 80084c8:	f043 0302 	orr.w	r3, r3, #2
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	e7e3      	b.n	8008498 <__smakebuf_r+0xc>
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	6020      	str	r0, [r4, #0]
 80084d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d8:	81a3      	strh	r3, [r4, #12]
 80084da:	9b00      	ldr	r3, [sp, #0]
 80084dc:	6163      	str	r3, [r4, #20]
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	6120      	str	r0, [r4, #16]
 80084e2:	b15b      	cbz	r3, 80084fc <__smakebuf_r+0x70>
 80084e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 f849 	bl	8008580 <_isatty_r>
 80084ee:	b128      	cbz	r0, 80084fc <__smakebuf_r+0x70>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	f023 0303 	bic.w	r3, r3, #3
 80084f6:	f043 0301 	orr.w	r3, r3, #1
 80084fa:	81a3      	strh	r3, [r4, #12]
 80084fc:	89a3      	ldrh	r3, [r4, #12]
 80084fe:	431d      	orrs	r5, r3
 8008500:	81a5      	strh	r5, [r4, #12]
 8008502:	e7cf      	b.n	80084a4 <__smakebuf_r+0x18>

08008504 <memmove>:
 8008504:	4288      	cmp	r0, r1
 8008506:	b510      	push	{r4, lr}
 8008508:	eb01 0402 	add.w	r4, r1, r2
 800850c:	d902      	bls.n	8008514 <memmove+0x10>
 800850e:	4284      	cmp	r4, r0
 8008510:	4623      	mov	r3, r4
 8008512:	d807      	bhi.n	8008524 <memmove+0x20>
 8008514:	1e43      	subs	r3, r0, #1
 8008516:	42a1      	cmp	r1, r4
 8008518:	d008      	beq.n	800852c <memmove+0x28>
 800851a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800851e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008522:	e7f8      	b.n	8008516 <memmove+0x12>
 8008524:	4402      	add	r2, r0
 8008526:	4601      	mov	r1, r0
 8008528:	428a      	cmp	r2, r1
 800852a:	d100      	bne.n	800852e <memmove+0x2a>
 800852c:	bd10      	pop	{r4, pc}
 800852e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008532:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008536:	e7f7      	b.n	8008528 <memmove+0x24>

08008538 <strncmp>:
 8008538:	b510      	push	{r4, lr}
 800853a:	b16a      	cbz	r2, 8008558 <strncmp+0x20>
 800853c:	3901      	subs	r1, #1
 800853e:	1884      	adds	r4, r0, r2
 8008540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008544:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008548:	429a      	cmp	r2, r3
 800854a:	d103      	bne.n	8008554 <strncmp+0x1c>
 800854c:	42a0      	cmp	r0, r4
 800854e:	d001      	beq.n	8008554 <strncmp+0x1c>
 8008550:	2a00      	cmp	r2, #0
 8008552:	d1f5      	bne.n	8008540 <strncmp+0x8>
 8008554:	1ad0      	subs	r0, r2, r3
 8008556:	bd10      	pop	{r4, pc}
 8008558:	4610      	mov	r0, r2
 800855a:	e7fc      	b.n	8008556 <strncmp+0x1e>

0800855c <_fstat_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d07      	ldr	r5, [pc, #28]	; (800857c <_fstat_r+0x20>)
 8008560:	2300      	movs	r3, #0
 8008562:	4604      	mov	r4, r0
 8008564:	4608      	mov	r0, r1
 8008566:	4611      	mov	r1, r2
 8008568:	602b      	str	r3, [r5, #0]
 800856a:	f7f9 fb9c 	bl	8001ca6 <_fstat>
 800856e:	1c43      	adds	r3, r0, #1
 8008570:	d102      	bne.n	8008578 <_fstat_r+0x1c>
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	b103      	cbz	r3, 8008578 <_fstat_r+0x1c>
 8008576:	6023      	str	r3, [r4, #0]
 8008578:	bd38      	pop	{r3, r4, r5, pc}
 800857a:	bf00      	nop
 800857c:	2000046c 	.word	0x2000046c

08008580 <_isatty_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4d06      	ldr	r5, [pc, #24]	; (800859c <_isatty_r+0x1c>)
 8008584:	2300      	movs	r3, #0
 8008586:	4604      	mov	r4, r0
 8008588:	4608      	mov	r0, r1
 800858a:	602b      	str	r3, [r5, #0]
 800858c:	f7f9 fb9b 	bl	8001cc6 <_isatty>
 8008590:	1c43      	adds	r3, r0, #1
 8008592:	d102      	bne.n	800859a <_isatty_r+0x1a>
 8008594:	682b      	ldr	r3, [r5, #0]
 8008596:	b103      	cbz	r3, 800859a <_isatty_r+0x1a>
 8008598:	6023      	str	r3, [r4, #0]
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	2000046c 	.word	0x2000046c

080085a0 <_sbrk_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4d06      	ldr	r5, [pc, #24]	; (80085bc <_sbrk_r+0x1c>)
 80085a4:	2300      	movs	r3, #0
 80085a6:	4604      	mov	r4, r0
 80085a8:	4608      	mov	r0, r1
 80085aa:	602b      	str	r3, [r5, #0]
 80085ac:	f7f9 fba4 	bl	8001cf8 <_sbrk>
 80085b0:	1c43      	adds	r3, r0, #1
 80085b2:	d102      	bne.n	80085ba <_sbrk_r+0x1a>
 80085b4:	682b      	ldr	r3, [r5, #0]
 80085b6:	b103      	cbz	r3, 80085ba <_sbrk_r+0x1a>
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	bd38      	pop	{r3, r4, r5, pc}
 80085bc:	2000046c 	.word	0x2000046c

080085c0 <memcpy>:
 80085c0:	440a      	add	r2, r1
 80085c2:	4291      	cmp	r1, r2
 80085c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085c8:	d100      	bne.n	80085cc <memcpy+0xc>
 80085ca:	4770      	bx	lr
 80085cc:	b510      	push	{r4, lr}
 80085ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085d6:	4291      	cmp	r1, r2
 80085d8:	d1f9      	bne.n	80085ce <memcpy+0xe>
 80085da:	bd10      	pop	{r4, pc}
 80085dc:	0000      	movs	r0, r0
	...

080085e0 <nan>:
 80085e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80085e8 <nan+0x8>
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	00000000 	.word	0x00000000
 80085ec:	7ff80000 	.word	0x7ff80000

080085f0 <__assert_func>:
 80085f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085f2:	4614      	mov	r4, r2
 80085f4:	461a      	mov	r2, r3
 80085f6:	4b09      	ldr	r3, [pc, #36]	; (800861c <__assert_func+0x2c>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4605      	mov	r5, r0
 80085fc:	68d8      	ldr	r0, [r3, #12]
 80085fe:	b14c      	cbz	r4, 8008614 <__assert_func+0x24>
 8008600:	4b07      	ldr	r3, [pc, #28]	; (8008620 <__assert_func+0x30>)
 8008602:	9100      	str	r1, [sp, #0]
 8008604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008608:	4906      	ldr	r1, [pc, #24]	; (8008624 <__assert_func+0x34>)
 800860a:	462b      	mov	r3, r5
 800860c:	f000 fbca 	bl	8008da4 <fiprintf>
 8008610:	f000 fbda 	bl	8008dc8 <abort>
 8008614:	4b04      	ldr	r3, [pc, #16]	; (8008628 <__assert_func+0x38>)
 8008616:	461c      	mov	r4, r3
 8008618:	e7f3      	b.n	8008602 <__assert_func+0x12>
 800861a:	bf00      	nop
 800861c:	20000064 	.word	0x20000064
 8008620:	08009292 	.word	0x08009292
 8008624:	0800929f 	.word	0x0800929f
 8008628:	080092cd 	.word	0x080092cd

0800862c <_calloc_r>:
 800862c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800862e:	fba1 2402 	umull	r2, r4, r1, r2
 8008632:	b94c      	cbnz	r4, 8008648 <_calloc_r+0x1c>
 8008634:	4611      	mov	r1, r2
 8008636:	9201      	str	r2, [sp, #4]
 8008638:	f7fd ffe8 	bl	800660c <_malloc_r>
 800863c:	9a01      	ldr	r2, [sp, #4]
 800863e:	4605      	mov	r5, r0
 8008640:	b930      	cbnz	r0, 8008650 <_calloc_r+0x24>
 8008642:	4628      	mov	r0, r5
 8008644:	b003      	add	sp, #12
 8008646:	bd30      	pop	{r4, r5, pc}
 8008648:	220c      	movs	r2, #12
 800864a:	6002      	str	r2, [r0, #0]
 800864c:	2500      	movs	r5, #0
 800864e:	e7f8      	b.n	8008642 <_calloc_r+0x16>
 8008650:	4621      	mov	r1, r4
 8008652:	f7fd f867 	bl	8005724 <memset>
 8008656:	e7f4      	b.n	8008642 <_calloc_r+0x16>

08008658 <rshift>:
 8008658:	6903      	ldr	r3, [r0, #16]
 800865a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800865e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008662:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008666:	f100 0414 	add.w	r4, r0, #20
 800866a:	dd45      	ble.n	80086f8 <rshift+0xa0>
 800866c:	f011 011f 	ands.w	r1, r1, #31
 8008670:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008674:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008678:	d10c      	bne.n	8008694 <rshift+0x3c>
 800867a:	f100 0710 	add.w	r7, r0, #16
 800867e:	4629      	mov	r1, r5
 8008680:	42b1      	cmp	r1, r6
 8008682:	d334      	bcc.n	80086ee <rshift+0x96>
 8008684:	1a9b      	subs	r3, r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	1eea      	subs	r2, r5, #3
 800868a:	4296      	cmp	r6, r2
 800868c:	bf38      	it	cc
 800868e:	2300      	movcc	r3, #0
 8008690:	4423      	add	r3, r4
 8008692:	e015      	b.n	80086c0 <rshift+0x68>
 8008694:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008698:	f1c1 0820 	rsb	r8, r1, #32
 800869c:	40cf      	lsrs	r7, r1
 800869e:	f105 0e04 	add.w	lr, r5, #4
 80086a2:	46a1      	mov	r9, r4
 80086a4:	4576      	cmp	r6, lr
 80086a6:	46f4      	mov	ip, lr
 80086a8:	d815      	bhi.n	80086d6 <rshift+0x7e>
 80086aa:	1a9a      	subs	r2, r3, r2
 80086ac:	0092      	lsls	r2, r2, #2
 80086ae:	3a04      	subs	r2, #4
 80086b0:	3501      	adds	r5, #1
 80086b2:	42ae      	cmp	r6, r5
 80086b4:	bf38      	it	cc
 80086b6:	2200      	movcc	r2, #0
 80086b8:	18a3      	adds	r3, r4, r2
 80086ba:	50a7      	str	r7, [r4, r2]
 80086bc:	b107      	cbz	r7, 80086c0 <rshift+0x68>
 80086be:	3304      	adds	r3, #4
 80086c0:	1b1a      	subs	r2, r3, r4
 80086c2:	42a3      	cmp	r3, r4
 80086c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086c8:	bf08      	it	eq
 80086ca:	2300      	moveq	r3, #0
 80086cc:	6102      	str	r2, [r0, #16]
 80086ce:	bf08      	it	eq
 80086d0:	6143      	streq	r3, [r0, #20]
 80086d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086d6:	f8dc c000 	ldr.w	ip, [ip]
 80086da:	fa0c fc08 	lsl.w	ip, ip, r8
 80086de:	ea4c 0707 	orr.w	r7, ip, r7
 80086e2:	f849 7b04 	str.w	r7, [r9], #4
 80086e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086ea:	40cf      	lsrs	r7, r1
 80086ec:	e7da      	b.n	80086a4 <rshift+0x4c>
 80086ee:	f851 cb04 	ldr.w	ip, [r1], #4
 80086f2:	f847 cf04 	str.w	ip, [r7, #4]!
 80086f6:	e7c3      	b.n	8008680 <rshift+0x28>
 80086f8:	4623      	mov	r3, r4
 80086fa:	e7e1      	b.n	80086c0 <rshift+0x68>

080086fc <__hexdig_fun>:
 80086fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008700:	2b09      	cmp	r3, #9
 8008702:	d802      	bhi.n	800870a <__hexdig_fun+0xe>
 8008704:	3820      	subs	r0, #32
 8008706:	b2c0      	uxtb	r0, r0
 8008708:	4770      	bx	lr
 800870a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800870e:	2b05      	cmp	r3, #5
 8008710:	d801      	bhi.n	8008716 <__hexdig_fun+0x1a>
 8008712:	3847      	subs	r0, #71	; 0x47
 8008714:	e7f7      	b.n	8008706 <__hexdig_fun+0xa>
 8008716:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800871a:	2b05      	cmp	r3, #5
 800871c:	d801      	bhi.n	8008722 <__hexdig_fun+0x26>
 800871e:	3827      	subs	r0, #39	; 0x27
 8008720:	e7f1      	b.n	8008706 <__hexdig_fun+0xa>
 8008722:	2000      	movs	r0, #0
 8008724:	4770      	bx	lr
	...

08008728 <__gethex>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	4617      	mov	r7, r2
 800872e:	680a      	ldr	r2, [r1, #0]
 8008730:	b085      	sub	sp, #20
 8008732:	f102 0b02 	add.w	fp, r2, #2
 8008736:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800873a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800873e:	4681      	mov	r9, r0
 8008740:	468a      	mov	sl, r1
 8008742:	9302      	str	r3, [sp, #8]
 8008744:	32fe      	adds	r2, #254	; 0xfe
 8008746:	eb02 030b 	add.w	r3, r2, fp
 800874a:	46d8      	mov	r8, fp
 800874c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	2830      	cmp	r0, #48	; 0x30
 8008754:	d0f7      	beq.n	8008746 <__gethex+0x1e>
 8008756:	f7ff ffd1 	bl	80086fc <__hexdig_fun>
 800875a:	4604      	mov	r4, r0
 800875c:	2800      	cmp	r0, #0
 800875e:	d138      	bne.n	80087d2 <__gethex+0xaa>
 8008760:	49a7      	ldr	r1, [pc, #668]	; (8008a00 <__gethex+0x2d8>)
 8008762:	2201      	movs	r2, #1
 8008764:	4640      	mov	r0, r8
 8008766:	f7ff fee7 	bl	8008538 <strncmp>
 800876a:	4606      	mov	r6, r0
 800876c:	2800      	cmp	r0, #0
 800876e:	d169      	bne.n	8008844 <__gethex+0x11c>
 8008770:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008774:	465d      	mov	r5, fp
 8008776:	f7ff ffc1 	bl	80086fc <__hexdig_fun>
 800877a:	2800      	cmp	r0, #0
 800877c:	d064      	beq.n	8008848 <__gethex+0x120>
 800877e:	465a      	mov	r2, fp
 8008780:	7810      	ldrb	r0, [r2, #0]
 8008782:	2830      	cmp	r0, #48	; 0x30
 8008784:	4690      	mov	r8, r2
 8008786:	f102 0201 	add.w	r2, r2, #1
 800878a:	d0f9      	beq.n	8008780 <__gethex+0x58>
 800878c:	f7ff ffb6 	bl	80086fc <__hexdig_fun>
 8008790:	2301      	movs	r3, #1
 8008792:	fab0 f480 	clz	r4, r0
 8008796:	0964      	lsrs	r4, r4, #5
 8008798:	465e      	mov	r6, fp
 800879a:	9301      	str	r3, [sp, #4]
 800879c:	4642      	mov	r2, r8
 800879e:	4615      	mov	r5, r2
 80087a0:	3201      	adds	r2, #1
 80087a2:	7828      	ldrb	r0, [r5, #0]
 80087a4:	f7ff ffaa 	bl	80086fc <__hexdig_fun>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d1f8      	bne.n	800879e <__gethex+0x76>
 80087ac:	4994      	ldr	r1, [pc, #592]	; (8008a00 <__gethex+0x2d8>)
 80087ae:	2201      	movs	r2, #1
 80087b0:	4628      	mov	r0, r5
 80087b2:	f7ff fec1 	bl	8008538 <strncmp>
 80087b6:	b978      	cbnz	r0, 80087d8 <__gethex+0xb0>
 80087b8:	b946      	cbnz	r6, 80087cc <__gethex+0xa4>
 80087ba:	1c6e      	adds	r6, r5, #1
 80087bc:	4632      	mov	r2, r6
 80087be:	4615      	mov	r5, r2
 80087c0:	3201      	adds	r2, #1
 80087c2:	7828      	ldrb	r0, [r5, #0]
 80087c4:	f7ff ff9a 	bl	80086fc <__hexdig_fun>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d1f8      	bne.n	80087be <__gethex+0x96>
 80087cc:	1b73      	subs	r3, r6, r5
 80087ce:	009e      	lsls	r6, r3, #2
 80087d0:	e004      	b.n	80087dc <__gethex+0xb4>
 80087d2:	2400      	movs	r4, #0
 80087d4:	4626      	mov	r6, r4
 80087d6:	e7e1      	b.n	800879c <__gethex+0x74>
 80087d8:	2e00      	cmp	r6, #0
 80087da:	d1f7      	bne.n	80087cc <__gethex+0xa4>
 80087dc:	782b      	ldrb	r3, [r5, #0]
 80087de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087e2:	2b50      	cmp	r3, #80	; 0x50
 80087e4:	d13d      	bne.n	8008862 <__gethex+0x13a>
 80087e6:	786b      	ldrb	r3, [r5, #1]
 80087e8:	2b2b      	cmp	r3, #43	; 0x2b
 80087ea:	d02f      	beq.n	800884c <__gethex+0x124>
 80087ec:	2b2d      	cmp	r3, #45	; 0x2d
 80087ee:	d031      	beq.n	8008854 <__gethex+0x12c>
 80087f0:	1c69      	adds	r1, r5, #1
 80087f2:	f04f 0b00 	mov.w	fp, #0
 80087f6:	7808      	ldrb	r0, [r1, #0]
 80087f8:	f7ff ff80 	bl	80086fc <__hexdig_fun>
 80087fc:	1e42      	subs	r2, r0, #1
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	2a18      	cmp	r2, #24
 8008802:	d82e      	bhi.n	8008862 <__gethex+0x13a>
 8008804:	f1a0 0210 	sub.w	r2, r0, #16
 8008808:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800880c:	f7ff ff76 	bl	80086fc <__hexdig_fun>
 8008810:	f100 3cff 	add.w	ip, r0, #4294967295
 8008814:	fa5f fc8c 	uxtb.w	ip, ip
 8008818:	f1bc 0f18 	cmp.w	ip, #24
 800881c:	d91d      	bls.n	800885a <__gethex+0x132>
 800881e:	f1bb 0f00 	cmp.w	fp, #0
 8008822:	d000      	beq.n	8008826 <__gethex+0xfe>
 8008824:	4252      	negs	r2, r2
 8008826:	4416      	add	r6, r2
 8008828:	f8ca 1000 	str.w	r1, [sl]
 800882c:	b1dc      	cbz	r4, 8008866 <__gethex+0x13e>
 800882e:	9b01      	ldr	r3, [sp, #4]
 8008830:	2b00      	cmp	r3, #0
 8008832:	bf14      	ite	ne
 8008834:	f04f 0800 	movne.w	r8, #0
 8008838:	f04f 0806 	moveq.w	r8, #6
 800883c:	4640      	mov	r0, r8
 800883e:	b005      	add	sp, #20
 8008840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008844:	4645      	mov	r5, r8
 8008846:	4626      	mov	r6, r4
 8008848:	2401      	movs	r4, #1
 800884a:	e7c7      	b.n	80087dc <__gethex+0xb4>
 800884c:	f04f 0b00 	mov.w	fp, #0
 8008850:	1ca9      	adds	r1, r5, #2
 8008852:	e7d0      	b.n	80087f6 <__gethex+0xce>
 8008854:	f04f 0b01 	mov.w	fp, #1
 8008858:	e7fa      	b.n	8008850 <__gethex+0x128>
 800885a:	230a      	movs	r3, #10
 800885c:	fb03 0002 	mla	r0, r3, r2, r0
 8008860:	e7d0      	b.n	8008804 <__gethex+0xdc>
 8008862:	4629      	mov	r1, r5
 8008864:	e7e0      	b.n	8008828 <__gethex+0x100>
 8008866:	eba5 0308 	sub.w	r3, r5, r8
 800886a:	3b01      	subs	r3, #1
 800886c:	4621      	mov	r1, r4
 800886e:	2b07      	cmp	r3, #7
 8008870:	dc0a      	bgt.n	8008888 <__gethex+0x160>
 8008872:	4648      	mov	r0, r9
 8008874:	f7fd ff56 	bl	8006724 <_Balloc>
 8008878:	4604      	mov	r4, r0
 800887a:	b940      	cbnz	r0, 800888e <__gethex+0x166>
 800887c:	4b61      	ldr	r3, [pc, #388]	; (8008a04 <__gethex+0x2dc>)
 800887e:	4602      	mov	r2, r0
 8008880:	21e4      	movs	r1, #228	; 0xe4
 8008882:	4861      	ldr	r0, [pc, #388]	; (8008a08 <__gethex+0x2e0>)
 8008884:	f7ff feb4 	bl	80085f0 <__assert_func>
 8008888:	3101      	adds	r1, #1
 800888a:	105b      	asrs	r3, r3, #1
 800888c:	e7ef      	b.n	800886e <__gethex+0x146>
 800888e:	f100 0a14 	add.w	sl, r0, #20
 8008892:	2300      	movs	r3, #0
 8008894:	495a      	ldr	r1, [pc, #360]	; (8008a00 <__gethex+0x2d8>)
 8008896:	f8cd a004 	str.w	sl, [sp, #4]
 800889a:	469b      	mov	fp, r3
 800889c:	45a8      	cmp	r8, r5
 800889e:	d342      	bcc.n	8008926 <__gethex+0x1fe>
 80088a0:	9801      	ldr	r0, [sp, #4]
 80088a2:	f840 bb04 	str.w	fp, [r0], #4
 80088a6:	eba0 000a 	sub.w	r0, r0, sl
 80088aa:	1080      	asrs	r0, r0, #2
 80088ac:	6120      	str	r0, [r4, #16]
 80088ae:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80088b2:	4658      	mov	r0, fp
 80088b4:	f7fe f828 	bl	8006908 <__hi0bits>
 80088b8:	683d      	ldr	r5, [r7, #0]
 80088ba:	eba8 0000 	sub.w	r0, r8, r0
 80088be:	42a8      	cmp	r0, r5
 80088c0:	dd59      	ble.n	8008976 <__gethex+0x24e>
 80088c2:	eba0 0805 	sub.w	r8, r0, r5
 80088c6:	4641      	mov	r1, r8
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7fe fbb7 	bl	800703c <__any_on>
 80088ce:	4683      	mov	fp, r0
 80088d0:	b1b8      	cbz	r0, 8008902 <__gethex+0x1da>
 80088d2:	f108 33ff 	add.w	r3, r8, #4294967295
 80088d6:	1159      	asrs	r1, r3, #5
 80088d8:	f003 021f 	and.w	r2, r3, #31
 80088dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80088e0:	f04f 0b01 	mov.w	fp, #1
 80088e4:	fa0b f202 	lsl.w	r2, fp, r2
 80088e8:	420a      	tst	r2, r1
 80088ea:	d00a      	beq.n	8008902 <__gethex+0x1da>
 80088ec:	455b      	cmp	r3, fp
 80088ee:	dd06      	ble.n	80088fe <__gethex+0x1d6>
 80088f0:	f1a8 0102 	sub.w	r1, r8, #2
 80088f4:	4620      	mov	r0, r4
 80088f6:	f7fe fba1 	bl	800703c <__any_on>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d138      	bne.n	8008970 <__gethex+0x248>
 80088fe:	f04f 0b02 	mov.w	fp, #2
 8008902:	4641      	mov	r1, r8
 8008904:	4620      	mov	r0, r4
 8008906:	f7ff fea7 	bl	8008658 <rshift>
 800890a:	4446      	add	r6, r8
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	42b3      	cmp	r3, r6
 8008910:	da41      	bge.n	8008996 <__gethex+0x26e>
 8008912:	4621      	mov	r1, r4
 8008914:	4648      	mov	r0, r9
 8008916:	f7fd ff45 	bl	80067a4 <_Bfree>
 800891a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800891c:	2300      	movs	r3, #0
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008924:	e78a      	b.n	800883c <__gethex+0x114>
 8008926:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800892a:	2a2e      	cmp	r2, #46	; 0x2e
 800892c:	d014      	beq.n	8008958 <__gethex+0x230>
 800892e:	2b20      	cmp	r3, #32
 8008930:	d106      	bne.n	8008940 <__gethex+0x218>
 8008932:	9b01      	ldr	r3, [sp, #4]
 8008934:	f843 bb04 	str.w	fp, [r3], #4
 8008938:	f04f 0b00 	mov.w	fp, #0
 800893c:	9301      	str	r3, [sp, #4]
 800893e:	465b      	mov	r3, fp
 8008940:	7828      	ldrb	r0, [r5, #0]
 8008942:	9303      	str	r3, [sp, #12]
 8008944:	f7ff feda 	bl	80086fc <__hexdig_fun>
 8008948:	9b03      	ldr	r3, [sp, #12]
 800894a:	f000 000f 	and.w	r0, r0, #15
 800894e:	4098      	lsls	r0, r3
 8008950:	ea4b 0b00 	orr.w	fp, fp, r0
 8008954:	3304      	adds	r3, #4
 8008956:	e7a1      	b.n	800889c <__gethex+0x174>
 8008958:	45a8      	cmp	r8, r5
 800895a:	d8e8      	bhi.n	800892e <__gethex+0x206>
 800895c:	2201      	movs	r2, #1
 800895e:	4628      	mov	r0, r5
 8008960:	9303      	str	r3, [sp, #12]
 8008962:	f7ff fde9 	bl	8008538 <strncmp>
 8008966:	4926      	ldr	r1, [pc, #152]	; (8008a00 <__gethex+0x2d8>)
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	2800      	cmp	r0, #0
 800896c:	d1df      	bne.n	800892e <__gethex+0x206>
 800896e:	e795      	b.n	800889c <__gethex+0x174>
 8008970:	f04f 0b03 	mov.w	fp, #3
 8008974:	e7c5      	b.n	8008902 <__gethex+0x1da>
 8008976:	da0b      	bge.n	8008990 <__gethex+0x268>
 8008978:	eba5 0800 	sub.w	r8, r5, r0
 800897c:	4621      	mov	r1, r4
 800897e:	4642      	mov	r2, r8
 8008980:	4648      	mov	r0, r9
 8008982:	f7fe f929 	bl	8006bd8 <__lshift>
 8008986:	eba6 0608 	sub.w	r6, r6, r8
 800898a:	4604      	mov	r4, r0
 800898c:	f100 0a14 	add.w	sl, r0, #20
 8008990:	f04f 0b00 	mov.w	fp, #0
 8008994:	e7ba      	b.n	800890c <__gethex+0x1e4>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	42b3      	cmp	r3, r6
 800899a:	dd73      	ble.n	8008a84 <__gethex+0x35c>
 800899c:	1b9e      	subs	r6, r3, r6
 800899e:	42b5      	cmp	r5, r6
 80089a0:	dc34      	bgt.n	8008a0c <__gethex+0x2e4>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d023      	beq.n	80089f0 <__gethex+0x2c8>
 80089a8:	2b03      	cmp	r3, #3
 80089aa:	d025      	beq.n	80089f8 <__gethex+0x2d0>
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d115      	bne.n	80089dc <__gethex+0x2b4>
 80089b0:	42b5      	cmp	r5, r6
 80089b2:	d113      	bne.n	80089dc <__gethex+0x2b4>
 80089b4:	2d01      	cmp	r5, #1
 80089b6:	d10b      	bne.n	80089d0 <__gethex+0x2a8>
 80089b8:	9a02      	ldr	r2, [sp, #8]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	2301      	movs	r3, #1
 80089c0:	6123      	str	r3, [r4, #16]
 80089c2:	f8ca 3000 	str.w	r3, [sl]
 80089c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089c8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80089cc:	601c      	str	r4, [r3, #0]
 80089ce:	e735      	b.n	800883c <__gethex+0x114>
 80089d0:	1e69      	subs	r1, r5, #1
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7fe fb32 	bl	800703c <__any_on>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d1ed      	bne.n	80089b8 <__gethex+0x290>
 80089dc:	4621      	mov	r1, r4
 80089de:	4648      	mov	r0, r9
 80089e0:	f7fd fee0 	bl	80067a4 <_Bfree>
 80089e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089e6:	2300      	movs	r3, #0
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	f04f 0850 	mov.w	r8, #80	; 0x50
 80089ee:	e725      	b.n	800883c <__gethex+0x114>
 80089f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d1f2      	bne.n	80089dc <__gethex+0x2b4>
 80089f6:	e7df      	b.n	80089b8 <__gethex+0x290>
 80089f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1dc      	bne.n	80089b8 <__gethex+0x290>
 80089fe:	e7ed      	b.n	80089dc <__gethex+0x2b4>
 8008a00:	08009124 	.word	0x08009124
 8008a04:	08008fbd 	.word	0x08008fbd
 8008a08:	080092ce 	.word	0x080092ce
 8008a0c:	f106 38ff 	add.w	r8, r6, #4294967295
 8008a10:	f1bb 0f00 	cmp.w	fp, #0
 8008a14:	d133      	bne.n	8008a7e <__gethex+0x356>
 8008a16:	f1b8 0f00 	cmp.w	r8, #0
 8008a1a:	d004      	beq.n	8008a26 <__gethex+0x2fe>
 8008a1c:	4641      	mov	r1, r8
 8008a1e:	4620      	mov	r0, r4
 8008a20:	f7fe fb0c 	bl	800703c <__any_on>
 8008a24:	4683      	mov	fp, r0
 8008a26:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008a30:	f008 081f 	and.w	r8, r8, #31
 8008a34:	fa03 f308 	lsl.w	r3, r3, r8
 8008a38:	4213      	tst	r3, r2
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	bf18      	it	ne
 8008a40:	f04b 0b02 	orrne.w	fp, fp, #2
 8008a44:	1bad      	subs	r5, r5, r6
 8008a46:	f7ff fe07 	bl	8008658 <rshift>
 8008a4a:	687e      	ldr	r6, [r7, #4]
 8008a4c:	f04f 0802 	mov.w	r8, #2
 8008a50:	f1bb 0f00 	cmp.w	fp, #0
 8008a54:	d04a      	beq.n	8008aec <__gethex+0x3c4>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d016      	beq.n	8008a8a <__gethex+0x362>
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d018      	beq.n	8008a92 <__gethex+0x36a>
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d109      	bne.n	8008a78 <__gethex+0x350>
 8008a64:	f01b 0f02 	tst.w	fp, #2
 8008a68:	d006      	beq.n	8008a78 <__gethex+0x350>
 8008a6a:	f8da 3000 	ldr.w	r3, [sl]
 8008a6e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008a72:	f01b 0f01 	tst.w	fp, #1
 8008a76:	d10f      	bne.n	8008a98 <__gethex+0x370>
 8008a78:	f048 0810 	orr.w	r8, r8, #16
 8008a7c:	e036      	b.n	8008aec <__gethex+0x3c4>
 8008a7e:	f04f 0b01 	mov.w	fp, #1
 8008a82:	e7d0      	b.n	8008a26 <__gethex+0x2fe>
 8008a84:	f04f 0801 	mov.w	r8, #1
 8008a88:	e7e2      	b.n	8008a50 <__gethex+0x328>
 8008a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a8c:	f1c3 0301 	rsb	r3, r3, #1
 8008a90:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d0ef      	beq.n	8008a78 <__gethex+0x350>
 8008a98:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a9c:	f104 0214 	add.w	r2, r4, #20
 8008aa0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4694      	mov	ip, r2
 8008aae:	f852 1b04 	ldr.w	r1, [r2], #4
 8008ab2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008ab6:	d01e      	beq.n	8008af6 <__gethex+0x3ce>
 8008ab8:	3101      	adds	r1, #1
 8008aba:	f8cc 1000 	str.w	r1, [ip]
 8008abe:	f1b8 0f02 	cmp.w	r8, #2
 8008ac2:	f104 0214 	add.w	r2, r4, #20
 8008ac6:	d13d      	bne.n	8008b44 <__gethex+0x41c>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	3b01      	subs	r3, #1
 8008acc:	42ab      	cmp	r3, r5
 8008ace:	d10b      	bne.n	8008ae8 <__gethex+0x3c0>
 8008ad0:	1169      	asrs	r1, r5, #5
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f005 051f 	and.w	r5, r5, #31
 8008ad8:	fa03 f505 	lsl.w	r5, r3, r5
 8008adc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ae0:	421d      	tst	r5, r3
 8008ae2:	bf18      	it	ne
 8008ae4:	f04f 0801 	movne.w	r8, #1
 8008ae8:	f048 0820 	orr.w	r8, r8, #32
 8008aec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aee:	601c      	str	r4, [r3, #0]
 8008af0:	9b02      	ldr	r3, [sp, #8]
 8008af2:	601e      	str	r6, [r3, #0]
 8008af4:	e6a2      	b.n	800883c <__gethex+0x114>
 8008af6:	4290      	cmp	r0, r2
 8008af8:	f842 3c04 	str.w	r3, [r2, #-4]
 8008afc:	d8d6      	bhi.n	8008aac <__gethex+0x384>
 8008afe:	68a2      	ldr	r2, [r4, #8]
 8008b00:	4593      	cmp	fp, r2
 8008b02:	db17      	blt.n	8008b34 <__gethex+0x40c>
 8008b04:	6861      	ldr	r1, [r4, #4]
 8008b06:	4648      	mov	r0, r9
 8008b08:	3101      	adds	r1, #1
 8008b0a:	f7fd fe0b 	bl	8006724 <_Balloc>
 8008b0e:	4682      	mov	sl, r0
 8008b10:	b918      	cbnz	r0, 8008b1a <__gethex+0x3f2>
 8008b12:	4b1b      	ldr	r3, [pc, #108]	; (8008b80 <__gethex+0x458>)
 8008b14:	4602      	mov	r2, r0
 8008b16:	2184      	movs	r1, #132	; 0x84
 8008b18:	e6b3      	b.n	8008882 <__gethex+0x15a>
 8008b1a:	6922      	ldr	r2, [r4, #16]
 8008b1c:	3202      	adds	r2, #2
 8008b1e:	f104 010c 	add.w	r1, r4, #12
 8008b22:	0092      	lsls	r2, r2, #2
 8008b24:	300c      	adds	r0, #12
 8008b26:	f7ff fd4b 	bl	80085c0 <memcpy>
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	4648      	mov	r0, r9
 8008b2e:	f7fd fe39 	bl	80067a4 <_Bfree>
 8008b32:	4654      	mov	r4, sl
 8008b34:	6922      	ldr	r2, [r4, #16]
 8008b36:	1c51      	adds	r1, r2, #1
 8008b38:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b3c:	6121      	str	r1, [r4, #16]
 8008b3e:	2101      	movs	r1, #1
 8008b40:	6151      	str	r1, [r2, #20]
 8008b42:	e7bc      	b.n	8008abe <__gethex+0x396>
 8008b44:	6921      	ldr	r1, [r4, #16]
 8008b46:	4559      	cmp	r1, fp
 8008b48:	dd0b      	ble.n	8008b62 <__gethex+0x43a>
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f7ff fd83 	bl	8008658 <rshift>
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	3601      	adds	r6, #1
 8008b56:	42b3      	cmp	r3, r6
 8008b58:	f6ff aedb 	blt.w	8008912 <__gethex+0x1ea>
 8008b5c:	f04f 0801 	mov.w	r8, #1
 8008b60:	e7c2      	b.n	8008ae8 <__gethex+0x3c0>
 8008b62:	f015 051f 	ands.w	r5, r5, #31
 8008b66:	d0f9      	beq.n	8008b5c <__gethex+0x434>
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	441a      	add	r2, r3
 8008b6c:	f1c5 0520 	rsb	r5, r5, #32
 8008b70:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008b74:	f7fd fec8 	bl	8006908 <__hi0bits>
 8008b78:	42a8      	cmp	r0, r5
 8008b7a:	dbe6      	blt.n	8008b4a <__gethex+0x422>
 8008b7c:	e7ee      	b.n	8008b5c <__gethex+0x434>
 8008b7e:	bf00      	nop
 8008b80:	08008fbd 	.word	0x08008fbd

08008b84 <L_shift>:
 8008b84:	f1c2 0208 	rsb	r2, r2, #8
 8008b88:	0092      	lsls	r2, r2, #2
 8008b8a:	b570      	push	{r4, r5, r6, lr}
 8008b8c:	f1c2 0620 	rsb	r6, r2, #32
 8008b90:	6843      	ldr	r3, [r0, #4]
 8008b92:	6804      	ldr	r4, [r0, #0]
 8008b94:	fa03 f506 	lsl.w	r5, r3, r6
 8008b98:	432c      	orrs	r4, r5
 8008b9a:	40d3      	lsrs	r3, r2
 8008b9c:	6004      	str	r4, [r0, #0]
 8008b9e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008ba2:	4288      	cmp	r0, r1
 8008ba4:	d3f4      	bcc.n	8008b90 <L_shift+0xc>
 8008ba6:	bd70      	pop	{r4, r5, r6, pc}

08008ba8 <__match>:
 8008ba8:	b530      	push	{r4, r5, lr}
 8008baa:	6803      	ldr	r3, [r0, #0]
 8008bac:	3301      	adds	r3, #1
 8008bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bb2:	b914      	cbnz	r4, 8008bba <__match+0x12>
 8008bb4:	6003      	str	r3, [r0, #0]
 8008bb6:	2001      	movs	r0, #1
 8008bb8:	bd30      	pop	{r4, r5, pc}
 8008bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bbe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008bc2:	2d19      	cmp	r5, #25
 8008bc4:	bf98      	it	ls
 8008bc6:	3220      	addls	r2, #32
 8008bc8:	42a2      	cmp	r2, r4
 8008bca:	d0f0      	beq.n	8008bae <__match+0x6>
 8008bcc:	2000      	movs	r0, #0
 8008bce:	e7f3      	b.n	8008bb8 <__match+0x10>

08008bd0 <__hexnan>:
 8008bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd4:	680b      	ldr	r3, [r1, #0]
 8008bd6:	6801      	ldr	r1, [r0, #0]
 8008bd8:	115e      	asrs	r6, r3, #5
 8008bda:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008bde:	f013 031f 	ands.w	r3, r3, #31
 8008be2:	b087      	sub	sp, #28
 8008be4:	bf18      	it	ne
 8008be6:	3604      	addne	r6, #4
 8008be8:	2500      	movs	r5, #0
 8008bea:	1f37      	subs	r7, r6, #4
 8008bec:	4682      	mov	sl, r0
 8008bee:	4690      	mov	r8, r2
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008bf6:	46b9      	mov	r9, r7
 8008bf8:	463c      	mov	r4, r7
 8008bfa:	9502      	str	r5, [sp, #8]
 8008bfc:	46ab      	mov	fp, r5
 8008bfe:	784a      	ldrb	r2, [r1, #1]
 8008c00:	1c4b      	adds	r3, r1, #1
 8008c02:	9303      	str	r3, [sp, #12]
 8008c04:	b342      	cbz	r2, 8008c58 <__hexnan+0x88>
 8008c06:	4610      	mov	r0, r2
 8008c08:	9105      	str	r1, [sp, #20]
 8008c0a:	9204      	str	r2, [sp, #16]
 8008c0c:	f7ff fd76 	bl	80086fc <__hexdig_fun>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d14f      	bne.n	8008cb4 <__hexnan+0xe4>
 8008c14:	9a04      	ldr	r2, [sp, #16]
 8008c16:	9905      	ldr	r1, [sp, #20]
 8008c18:	2a20      	cmp	r2, #32
 8008c1a:	d818      	bhi.n	8008c4e <__hexnan+0x7e>
 8008c1c:	9b02      	ldr	r3, [sp, #8]
 8008c1e:	459b      	cmp	fp, r3
 8008c20:	dd13      	ble.n	8008c4a <__hexnan+0x7a>
 8008c22:	454c      	cmp	r4, r9
 8008c24:	d206      	bcs.n	8008c34 <__hexnan+0x64>
 8008c26:	2d07      	cmp	r5, #7
 8008c28:	dc04      	bgt.n	8008c34 <__hexnan+0x64>
 8008c2a:	462a      	mov	r2, r5
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f7ff ffa8 	bl	8008b84 <L_shift>
 8008c34:	4544      	cmp	r4, r8
 8008c36:	d950      	bls.n	8008cda <__hexnan+0x10a>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	f1a4 0904 	sub.w	r9, r4, #4
 8008c3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c42:	f8cd b008 	str.w	fp, [sp, #8]
 8008c46:	464c      	mov	r4, r9
 8008c48:	461d      	mov	r5, r3
 8008c4a:	9903      	ldr	r1, [sp, #12]
 8008c4c:	e7d7      	b.n	8008bfe <__hexnan+0x2e>
 8008c4e:	2a29      	cmp	r2, #41	; 0x29
 8008c50:	d155      	bne.n	8008cfe <__hexnan+0x12e>
 8008c52:	3102      	adds	r1, #2
 8008c54:	f8ca 1000 	str.w	r1, [sl]
 8008c58:	f1bb 0f00 	cmp.w	fp, #0
 8008c5c:	d04f      	beq.n	8008cfe <__hexnan+0x12e>
 8008c5e:	454c      	cmp	r4, r9
 8008c60:	d206      	bcs.n	8008c70 <__hexnan+0xa0>
 8008c62:	2d07      	cmp	r5, #7
 8008c64:	dc04      	bgt.n	8008c70 <__hexnan+0xa0>
 8008c66:	462a      	mov	r2, r5
 8008c68:	4649      	mov	r1, r9
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f7ff ff8a 	bl	8008b84 <L_shift>
 8008c70:	4544      	cmp	r4, r8
 8008c72:	d934      	bls.n	8008cde <__hexnan+0x10e>
 8008c74:	f1a8 0204 	sub.w	r2, r8, #4
 8008c78:	4623      	mov	r3, r4
 8008c7a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c7e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c82:	429f      	cmp	r7, r3
 8008c84:	d2f9      	bcs.n	8008c7a <__hexnan+0xaa>
 8008c86:	1b3b      	subs	r3, r7, r4
 8008c88:	f023 0303 	bic.w	r3, r3, #3
 8008c8c:	3304      	adds	r3, #4
 8008c8e:	3e03      	subs	r6, #3
 8008c90:	3401      	adds	r4, #1
 8008c92:	42a6      	cmp	r6, r4
 8008c94:	bf38      	it	cc
 8008c96:	2304      	movcc	r3, #4
 8008c98:	4443      	add	r3, r8
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f843 2b04 	str.w	r2, [r3], #4
 8008ca0:	429f      	cmp	r7, r3
 8008ca2:	d2fb      	bcs.n	8008c9c <__hexnan+0xcc>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	b91b      	cbnz	r3, 8008cb0 <__hexnan+0xe0>
 8008ca8:	4547      	cmp	r7, r8
 8008caa:	d126      	bne.n	8008cfa <__hexnan+0x12a>
 8008cac:	2301      	movs	r3, #1
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	2005      	movs	r0, #5
 8008cb2:	e025      	b.n	8008d00 <__hexnan+0x130>
 8008cb4:	3501      	adds	r5, #1
 8008cb6:	2d08      	cmp	r5, #8
 8008cb8:	f10b 0b01 	add.w	fp, fp, #1
 8008cbc:	dd06      	ble.n	8008ccc <__hexnan+0xfc>
 8008cbe:	4544      	cmp	r4, r8
 8008cc0:	d9c3      	bls.n	8008c4a <__hexnan+0x7a>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f844 3c04 	str.w	r3, [r4, #-4]
 8008cc8:	2501      	movs	r5, #1
 8008cca:	3c04      	subs	r4, #4
 8008ccc:	6822      	ldr	r2, [r4, #0]
 8008cce:	f000 000f 	and.w	r0, r0, #15
 8008cd2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008cd6:	6020      	str	r0, [r4, #0]
 8008cd8:	e7b7      	b.n	8008c4a <__hexnan+0x7a>
 8008cda:	2508      	movs	r5, #8
 8008cdc:	e7b5      	b.n	8008c4a <__hexnan+0x7a>
 8008cde:	9b01      	ldr	r3, [sp, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d0df      	beq.n	8008ca4 <__hexnan+0xd4>
 8008ce4:	f1c3 0320 	rsb	r3, r3, #32
 8008ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cec:	40da      	lsrs	r2, r3
 8008cee:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008cf8:	e7d4      	b.n	8008ca4 <__hexnan+0xd4>
 8008cfa:	3f04      	subs	r7, #4
 8008cfc:	e7d2      	b.n	8008ca4 <__hexnan+0xd4>
 8008cfe:	2004      	movs	r0, #4
 8008d00:	b007      	add	sp, #28
 8008d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d06 <__ascii_mbtowc>:
 8008d06:	b082      	sub	sp, #8
 8008d08:	b901      	cbnz	r1, 8008d0c <__ascii_mbtowc+0x6>
 8008d0a:	a901      	add	r1, sp, #4
 8008d0c:	b142      	cbz	r2, 8008d20 <__ascii_mbtowc+0x1a>
 8008d0e:	b14b      	cbz	r3, 8008d24 <__ascii_mbtowc+0x1e>
 8008d10:	7813      	ldrb	r3, [r2, #0]
 8008d12:	600b      	str	r3, [r1, #0]
 8008d14:	7812      	ldrb	r2, [r2, #0]
 8008d16:	1e10      	subs	r0, r2, #0
 8008d18:	bf18      	it	ne
 8008d1a:	2001      	movne	r0, #1
 8008d1c:	b002      	add	sp, #8
 8008d1e:	4770      	bx	lr
 8008d20:	4610      	mov	r0, r2
 8008d22:	e7fb      	b.n	8008d1c <__ascii_mbtowc+0x16>
 8008d24:	f06f 0001 	mvn.w	r0, #1
 8008d28:	e7f8      	b.n	8008d1c <__ascii_mbtowc+0x16>

08008d2a <_realloc_r>:
 8008d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2e:	4680      	mov	r8, r0
 8008d30:	4614      	mov	r4, r2
 8008d32:	460e      	mov	r6, r1
 8008d34:	b921      	cbnz	r1, 8008d40 <_realloc_r+0x16>
 8008d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	f7fd bc66 	b.w	800660c <_malloc_r>
 8008d40:	b92a      	cbnz	r2, 8008d4e <_realloc_r+0x24>
 8008d42:	f7fd fbef 	bl	8006524 <_free_r>
 8008d46:	4625      	mov	r5, r4
 8008d48:	4628      	mov	r0, r5
 8008d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d4e:	f000 f842 	bl	8008dd6 <_malloc_usable_size_r>
 8008d52:	4284      	cmp	r4, r0
 8008d54:	4607      	mov	r7, r0
 8008d56:	d802      	bhi.n	8008d5e <_realloc_r+0x34>
 8008d58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d5c:	d812      	bhi.n	8008d84 <_realloc_r+0x5a>
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4640      	mov	r0, r8
 8008d62:	f7fd fc53 	bl	800660c <_malloc_r>
 8008d66:	4605      	mov	r5, r0
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d0ed      	beq.n	8008d48 <_realloc_r+0x1e>
 8008d6c:	42bc      	cmp	r4, r7
 8008d6e:	4622      	mov	r2, r4
 8008d70:	4631      	mov	r1, r6
 8008d72:	bf28      	it	cs
 8008d74:	463a      	movcs	r2, r7
 8008d76:	f7ff fc23 	bl	80085c0 <memcpy>
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	f7fd fbd1 	bl	8006524 <_free_r>
 8008d82:	e7e1      	b.n	8008d48 <_realloc_r+0x1e>
 8008d84:	4635      	mov	r5, r6
 8008d86:	e7df      	b.n	8008d48 <_realloc_r+0x1e>

08008d88 <__ascii_wctomb>:
 8008d88:	b149      	cbz	r1, 8008d9e <__ascii_wctomb+0x16>
 8008d8a:	2aff      	cmp	r2, #255	; 0xff
 8008d8c:	bf85      	ittet	hi
 8008d8e:	238a      	movhi	r3, #138	; 0x8a
 8008d90:	6003      	strhi	r3, [r0, #0]
 8008d92:	700a      	strbls	r2, [r1, #0]
 8008d94:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d98:	bf98      	it	ls
 8008d9a:	2001      	movls	r0, #1
 8008d9c:	4770      	bx	lr
 8008d9e:	4608      	mov	r0, r1
 8008da0:	4770      	bx	lr
	...

08008da4 <fiprintf>:
 8008da4:	b40e      	push	{r1, r2, r3}
 8008da6:	b503      	push	{r0, r1, lr}
 8008da8:	4601      	mov	r1, r0
 8008daa:	ab03      	add	r3, sp, #12
 8008dac:	4805      	ldr	r0, [pc, #20]	; (8008dc4 <fiprintf+0x20>)
 8008dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db2:	6800      	ldr	r0, [r0, #0]
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	f7ff f97b 	bl	80080b0 <_vfiprintf_r>
 8008dba:	b002      	add	sp, #8
 8008dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dc0:	b003      	add	sp, #12
 8008dc2:	4770      	bx	lr
 8008dc4:	20000064 	.word	0x20000064

08008dc8 <abort>:
 8008dc8:	b508      	push	{r3, lr}
 8008dca:	2006      	movs	r0, #6
 8008dcc:	f000 f834 	bl	8008e38 <raise>
 8008dd0:	2001      	movs	r0, #1
 8008dd2:	f7f8 ff19 	bl	8001c08 <_exit>

08008dd6 <_malloc_usable_size_r>:
 8008dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dda:	1f18      	subs	r0, r3, #4
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	bfbc      	itt	lt
 8008de0:	580b      	ldrlt	r3, [r1, r0]
 8008de2:	18c0      	addlt	r0, r0, r3
 8008de4:	4770      	bx	lr

08008de6 <_raise_r>:
 8008de6:	291f      	cmp	r1, #31
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4604      	mov	r4, r0
 8008dec:	460d      	mov	r5, r1
 8008dee:	d904      	bls.n	8008dfa <_raise_r+0x14>
 8008df0:	2316      	movs	r3, #22
 8008df2:	6003      	str	r3, [r0, #0]
 8008df4:	f04f 30ff 	mov.w	r0, #4294967295
 8008df8:	bd38      	pop	{r3, r4, r5, pc}
 8008dfa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008dfc:	b112      	cbz	r2, 8008e04 <_raise_r+0x1e>
 8008dfe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e02:	b94b      	cbnz	r3, 8008e18 <_raise_r+0x32>
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 f831 	bl	8008e6c <_getpid_r>
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	4601      	mov	r1, r0
 8008e0e:	4620      	mov	r0, r4
 8008e10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e14:	f000 b818 	b.w	8008e48 <_kill_r>
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d00a      	beq.n	8008e32 <_raise_r+0x4c>
 8008e1c:	1c59      	adds	r1, r3, #1
 8008e1e:	d103      	bne.n	8008e28 <_raise_r+0x42>
 8008e20:	2316      	movs	r3, #22
 8008e22:	6003      	str	r3, [r0, #0]
 8008e24:	2001      	movs	r0, #1
 8008e26:	e7e7      	b.n	8008df8 <_raise_r+0x12>
 8008e28:	2400      	movs	r4, #0
 8008e2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e2e:	4628      	mov	r0, r5
 8008e30:	4798      	blx	r3
 8008e32:	2000      	movs	r0, #0
 8008e34:	e7e0      	b.n	8008df8 <_raise_r+0x12>
	...

08008e38 <raise>:
 8008e38:	4b02      	ldr	r3, [pc, #8]	; (8008e44 <raise+0xc>)
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	6818      	ldr	r0, [r3, #0]
 8008e3e:	f7ff bfd2 	b.w	8008de6 <_raise_r>
 8008e42:	bf00      	nop
 8008e44:	20000064 	.word	0x20000064

08008e48 <_kill_r>:
 8008e48:	b538      	push	{r3, r4, r5, lr}
 8008e4a:	4d07      	ldr	r5, [pc, #28]	; (8008e68 <_kill_r+0x20>)
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	4604      	mov	r4, r0
 8008e50:	4608      	mov	r0, r1
 8008e52:	4611      	mov	r1, r2
 8008e54:	602b      	str	r3, [r5, #0]
 8008e56:	f7f8 fec7 	bl	8001be8 <_kill>
 8008e5a:	1c43      	adds	r3, r0, #1
 8008e5c:	d102      	bne.n	8008e64 <_kill_r+0x1c>
 8008e5e:	682b      	ldr	r3, [r5, #0]
 8008e60:	b103      	cbz	r3, 8008e64 <_kill_r+0x1c>
 8008e62:	6023      	str	r3, [r4, #0]
 8008e64:	bd38      	pop	{r3, r4, r5, pc}
 8008e66:	bf00      	nop
 8008e68:	2000046c 	.word	0x2000046c

08008e6c <_getpid_r>:
 8008e6c:	f7f8 beb4 	b.w	8001bd8 <_getpid>

08008e70 <_init>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	bf00      	nop
 8008e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e76:	bc08      	pop	{r3}
 8008e78:	469e      	mov	lr, r3
 8008e7a:	4770      	bx	lr

08008e7c <_fini>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	bf00      	nop
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr
